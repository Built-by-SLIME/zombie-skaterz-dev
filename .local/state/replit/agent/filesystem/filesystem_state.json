{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Zombie Skater - GBA Style Runner\n\n## Overview\n\nThis is a retro-style 2D endless runner game featuring skateboarding zombie characters. The game mimics classic 16-bit aesthetics with pixelated graphics and vibrant colors. Players dodge obstacles, crush enemies, and collect $STAR tokens to purchase customizations, new characters, game modes, and extra lives. The game features a comprehensive combo system, resource management mechanics, and progressive difficulty scaling. Built with modern web technologies, the project is architected for future blockchain integration through Hedera network features.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## Recent Changes\n\n### Complete Game Implementation (Jan 2025)\n- **Music System Fixes**: Fixed menu music transitions to properly continue between menu screens and restart when returning from gameplay\n- **Dual Character System**: Play as Kev or Stacy with unique zombie sprites\n- **Enemy Combat System**: Stomp on eyeball and robot enemies for points and combos\n- **Resource Management**: Health system with sandwich pickups, stamina for double jumps\n- **Power-Up System**: Energy drinks provide stamina boost and temporary invulnerability\n- **Combo Mechanics**: Chain tricks and kills for x3-x10 star multipliers\n- **Star Economy**: Collect $STAR tokens for lives (100, 200, 300) and future purchases\n- **Progressive Difficulty**: Speed increases based on score thresholds\n- **Obstacle Variety**: Multiple obstacle types (cones, trash, crashes, zombies, skulls)\n- **Audio System**: Jump, combo, explosion, and star collection sound effects\n- **Music System**: Alternating tracks (\"Broken Code\" and \"Undead Empire\") with on-screen credits\n- **UI Systems**: Health/stamina bars, life counter, star display, combo notifications\n- **Leaderboard**: PostgreSQL-backed high score system with automatic submission\n- **Tutorial System**: In-game instructions and dedicated How to Play screen\n- **Control Systems**: J key for aerial tricks (desktop), swipe up (mobile), space/tap for jumping\n\n## System Architecture\n\n### Frontend Architecture\n- **Game Engine**: Phaser 3 for HTML5 canvas-based game rendering and physics\n- **UI Framework**: React with TypeScript for game interface components\n- **Styling**: Tailwind CSS with custom pixelated styling for GBA aesthetic\n- **Build System**: Vite for fast development and optimized production builds\n- **State Management**: Zustand stores for game state and audio management\n\n### Backend Architecture\n- **Server Framework**: Express.js with TypeScript\n- **Development Setup**: Hot module replacement with Vite integration in development\n- **Storage Interface**: Abstracted storage layer with in-memory implementation (ready for database integration)\n- **API Structure**: RESTful endpoints with /api prefix (currently minimal)\n\n### Game Architecture\n- **Scene Management**: Complete scene system (Splash screens 1-5, MainMenu, CharacterSelect, HowToPlay, Game, GameOver, Leaderboard)\n- **Input System**: Unified controls with keyboard, mouse, tap, and swipe gesture support\n- **Physics**: Arcade physics for collisions, enemy stomping, and item collection\n- **Combat System**: Enemy spawning, collision detection, and stomping mechanics\n- **Combo System**: Modular combo tracker with event-based architecture\n- **Resource Systems**: Health management, stamina regeneration, life tracking\n- **Item Systems**: Power-up spawning with warning indicators, collection effects\n- **Audio Management**: Dynamic music switching, layered sound effects\n- **UI Systems**: Responsive HUD, floating text notifications, particle effects\n- **Scoring Engine**: Point accumulation, combo multipliers, star conversion\n\n### Data Storage\n- **Local Storage**: Browser localStorage for high scores and game settings\n- **Database Ready**: Drizzle ORM configured for PostgreSQL with user schema\n- **Session Management**: Express session setup with PostgreSQL store support\n\n### Styling and Design\n- **Retro Aesthetic**: 240x160 base resolution scaled up with nearest-neighbor filtering\n- **Component Library**: Comprehensive Radix UI components with custom styling\n- **Responsive Design**: Mobile-first approach with touch controls\n- **Theme System**: CSS custom properties for consistent color schemes\n\n## External Dependencies\n\n### Core Game Dependencies\n- **Phaser**: Game engine for 2D canvas rendering and physics simulation\n- **React/React-DOM**: Component-based UI framework\n- **TypeScript**: Type safety across frontend and backend\n\n### UI and Styling\n- **Tailwind CSS**: Utility-first CSS framework\n- **Radix UI**: Accessible component primitives\n- **Lucide React**: Icon library for UI elements\n- **Class Variance Authority**: Component variant management\n\n### Backend Services\n- **Express**: Web server framework\n- **Drizzle ORM**: Type-safe database toolkit\n- **Neon Database**: Serverless PostgreSQL (configured but not implemented)\n\n### Development Tools\n- **Vite**: Build tool and development server\n- **ESBuild**: Fast JavaScript bundler for production\n- **PostCSS**: CSS processing with Autoprefixer\n\n### Blockchain Integration (Architecture Ready)\n- **Hedera Network**: Infrastructure planned for NFT integration and decentralized features\n- **HashPack Wallet**: Architecture prepared for wallet connection (requires implementation)\n- **Status**: Dependencies not yet installed, integration points identified\n\n### Audio and Media\n- **Web Audio API**: Sound effects and background music support\n- **GLSL Shader Support**: Enhanced visual effects capability\n\nThe application is structured as a full-stack TypeScript project with a clear separation between game logic, UI components, and server functionality. The modular architecture allows for easy extension with blockchain features, multiplayer capabilities, and enhanced graphics while maintaining the retro aesthetic.","size_bytes":5886},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2787},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path, { dirname } from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\nimport { fileURLToPath } from \"url\";\nimport glsl from \"vite-plugin-glsl\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    glsl(), // Add GLSL shader support\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(__dirname, \"shared\"),\n    },\n  },\n  root: path.resolve(__dirname, \"client\"),\n  build: {\n    outDir: path.resolve(__dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  // Add support for large models and audio files\n  assetsInclude: [\"**/*.gltf\", \"**/*.glb\", \"**/*.mp3\", \"**/*.ogg\", \"**/*.wav\"],\n});\n","size_bytes":896},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":1871},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // put application routes here\n  // prefix all routes with /api\n\n  // use storage to perform CRUD operations on the storage interface\n  // e.g. storage.insertUser(user) or storage.getUserByUsername(username)\n  \n  // Leaderboard API endpoints\n  app.post('/api/leaderboard', async (req, res) => {\n    try {\n      const { playerName, score } = req.body;\n      \n      if (!playerName || typeof score !== 'number') {\n        return res.status(400).json({ error: 'Player name and score are required' });\n      }\n      \n      const savedScore = await storage.saveScore(playerName, score);\n      res.json(savedScore);\n    } catch (error) {\n      console.error('Error saving score:', error);\n      res.status(500).json({ error: 'Failed to save score' });\n    }\n  });\n  \n  app.get('/api/leaderboard', async (req, res) => {\n    try {\n      const limit = parseInt(req.query.limit as string) || 10;\n      const topScores = await storage.getTopScores(limit);\n      res.json(topScores);\n    } catch (error) {\n      console.error('Error fetching leaderboard:', error);\n      res.status(500).json({ error: 'Failed to fetch leaderboard' });\n    }\n  });\n  \n  app.get('/api/leaderboard/high-score', async (req, res) => {\n    try {\n      const highScore = await storage.getHighScore();\n      res.json({ highScore });\n    } catch (error) {\n      console.error('Error fetching high score:', error);\n      res.status(500).json({ error: 'Failed to fetch high score' });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":1722},"server/storage.ts":{"content":"import { users, leaderboard, type User, type InsertUser, type Leaderboard, type InsertLeaderboard } from \"@shared/schema\";\nimport { drizzle } from \"drizzle-orm/neon-http\";\nimport { neon } from \"@neondatabase/serverless\";\nimport { desc, sql } from \"drizzle-orm\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Leaderboard methods\n  saveScore(playerName: string, score: number): Promise<Leaderboard>;\n  getTopScores(limit?: number): Promise<Leaderboard[]>;\n  getHighScore(): Promise<number>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  private db;\n\n  constructor() {\n    const connectionString = process.env.DATABASE_URL;\n    if (!connectionString) {\n      throw new Error('DATABASE_URL environment variable is not set');\n    }\n    \n    const connection = neon(connectionString);\n    this.db = drizzle(connection);\n  }\n\n  async getUser(id: number): Promise<User | undefined> {\n    const result = await this.db.select().from(users).where(sql`${users.id} = ${id}`).limit(1);\n    return result[0];\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const result = await this.db.select().from(users).where(sql`${users.username} = ${username}`).limit(1);\n    return result[0];\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const result = await this.db.insert(users).values(insertUser).returning();\n    return result[0];\n  }\n\n  async saveScore(playerName: string, score: number): Promise<Leaderboard> {\n    const result = await this.db.insert(leaderboard).values({ playerName, score }).returning();\n    return result[0];\n  }\n\n  async getTopScores(limit: number = 10): Promise<Leaderboard[]> {\n    return await this.db.select().from(leaderboard).orderBy(desc(leaderboard.score)).limit(limit);\n  }\n\n  async getHighScore(): Promise<number> {\n    const result = await this.db.select({ maxScore: sql<number>`max(${leaderboard.score})` }).from(leaderboard);\n    return result[0]?.maxScore || 0;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":2218},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path, { dirname } from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { createServer as createViteServer, createLogger, type ServerOptions } from \"vite\";\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions: ServerOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        __dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(__dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2409},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\nexport const leaderboard = pgTable(\"leaderboard\", {\n  id: serial(\"id\").primaryKey(),\n  playerName: text(\"player_name\").notNull(),\n  score: integer(\"score\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertLeaderboardSchema = createInsertSchema(leaderboard).pick({\n  playerName: true,\n  score: true,\n});\n\nexport type InsertLeaderboard = z.infer<typeof insertLeaderboardSchema>;\nexport type Leaderboard = typeof leaderboard.$inferSelect;\n","size_bytes":1028},"client/src/App.tsx":{"content":"import { useEffect, useRef } from \"react\";\nimport ZombieSkaterGame from \"./components/ZombieSkaterGame\";\nimport \"@fontsource/inter\";\n\nfunction App() {\n  return (\n    <div style={{ \n      width: '100vw', \n      height: '100vh', \n      display: 'flex', \n      alignItems: 'center', \n      justifyContent: 'center',\n      background: '#000'\n    }}>\n      <ZombieSkaterGame />\n    </div>\n  );\n}\n\nexport default App;\n","size_bytes":412},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-black text-white;\n    margin: 0;\n    padding: 0;\n    overflow: hidden;\n    width: 100vw;\n    height: 100vh;\n  }\n}\n\n#root {\n  width: 100%;\n  height: 100%;\n  position: fixed;\n}\n\ncanvas {\n  image-rendering: pixelated;\n  image-rendering: -moz-crisp-edges;\n  image-rendering: crisp-edges;\n  width: 100% !important;\n  height: 100% !important;\n  touch-action: none;\n  /* Disable text smoothing */\n  -webkit-font-smoothing: none;\n  -moz-osx-font-smoothing: unset;\n  text-rendering: optimizeSpeed;\n}\n\n/* GBA-style UI elements */\n.gba-button {\n  background: #4a5568;\n  border: 2px solid #2d3748;\n  border-radius: 4px;\n  color: #e2e8f0;\n  font-family: monospace;\n  font-size: 12px;\n  padding: 8px 16px;\n  cursor: pointer;\n  image-rendering: pixelated;\n}\n\n.gba-button:hover {\n  background: #718096;\n}\n\n.gba-button:active {\n  background: #2d3748;\n}\n\n.gba-text {\n  font-family: monospace;\n  color: #e2e8f0;\n  text-shadow: 1px 1px 0px #000;\n  image-rendering: pixelated;\n}\n","size_bytes":1114},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ZombieSkaterGame.tsx":{"content":"import { useEffect, useRef } from 'react';\nimport { createGame } from '../game/main';\n\n// Global cleanup function\nconst cleanupGlobalAudio = () => {\n  // Clean up any global menu music instance\n  if ((window as any).menuMusicInstance) {\n    try {\n      (window as any).menuMusicInstance.stop();\n      (window as any).menuMusicInstance.destroy();\n    } catch (e) {\n      console.log('Error cleaning up menu music:', e);\n    }\n    (window as any).menuMusicInstance = undefined;\n    // Reset the flag so music can play again on next game load\n    (window as any).menuMusicStarted = false;\n  }\n};\n\nconst ZombieSkaterGame = () => {\n  const gameRef = useRef<HTMLDivElement>(null);\n  const phaserGameRef = useRef<Phaser.Game | null>(null);\n\n  useEffect(() => {\n    if (gameRef.current) {\n      // Clean up any existing game instance and global audio first\n      cleanupGlobalAudio();\n      \n      if (phaserGameRef.current) {\n        phaserGameRef.current.destroy(true);\n        phaserGameRef.current = null;\n      }\n      \n      // Create the Phaser game\n      phaserGameRef.current = createGame(gameRef.current);\n    }\n\n    return () => {\n      // Clean up Phaser game and global audio on component unmount\n      cleanupGlobalAudio();\n      \n      if (phaserGameRef.current) {\n        phaserGameRef.current.destroy(true);\n        phaserGameRef.current = null;\n      }\n    };\n  }, []);\n\n  return (\n    <div \n      id=\"game-wrapper\"\n      style={{ \n        width: '100vw', \n        height: '100vh',\n        display: 'flex',\n        alignItems: 'flex-start',\n        justifyContent: 'center',\n        backgroundColor: '#000',\n        overflow: 'hidden',\n        position: 'fixed',\n        top: 0,\n        left: 0\n      }}\n    >\n      <div\n        id=\"game-container\"\n        ref={gameRef}\n        style={{\n          width: 'min(100vw, calc(100vh * 640 / 960))',\n          height: 'min(100vh, calc(100vw * 960 / 640))',\n          position: 'relative',\n          backgroundColor: '#000'\n        }}\n      />\n    </div>\n  );\n};\n\nexport default ZombieSkaterGame;\n","size_bytes":2050},"client/src/game/main.ts":{"content":"import Phaser from 'phaser';\nimport Preload from './scenes/Preload';\nimport { Splash1 } from './scenes/Splash1';\nimport { Splash2 } from './scenes/Splash2';\nimport { Splash3 } from './scenes/Splash3';\nimport { Splash4 } from './scenes/Splash4';\nimport { Splash5 } from './scenes/Splash5';\nimport { MainMenu } from './scenes/MainMenu';\nimport { OptionsMenu } from './scenes/OptionsMenu';\nimport { HowToPlay } from './scenes/HowToPlay';\nimport Leaderboard from './scenes/Leaderboard';\nimport CharacterSelect from './scenes/CharacterSelect';\nimport Game from './scenes/Game';\nimport GameOver from './scenes/GameOver';\n\n// Scaled up resolution\nconst BASE_W = 640;\nconst BASE_H = 960;\n\nexport function createGame(parent: HTMLElement): Phaser.Game {\n  const config: Phaser.Types.Core.GameConfig = {\n    type: Phaser.AUTO,\n    parent,\n    width: BASE_W,\n    height: BASE_H,\n    pixelArt: true,\n    roundPixels: true,\n    antialias: false,\n    render: {\n      pixelArt: true,\n      antialias: false,\n      roundPixels: true\n    },\n    physics: {\n      default: 'arcade',\n      arcade: {\n        gravity: { x: 0, y: 4800 }, // Less floaty gravity\n        debug: false\n      }\n    },\n    scale: {\n      mode: Phaser.Scale.FIT,\n      autoCenter: Phaser.Scale.CENTER_HORIZONTALLY, // Only center horizontally, not vertically\n      width: BASE_W,\n      height: BASE_H,\n      parent: parent,\n      fullscreenTarget: parent,\n      expandParent: false,\n      autoRound: true // Round pixel values for crisp rendering\n    },\n    input: {\n      keyboard: true,\n      mouse: true,\n      touch: true,\n      gamepad: false,\n      activePointers: 1\n    },\n    scene: [Preload, Splash1, Splash2, Splash3, Splash4, Splash5, MainMenu, OptionsMenu, HowToPlay, Leaderboard, CharacterSelect, Game, GameOver],\n    backgroundColor: '#2c5f2d' // GBA green background\n  };\n\n  const game = new Phaser.Game(config);\n  \n  // Force disable text smoothing on the canvas context\n  game.events.once('ready', () => {\n    const canvas = game.canvas as HTMLCanvasElement;\n    const ctx = canvas.getContext('2d');\n    if (ctx) {\n      (ctx as any).imageSmoothingEnabled = false;\n      (ctx as any).webkitImageSmoothingEnabled = false;\n      (ctx as any).mozImageSmoothingEnabled = false;\n      (ctx as any).msImageSmoothingEnabled = false;\n    }\n  });\n\n  return game;\n}\n","size_bytes":2327},"client/src/hooks/use-is-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1376},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nconst getLocalStorage = (key: string): any =>\n  JSON.parse(window.localStorage.getItem(key) || \"null\");\nconst setLocalStorage = (key: string, value: any): void =>\n  window.localStorage.setItem(key, JSON.stringify(value));\n\nexport { getLocalStorage, setLocalStorage };\n","size_bytes":438},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline text-left [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 text-muted-foreground transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":2001},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4419},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1598},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1140},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1902},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: cn(\n          \"relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected].day-range-end)]:rounded-r-md\",\n          props.mode === \"range\"\n            ? \"[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md\"\n            : \"[&:has([aria-selected])]:rounded-md\"\n        ),\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-8 w-8 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_start: \"day-range-start\",\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2935},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border bg-card text-card-foreground shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1828},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1012},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4873},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-4 w-4 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7224},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogTrigger,\n  DialogClose,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3849},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md\",\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&>svg]:size-4 [&>svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7480},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-[0.8rem] text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-[0.8rem] font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4132},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1198},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Minus } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-9 w-9 items-center justify-center border-y border-r border-input text-sm shadow-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-1 ring-ring\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Minus />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2143},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":768},"client/src/components/ui/interface.tsx":{"content":"import { useEffect } from \"react\";\nimport { useGame } from \"@/lib/stores/useGame\";\nimport { useAudio } from \"@/lib/stores/useAudio\";\nimport { Button } from \"./button\";\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from \"./card\";\nimport { VolumeX, Volume2, RotateCw, Trophy } from \"lucide-react\";\n\nexport function Interface() {\n  const restart = useGame((state) => state.restart);\n  const phase = useGame((state) => state.phase);\n  const { isMuted, toggleMute } = useAudio();\n\n  // Handle clicks on the interface in the ready phase to start the game\n  useEffect(() => {\n    if (phase === \"ready\") {\n      const handleClick = () => {\n        const activeElement = document.activeElement;\n        if (activeElement && 'blur' in activeElement) {\n          (activeElement as HTMLElement).blur();\n        }\n        const event = new KeyboardEvent(\"keydown\", { code: \"Space\" });\n        window.dispatchEvent(event);\n      };\n\n      window.addEventListener(\"click\", handleClick);\n      return () => window.removeEventListener(\"click\", handleClick);\n    }\n  }, [phase]);\n\n  return (\n    <>\n      {/* Top-right corner UI controls */}\n      <div className=\"fixed top-4 right-4 flex gap-2 z-10\">\n        <Button\n          variant=\"outline\"\n          size=\"icon\"\n          onClick={toggleMute}\n          title={isMuted ? \"Unmute\" : \"Mute\"}\n        >\n          {isMuted ? <VolumeX size={18} /> : <Volume2 size={18} />}\n        </Button>\n        \n        <Button\n          variant=\"outline\"\n          size=\"icon\"\n          onClick={restart}\n          title=\"Restart Game\"\n        >\n          <RotateCw size={18} />\n        </Button>\n      </div>\n      \n      {/* Game completion overlay */}\n      {phase === \"ended\" && (\n        <div className=\"fixed inset-0 flex items-center justify-center z-20 bg-black/30\">\n          <Card className=\"w-full max-w-md mx-4 shadow-lg\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-center gap-2\">\n                <Trophy className=\"text-yellow-500\" />\n                Level Complete!\n              </CardTitle>\n            </CardHeader>\n            \n            <CardContent>\n              <p className=\"text-center text-muted-foreground\">\n                Congratulations! You successfully navigated the course.\n              </p>\n            </CardContent>\n            \n            <CardFooter className=\"flex justify-center\">\n              <Button onClick={restart} className=\"w-full\">\n                Play Again\n              </Button>\n            </CardFooter>\n          </Card>\n        </div>\n      )}\n      \n      {/* Instructions panel */}\n      <div className=\"fixed bottom-4 left-4 z-10\">\n        <Card className=\"w-auto max-w-xs bg-background/80 backdrop-blur-sm\">\n          <CardContent className=\"p-4\">\n            <h3 className=\"font-medium mb-2\">Controls:</h3>\n            <ul className=\"text-sm space-y-1 text-muted-foreground\">\n              <li>WASD or Arrow Keys: Move the ball</li>\n              <li>Space: Jump</li>\n              <li>R: Restart game</li>\n              <li>M: Toggle sound</li>\n            </ul>\n          </CardContent>\n        </Card>\n      </div>\n    </>\n  );\n}\n","size_bytes":3180},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-9 items-center space-x-1 rounded-md border bg-background p-1 shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-4 w-4 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8522},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-300 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5124},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationLink,\n  PaginationItem,\n  PaginationPrevious,\n  PaginationNext,\n  PaginationEllipsis,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverAnchor = PopoverPrimitive.Anchor\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }\n","size_bytes":1292},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-2 w-full overflow-hidden rounded-full bg-primary/20\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":792},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary shadow focus:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-3.5 w-3.5 fill-primary\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1410},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"px-2 py-1.5 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute right-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5639},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n      {children}\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4280},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { VariantProps, cva } from \"class-variance-authority\";\nimport { PanelLeft } from \"lucide-react\";\n\nimport { useIsMobile } from \"@/hooks/use-is-mobile\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\";\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;\nconst SIDEBAR_WIDTH = \"16rem\";\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\";\nconst SIDEBAR_WIDTH_ICON = \"3rem\";\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\";\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\";\n  open: boolean;\n  setOpen: (open: boolean) => void;\n  openMobile: boolean;\n  setOpenMobile: (open: boolean) => void;\n  isMobile: boolean;\n  toggleSidebar: () => void;\n};\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null);\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext);\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\");\n  }\n\n  return context;\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean;\n    open?: boolean;\n    onOpenChange?: (open: boolean) => void;\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const isMobile = useIsMobile();\n    const [openMobile, setOpenMobile] = React.useState(false);\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen);\n    const open = openProp ?? _open;\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value;\n        if (setOpenProp) {\n          setOpenProp(openState);\n        } else {\n          _setOpen(openState);\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`;\n      },\n      [setOpenProp, open],\n    );\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open);\n    }, [isMobile, setOpen, setOpenMobile]);\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault();\n          toggleSidebar();\n        }\n      };\n\n      window.addEventListener(\"keydown\", handleKeyDown);\n      return () => window.removeEventListener(\"keydown\", handleKeyDown);\n    }, [toggleSidebar]);\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\";\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      ],\n    );\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className,\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    );\n  },\n);\nSidebarProvider.displayName = \"SidebarProvider\";\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\";\n    variant?: \"sidebar\" | \"floating\" | \"inset\";\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\";\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar();\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className,\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      );\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      );\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\",\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className,\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    );\n  },\n);\nSidebar.displayName = \"Sidebar\";\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar();\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event);\n        toggleSidebar();\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  );\n});\nSidebarTrigger.displayName = \"SidebarTrigger\";\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar();\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarRail.displayName = \"SidebarRail\";\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarInset.displayName = \"SidebarInset\";\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarInput.displayName = \"SidebarInput\";\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarHeader.displayName = \"SidebarHeader\";\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarFooter.displayName = \"SidebarFooter\";\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  );\n});\nSidebarSeparator.displayName = \"SidebarSeparator\";\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarContent.displayName = \"SidebarContent\";\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarGroup.displayName = \"SidebarGroup\";\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\";\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarGroupAction.displayName = \"SidebarGroupAction\";\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n));\nSidebarGroupContent.displayName = \"SidebarGroupContent\";\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n));\nSidebarMenu.displayName = \"SidebarMenu\";\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n));\nSidebarMenuItem.displayName = \"SidebarMenuItem\";\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean;\n    isActive?: boolean;\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>;\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref,\n  ) => {\n    const Comp = asChild ? Slot : \"button\";\n    const { isMobile, state } = useSidebar();\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    );\n\n    if (!tooltip) {\n      return button;\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      };\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    );\n  },\n);\nSidebarMenuButton.displayName = \"SidebarMenuButton\";\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean;\n    showOnHover?: boolean;\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuAction.displayName = \"SidebarMenuAction\";\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className,\n    )}\n    {...props}\n  />\n));\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\";\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean;\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`;\n  }, []);\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  );\n});\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\";\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className,\n    )}\n    {...props}\n  />\n));\nSidebarMenuSub.displayName = \"SidebarMenuSub\";\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />);\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\";\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean;\n    size?: \"sm\" | \"md\";\n    isActive?: boolean;\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\";\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n};\n","size_bytes":23790},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-primary/10\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":266},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-1.5 w-full grow overflow-hidden rounded-full bg-primary/20\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-4 w-4 rounded-full border border-primary/50 bg-background shadow transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1037},"client/src/components/ui/sonner.tsx":{"content":"\"use client\"\n\nimport { useTheme } from \"next-themes\"\nimport { Toaster as Sonner } from \"sonner\"\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster }\n","size_bytes":894},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-4 w-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1148},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\n      \"p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n      className\n    )}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2859},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1877},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":649},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent shadow-sm hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-9 px-2 min-w-9\",\n        sm: \"h-8 px-1.5 min-w-8\",\n        lg: \"h-10 px-2.5 min-w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1486},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Portal>\n    <TooltipPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </TooltipPrimitive.Portal>\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1217},"client/src/game/scenes/Game.ts":{"content":"import Phaser from 'phaser';\nimport { ComboTracker, createComboSystem } from '../systems/combo';\nimport { setupControls } from '../systems/controls';\n// All visual asset imports removed - clean slate for new assets\n\n// Define ground level constants - skater runs higher than obstacles sit\nconst PLAYER_GROUND_Y = 850;  // Original skater position\nconst OBSTACLE_GROUND_Y = 956;  // Where obstacles sit on the street\n\nexport default class Game extends Phaser.Scene {\n  private player!: Phaser.Physics.Arcade.Sprite;\n  private cursors!: Phaser.Types.Input.Keyboard.CursorKeys;\n  private controls!: ReturnType<typeof setupControls>;\n  private trickKey!: Phaser.Input.Keyboard.Key; // J key for tricks\n  private world!: any;\n  private jumpParticles!: Phaser.GameObjects.Particles.ParticleEmitter;\n  private selectedCharacter: 'kev' | 'stacy' = 'kev'; // Track selected character\n  private trickParticles!: Phaser.GameObjects.Particles.ParticleEmitter;\n  private dustParticles!: Phaser.GameObjects.Particles.ParticleEmitter;\n  \n  // Enhanced jumping mechanics\n  private isGrounded = true;\n  private hasDoubleJumped = false;\n  private trickActive = false;\n  private hasUsedTrick = false; // Track if trick was used after jump\n  private jumpCount = 0;\n  private maxJumps = 2; // Regular jump + trick jump\n  private jumpDebounce = false;\n  // Stomp feature removed\n  \n  // Jump sprite - no animation, just a single image when jumping\n  private jumpScale = 0.4; // Match idle sprite scale\n  \n  // Obstacle system\n  private obstacles!: Phaser.GameObjects.Group;\n  private obstacleTypes = ['obstacle_cone', 'obstacle_trash', 'obstacle_crash', 'obstacle_zombie', 'obstacle_skulls'];\n  private lastObstacleX = 0;\n  private gameOverTriggered = false;\n  private gameStartTime = 0;\n  private score = 0;\n  private scoreText!: Phaser.GameObjects.Text;\n  private lastDifficulty = -1;\n  private obstacleTimer: Phaser.Time.TimerEvent | null = null;\n  private enemyTimer: Phaser.Time.TimerEvent | null = null;\n  \n  // Enemy system\n  private enemies!: Phaser.GameObjects.Group;\n  private explosions!: Phaser.GameObjects.Group;\n  private arrowIndicators!: Phaser.GameObjects.Group;\n  private lastEnemyX = 0;\n  private lastEnemyY = 0;\n  private lastEnemySpawnTime = 0;\n  private lastSandwichY = 0;\n  private lastSandwichSpawnTime = 0;\n  private lastEnergyDrinkY = 0;\n  private lastEnergyDrinkSpawnTime = 0;\n  private bounceVelocity = -1200; // Stronger bounce when landing on enemy\n  private speedMultiplier = 1.0; // Speed multiplier that increases over time\n  \n  // Stamina system\n  private stamina = 100;  // Max stamina\n  private maxStamina = 100;\n  private staminaBar!: Phaser.GameObjects.Graphics;\n  private staminaBarBg!: Phaser.GameObjects.Graphics;\n  private staminaCost = 33.33;  // Cost per jump (one third)\n  private staminaRegen = 0.5;  // Regeneration per frame\n  \n  // Health system\n  private health = 100;\n  private maxHealth = 100;\n  private healthBar!: Phaser.GameObjects.Graphics;\n  private healthBarBg!: Phaser.GameObjects.Graphics;\n  private healthText!: Phaser.GameObjects.Text;\n  private invulnerable = false;\n  private invulnerableTime = 1500; // 1.5 seconds of invulnerability after hit\n  \n  // Sandwiches (health pickups)\n  private sandwiches!: Phaser.GameObjects.Group;\n  private sandwichesCollected = 0;\n  \n  // Energy drinks (stamina power-ups)\n  private energyDrinks!: Phaser.GameObjects.Group;\n  private cansCollected = 0;\n  private enemiesDefeated = 0; // Track defeated enemies\n  private energyDrinkTimer!: Phaser.Time.TimerEvent;\n  private staminaBoostActive = false;\n  private staminaBoostTimer?: Phaser.Time.TimerEvent;\n  \n  // Combo system\n  private comboTracker!: ComboTracker;\n  private wasGrounded = true;\n  private comboUI: Phaser.GameObjects.Text | null = null;\n  private comboDisplayTimer?: Phaser.Time.TimerEvent;\n  private lastComboData: { multiplier: number, scorePoints: number } | null = null;\n  \n  // Star collection system\n  private stars = 0;\n  private starIcon!: Phaser.GameObjects.Image;\n  private starText!: Phaser.GameObjects.Text;\n  private starPickups!: Phaser.Physics.Arcade.Group;\n  private lastStarPatternX = 0;\n  private sandwichTimer!: Phaser.Time.TimerEvent;\n  \n  // Life system\n  private lives = 3; // Start with 3 lives\n  private lifeIcon!: Phaser.GameObjects.Image;\n  private lifeText!: Phaser.GameObjects.Text;\n  private starLifeThreshold = 100; // Stars needed for extra life\n  private nextLifeAt = 100; // Track when next life should be awarded\n  \n  // Distance tracking for scoring\n  private lastDistanceScoreMilestone = 0; // Track the last distance milestone for scoring\n  \n  // Background tiles for infinite scrolling\n  private backgroundTiles: Phaser.GameObjects.Image[] = [];\n  private backgroundWidth = 1408; // 1280 * 1.1\n  private redSkyBg: Phaser.GameObjects.TileSprite | null = null; // Red sky background reference\n  \n  // Physics constants\n  private readonly JUMP_VELOCITY = -1750;  // Slightly higher first jump\n  private readonly TRICK_JUMP_VELOCITY = -1450; // Slightly higher double jump\n  private readonly SWIPE_TRICK_VELOCITY = -850; // Small jump for swipe trick\n  // Stomp velocity removed - stomp feature no longer exists\n  private readonly GRAVITY = 4200; // Slightly floatier\n  private readonly FLOAT_GRAVITY = 3200; // More float during tricks\n  \n  // Audio system\n  private currentBgMusic!: Phaser.Sound.BaseSound | null;\n  private bgMusicQueue: string[] = ['broken_code', 'undead_empire'];\n  private currentMusicIndex = 0;\n  private songTitleContainer?: Phaser.GameObjects.Container;\n\n  constructor() {\n    super('Game');\n  }\n\n  init(data: { selectedCharacter?: 'kev' | 'stacy' }) {\n    // Receive selected character from CharacterSelect scene\n    this.selectedCharacter = data.selectedCharacter || 'kev';\n    console.log('Selected character:', this.selectedCharacter);\n  }\n\n  create() {\n    // Reset all game state variables\n// console.log('[DEBUG GAME INIT] Starting game scene...');\n    this.gameOverTriggered = false;\n    this.health = 100; // Reset to full health\n    this.stamina = 100; // Reset to full stamina\n    this.invulnerable = false; // Reset invulnerability\n    this.score = 0; // Reset score\n    this.lastObstacleX = 0;\n    this.lastEnemyX = 0;\n    this.lastEnemyY = 0;\n    this.lastEnemySpawnTime = 0;\n    this.lastSandwichY = 0;\n    this.lastSandwichSpawnTime = 0;\n    this.lastEnergyDrinkY = 0;\n    this.lastEnergyDrinkSpawnTime = 0;\n    this.speedMultiplier = 1.0; // Reset speed multiplier\n    this.isGrounded = true;\n    this.jumpCount = 0;\n    this.hasDoubleJumped = false;\n    this.trickActive = false;\n    this.hasUsedTrick = false;\n    this.backgroundTiles = []; // Clear background tiles\n    this.stars = 0; // Reset stars\n    this.lives = 3; // Reset lives\n    this.nextLifeAt = 100; // Reset next life milestone\n    this.sandwichesCollected = 0; // Reset sandwich counter\n    this.cansCollected = 0; // Reset can counter\n    this.enemiesDefeated = 0; // Reset enemies defeated counter\n    this.staminaBoostActive = false; // Reset stamina boost\n    this.lastDistanceScoreMilestone = 0; // Reset distance tracking\n    \n// console.log(`[DEBUG GAME INIT] Health: ${this.health}, Stamina: ${this.stamina}, Invulnerable: ${this.invulnerable}`);\n    \n    // Create seamless background world\n    this.world = this.createSeamlessWorld();\n    \n    // Reduce gravity for floatier feel\n    this.physics.world.gravity.y = this.GRAVITY;\n    \n    // Create player\n    this.createPlayer();\n    \n    // Create particle effects\n    this.createParticleEffects();\n    \n    // Create obstacle system\n    this.createObstacleSystem();\n    \n    // Create enemy system\n    this.createEnemySystem();\n    \n    // Create sandwich system (health pickups)\n    this.createSandwichSystem();\n    \n    // Create energy drink system (stamina power-ups)\n    this.createEnergyDrinkSystem();\n    \n    // Create star collection system\n    this.createStarSystem();\n    \n    // Setup controls\n    this.cursors = this.input.keyboard!.createCursorKeys();\n    this.controls = setupControls(this);\n    \n    // Add J key for tricks\n    this.trickKey = this.input.keyboard!.addKey('J');\n    \n    // Stop ALL sounds including menu music before starting gameplay\n    // Stop all sounds globally\n    this.game.sound.stopAll();\n    \n    // Stop sounds in all scenes\n    this.game.scene.scenes.forEach((scene) => {\n      if (scene.sound) {\n        scene.sound.stopAll();\n      }\n    });\n    \n    // Double check all playing sounds are stopped\n    const allSounds = this.game.sound.getAllPlaying();\n    allSounds.forEach((sound: any) => {\n      sound.stop();\n    });\n    \n    // Stop and cleanup global menu music instance on window\n    if ((window as any).menuMusicInstance) {\n      try {\n        (window as any).menuMusicInstance.stop();\n        (window as any).menuMusicInstance.destroy();\n      } catch (e) {\n        // Music might already be destroyed\n      }\n      (window as any).menuMusicInstance = undefined;\n      // CRITICAL: Reset the flag so menu music can restart when returning to menu\n      (window as any).menuMusicStarted = false;\n    }\n    \n    // Wait to ensure menu music is fully stopped\n    this.time.delayedCall(200, () => {\n      // Randomly select starting track\n      this.currentMusicIndex = Math.random() < 0.5 ? 0 : 1;\n      // Start background music\n      this.playNextBackgroundMusic();\n    });\n    \n    // No ground collision - handle landing through position checks only to avoid invisible floors\n\n    // Add collision detection for obstacles using overlap for guaranteed detection\n    this.physics.add.overlap(this.player, this.obstacles, (player: any, obstacle: any) => {\n// console.log(`[DEBUG COLLISION] Obstacle collision detected! Invulnerable: ${this.invulnerable}, GameOver: ${this.gameOverTriggered}, Health: ${this.health}`);\n      if (!this.invulnerable && !this.gameOverTriggered && !this.staminaBoostActive) {\n// console.log(`[DEBUG COLLISION] Taking damage from obstacle...`);\n        this.takeDamage(25); // Take 25 damage from obstacles (but not if energy drink is active)\n        this.obstacles.remove(obstacle); // Remove from physics group first\n        obstacle.destroy(); // Then destroy the sprite\n      } else {\n// console.log(`[DEBUG COLLISION] Damage blocked - Invulnerable: ${this.invulnerable}, GameOver: ${this.gameOverTriggered}`);\n      }\n    }, undefined, this);\n    \n    // Add collision detection for enemies - stomp them from above\n    this.physics.add.overlap(this.player, this.enemies, (player: any, enemy: any) => {\n      const playerBody = player.body as Phaser.Physics.Arcade.Body;\n// console.log(`[DEBUG COLLISION] Enemy collision detected! Invulnerable: ${this.invulnerable}, GameOver: ${this.gameOverTriggered}`);\n      \n      // Check if player is falling and above the enemy (stomping)\n      if (playerBody.velocity.y > 0 && player.y < enemy.y - 20) {\n// console.log(`[DEBUG COLLISION] Stomping enemy!`);\n        this.stompEnemy(enemy);\n        this.bouncePlayer();\n      } else if (!this.invulnerable && !this.gameOverTriggered && !this.staminaBoostActive) {\n        // Hit enemy from side or below - take damage (but not if energy drink is active)\n// console.log(`[DEBUG COLLISION] Taking damage from enemy...`);\n        this.takeDamage(35); // Take 35 damage from enemies\n        this.enemies.remove(enemy); // Remove from physics group first\n        enemy.destroy(); // Then destroy enemy\n      } else {\n// console.log(`[DEBUG COLLISION] Enemy damage blocked - Invulnerable: ${this.invulnerable}`);\n      }\n    }, undefined, this);\n    \n    // Add collision detection for sandwiches (health pickups)\n    this.physics.add.overlap(this.player, this.sandwiches, (player: any, sandwich: any) => {\n      this.collectSandwich(sandwich);\n    }, undefined, this);\n    \n    // Add collision detection for energy drinks (stamina power-ups)\n    this.physics.add.overlap(this.player, this.energyDrinks, (player: any, energyDrink: any) => {\n      this.collectEnergyDrink(energyDrink);\n    }, undefined, this);\n    \n// console.log('Collision detection set up between player and obstacles/enemies');\n\n    // No ground collision for obstacles - they're positioned at ground level\n\n    // Remove camera bounds for infinite world\n    this.cameras.main.setBounds(0, 0, Number.MAX_SAFE_INTEGER, 960);\n    // Follow player directly without smoothing to keep obstacles and background in sync\n    this.cameras.main.startFollow(this.player, true, 1.0, 1.0, -100, 0);\n    \n    // ESC to return to main menu\n    this.input.keyboard!.on('keydown-ESC', () => {\n      this.scene.start('MainMenu');\n    });\n\n    // Initialize game timing\n    this.gameStartTime = this.time.now;\n    \n    // Initialize combo system\n    this.comboTracker = createComboSystem(this);\n    this.wasGrounded = true;\n    this.setupComboUI();\n    \n    // Setup combo event listeners\n    this.comboTracker.on('comboActivated', (data: any) => {\n      console.log('[COMBO] Combo activated with multiplier:', data.multiplier);\n      // Play combo sound effect\n      this.sound.play('combo_sfx', { volume: 0.5 });\n      this.updateComboUI();\n    });\n    \n    this.comboTracker.on('comboUpdated', (data: any) => {\n      this.updateComboUI();\n    });\n    \n    this.comboTracker.on('comboEnded', (data: any) => {\n      console.log(`[COMBO] Combo ended! Stars earned: ${data.starsEarned}`);\n      this.collectStars(data.starsEarned);\n      this.showComboEndEffect(data);\n      \n      // Keep the combo display visible for 2 seconds after landing\n      if (this.lastComboData && data.starsEarned > 0) {\n        // Cancel any existing timer\n        if (this.comboDisplayTimer) {\n          this.comboDisplayTimer.remove();\n        }\n        \n        // Keep the combo display visible\n        if (this.comboUI) {\n          this.comboUI.setVisible(true);\n          this.comboUI.setText(`COMBO x${this.lastComboData.multiplier}\\nSCORE: ${this.lastComboData.scorePoints}`);\n          this.comboUI.setColor('#00ff00');\n        }\n        \n        // Start a new timer to hide the combo display after 2 seconds\n        this.comboDisplayTimer = this.time.delayedCall(2000, () => {\n          if (this.comboUI) {\n            this.comboUI.setVisible(false);\n          }\n          this.lastComboData = null;\n          this.comboDisplayTimer = undefined;\n        });\n      } else {\n        // If no combo was achieved, hide immediately\n        this.updateComboUI();\n      }\n    });\n    \n    // Create tutorial instructions in the middle of the screen\n    const tutorialContainer = this.add.container(320, 480);\n    tutorialContainer.setScrollFactor(0);\n    tutorialContainer.setDepth(110);\n    \n    // Background for tutorial\n    const tutorialBg = this.add.graphics();\n    tutorialBg.fillStyle(0x000000, 0.8);\n    tutorialBg.fillRoundedRect(-320, -70, 640, 180, 10);\n    tutorialContainer.add(tutorialBg);\n    \n    // Tutorial text\n    const line1 = this.add.text(0, -35, 'TAP TO JUMP', {\n      fontSize: '22px',\n      fontFamily: '\"Press Start 2P\", monospace',\n      color: '#00ff00'\n    }).setOrigin(0.5);\n    \n    const line2 = this.add.text(0, 0, 'TAP AGAIN FOR DOUBLE JUMP', {\n      fontSize: '22px',\n      fontFamily: '\"Press Start 2P\", monospace',\n      color: '#00ffff'\n    }).setOrigin(0.5);\n    \n    const line3 = this.add.text(0, 35, 'SWIPE UP (IN AIR) FOR TRICK', {\n      fontSize: '22px',\n      fontFamily: '\"Press Start 2P\", monospace',\n      color: '#ffff00'\n    }).setOrigin(0.5);\n    \n    const line4 = this.add.text(0, 70, 'COMBINING TRICKS AND KILLS', {\n      fontSize: '18px',\n      fontFamily: '\"Press Start 2P\", monospace',\n      color: '#ff00ff'\n    }).setOrigin(0.5);\n    \n    const line5 = this.add.text(0, 95, 'STARTS COMBOS', {\n      fontSize: '18px',\n      fontFamily: '\"Press Start 2P\", monospace',\n      color: '#ff00ff'\n    }).setOrigin(0.5);\n    \n    tutorialContainer.add([line1, line2, line3, line4, line5]);\n    \n    // Fade out the tutorial after 5 seconds\n    this.time.delayedCall(5000, () => {\n      this.tweens.add({\n        targets: tutorialContainer,\n        alpha: 0,\n        duration: 1000,\n        onComplete: () => {\n          tutorialContainer.destroy();\n        }\n      });\n    });\n    \n    // Add position tracking every second for debugging\n    this.time.addEvent({\n      delay: 1000,\n      callback: () => {\n        const body = this.player.body as Phaser.Physics.Arcade.Body;\n// console.log('=== POSITION TRACKER (1 SEC) ===');\n// console.log(`Position: X=${Math.round(this.player.x)}, Y=${Math.round(this.player.y)}`);\n// console.log(`Velocity: X=${Math.round(body.velocity.x)}, Y=${Math.round(body.velocity.y)}`);\n// console.log(`State: Grounded=${this.isGrounded}, JumpCount=${this.jumpCount}`);\n// console.log(`Physics: Gravity=${this.physics.world.gravity.y}, Touching.down=${body.touching.down}`);\n// console.log(`Stamina: ${Math.round(this.stamina)}/${this.maxStamina}`);\n// console.log('================================');\n      },\n      loop: true\n    });\n    \n// console.log('Game scene loaded with enhanced zombie skater mechanics');\n  }\n\n  createSeamlessWorld() {\n    // Create the seamless world directly\n    const { createSeamlessWorld } = this.loadSeamlessWorld();\n    return createSeamlessWorld(this);\n  }\n\n  loadSeamlessWorld() {\n    // Inline the seamless world creation to avoid import issues\n    \n    const createSeamlessWorld = (scene: any) => {\n      // Add red sky background first (behind everything else)\n      // Use the actual texture size for proper repeating\n      this.redSkyBg = scene.add.tileSprite(0, 0, 1920, 960, 'red_sky_bg')\n        .setOrigin(0, 0)\n        .setScrollFactor(0) // Fixed to viewport\n        .setDepth(0) // Behind everything\n        .setScale(0.5, 0.5); // Scale down to make it smaller\n      \n      // Create initial background tiles directly without placeholder\n      const startX = 320;\n      for (let i = -2; i <= 5; i++) {\n        const tile = scene.add.image(startX + (i * this.backgroundWidth), 960, 'city_background')\n          .setOrigin(0.5, 1)\n          .setScrollFactor(1.0)\n          .setDepth(1)\n          .setScale(1.1, 1.1);\n        this.backgroundTiles.push(tile);\n      }\n\n      // Add visible white floor line at ground level\n      const floorLine = scene.add.graphics()\n        .lineStyle(3, 0xffffff, 1)\n        .lineTo(12000, 0)\n        .setPosition(0, PLAYER_GROUND_Y)\n        .setScrollFactor(0)\n        .setDepth(10);\n\n      // Physics ground - infinite collision surface at street level\n      const ground = scene.physics.add.staticGroup();\n      \n      // Don't create invisible ground segments - handle landing through position checks only\n      // This prevents the player from landing on invisible floors\n\n      const update = (scrollX: number) => {\n        // Managed in main update now\n      };\n\n      return { ground, update };\n    };\n\n    return { createSeamlessWorld };\n  }\n\n  createPlayer() {\n    // Choose sprite based on selected character\n    const idleSprite = this.selectedCharacter === 'kev' ? 'zombie_idle' : 'stacy_idle';\n    \n    // Create player sprite positioned properly on ground\n    this.player = this.physics.add.sprite(320, PLAYER_GROUND_Y, idleSprite);\n    this.player.setCollideWorldBounds(false);\n    this.player.setDepth(10);\n    \n    // Proper scale for visibility at new resolution - even smaller\n    this.player.setScale(0.4);\n    \n    // Jump frames now use the same scale as idle sprite\n    \n    // Physics body setup - normal sized collision box (not extended)\n    const body = this.player.body as Phaser.Physics.Arcade.Body;\n    // Set hitbox to match player visual without extension\n    body.setSize(this.player.width * 0.8, this.player.height * 0.9);\n    body.setOffset(this.player.width * 0.1, this.player.height * 0.05);\n    body.setMaxVelocity(2400, 3600);\n    body.setBounce(0); // No bouncing\n    body.setOffset(0, 0); // Make sure offset is clean\n    \n    // Start skating animation (use idle sprite)\n    this.player.setTexture(idleSprite);\n    \n// console.log(`Player created at y=${this.player.y} with body size ${body.width}x${body.height}, ground segments at y=${PLAYER_GROUND_Y}`);\n  }\n\n  playNextBackgroundMusic() {\n    // Stop current music if playing\n    if (this.currentBgMusic) {\n      if (this.currentBgMusic.isPlaying) {\n        this.currentBgMusic.stop();\n      }\n      this.currentBgMusic = null;\n    }\n    \n    // Get next track name\n    const nextTrack = this.bgMusicQueue[this.currentMusicIndex];\n    \n    // Play the track\n    this.currentBgMusic = this.sound.add(nextTrack, { \n      volume: 0.4, \n      loop: false \n    });\n    this.currentBgMusic.play();\n    \n    // Show song title in top right\n    this.showSongTitle(nextTrack);\n    \n    // Set up completion handler to play next track\n    this.currentBgMusic.once('complete', () => {\n      // Toggle to next track (alternates between 0 and 1)\n      this.currentMusicIndex = (this.currentMusicIndex + 1) % 2;\n      this.playNextBackgroundMusic();\n    });\n  }\n  \n  showSongTitle(trackName: string) {\n    // Remove existing title if present\n    if (this.songTitleContainer) {\n      this.songTitleContainer.destroy();\n    }\n    \n    // Create container for song info - positioned directly below star indicator\n    // Star indicator is at Y: 145, so place this at Y: 220 (75 pixels below)\n    this.songTitleContainer = this.add.container(420, 220);\n    this.songTitleContainer.setScrollFactor(0);\n    this.songTitleContainer.setDepth(150);\n    \n    // Determine display name\n    const displayName = trackName === 'broken_code' ? 'BROKEN CODE' : 'UNDEAD EMPIRE';\n    \n    // Create background for better readability - make it wide enough for all text\n    const bg = this.add.graphics();\n    bg.fillStyle(0x000000, 0.7);\n    bg.fillRoundedRect(-10, -35, 240, 75, 5);\n    \n    // Create song title text - centered in the container\n    const titleText = this.add.text(110, -10, displayName, {\n      fontSize: '16px',\n      fontFamily: '\"Press Start 2P\", monospace',\n      color: '#ffff00'\n    }).setOrigin(0.5, 0.5);\n    \n    // Create artist text - centered below title\n    const artistText = this.add.text(110, 15, 'By Silent Architect', {\n      fontSize: '10px',\n      fontFamily: '\"Press Start 2P\", monospace',\n      color: '#ffffff'\n    }).setOrigin(0.5, 0.5);\n    \n    this.songTitleContainer.add([bg, titleText, artistText]);\n    \n    // Fade in\n    this.songTitleContainer.setAlpha(0);\n    this.tweens.add({\n      targets: this.songTitleContainer,\n      alpha: 1,\n      duration: 500\n    });\n    \n    // Fade out after 4 seconds\n    this.time.delayedCall(4000, () => {\n      if (this.songTitleContainer) {\n        this.tweens.add({\n          targets: this.songTitleContainer,\n          alpha: 0,\n          duration: 1000,\n          onComplete: () => {\n            if (this.songTitleContainer) {\n              this.songTitleContainer.destroy();\n              this.songTitleContainer = undefined;\n            }\n          }\n        });\n      }\n    });\n  }\n  \n  stopBackgroundMusic() {\n    if (this.currentBgMusic) {\n      this.currentBgMusic.stop();\n      this.currentBgMusic = null;\n    }\n  }\n\n  createParticleEffects() {\n    // Create simple colored particles using rectangles\n    \n    // Jump dust particles (when taking off)\n    this.dustParticles = this.add.particles(0, 0, 'pixel', {\n      speed: { min: 120, max: 360 },\n      scale: { start: 1.8, end: 0 },\n      lifespan: 300,\n      quantity: 3,\n      angle: { min: 225, max: 315 }, // Spread behind player\n      alpha: { start: 0.8, end: 0 },\n      tint: 0x8B4513, // Brown dust color\n      emitting: false\n    });\n\n    // Jump particles (blue sparkles on first jump)\n    this.jumpParticles = this.add.particles(0, 0, 'pixel', {\n      speed: { min: 180, max: 480 },\n      scale: { start: 2.4, end: 0 },\n      lifespan: 400,\n      quantity: 5,\n      angle: { min: 0, max: 360 },\n      alpha: { start: 1, end: 0 },\n      tint: 0x00FFFF, // Cyan sparkles\n      emitting: false\n    });\n\n    // Trick particles (golden trail during double jump)\n    this.trickParticles = this.add.particles(0, 0, 'pixel', {\n      speed: { min: 60, max: 240 },\n      scale: { start: 3.0, end: 0.6 },\n      lifespan: 600,\n      quantity: 2,\n      angle: { min: 0, max: 360 },\n      alpha: { start: 1, end: 0 },\n      tint: 0xFFD700, // Gold trail\n      emitting: false\n    });\n\n    // Set particle depths\n    this.dustParticles.setDepth(5);\n    this.jumpParticles.setDepth(15);\n    this.trickParticles.setDepth(15);\n  }\n\n  createEnemySystem() {\n// console.log('[DEBUG ENEMY SYSTEM] Creating enemy system...');\n    \n    // Create physics groups for enemies and explosions\n    this.enemies = this.physics.add.group({\n      allowGravity: false,\n      immovable: true\n    });\n    \n    this.explosions = this.physics.add.group({\n      allowGravity: false,\n      immovable: true\n    });\n    \n    // Create group for arrow indicators\n    this.arrowIndicators = this.add.group();\n    \n    // Start spawning enemies with a longer delay to give player time (easier start)\n    this.time.delayedCall(12000, () => {\n// console.log('[DEBUG ENEMY SYSTEM] Starting enemy spawning...');\n      this.enemyTimer = this.time.addEvent({\n        delay: 5000, // Start with enemies spawning every 5 seconds\n        callback: this.spawnEnemy,\n        callbackScope: this,\n        loop: true\n      });\n// console.log('[DEBUG ENEMY SYSTEM] Enemy timer created with delay: 5000ms');\n    });\n    \n    // Update enemy spawn rate based on difficulty every 30 seconds\n    this.time.addEvent({\n      delay: 30000,\n      callback: () => {\n        const gameTime = this.time.now - this.gameStartTime;\n        const difficulty = this.getDifficulty(gameTime);\n        this.updateEnemySpawnRate(difficulty);\n        \n        // Increase speed slightly every 30 seconds\n        this.speedMultiplier += 0.1; // 10% faster each 30 seconds\n// console.log(`[SPEED INCREASE] Speed multiplier now ${this.speedMultiplier.toFixed(1)}x at difficulty ${difficulty}`);\n      },\n      callbackScope: this,\n      loop: true\n    });\n    \n// console.log('[DEBUG ENEMY SYSTEM] Enemy system initialized (spawning starts in 5s)');\n  }\n  \n  spawnEnemy() {\n    const gameTime = this.time.now - this.gameStartTime;\n    const difficulty = this.getDifficulty(gameTime);\n    \n// console.log(`[DEBUG ENEMY SPAWN] Called at gameTime=${gameTime}ms`);\n    \n    // Don't spawn enemies in the first 10 seconds (easier start)\n    if (gameTime < 10000) {\n// console.log(`[DEBUG ENEMY SPAWN] Too early, waiting...`);\n      return;\n    }\n    \n    // Spawn distance ahead of player (further out to account for warning time)\n    const warningTime = 2000; // 2 seconds warning\n    const playerSpeed = 5.5; // pixels per frame\n    const warningDistance = (playerSpeed * 60 * warningTime) / 1000; // Distance player travels in warning time\n    const spawnDistance = Phaser.Math.Between(600, 1000) + warningDistance;\n    const spawnX = this.player.x + spawnDistance;\n    \n    // Skip if too close to last enemy\n    if (spawnX - this.lastEnemyX < 400) {\n      return;\n    }\n    \n    this.lastEnemyX = spawnX;\n    \n    // Choose enemy type\n    const enemyType = Math.random() < 0.5 ? 'enemy_eyeball' : 'enemy_robot';\n    \n    // Determine height based on difficulty and randomness\n    let enemyY;\n    const randomChoice = Math.random();\n    \n    if (randomChoice < 0.5) {\n      // Low enemy - easily reachable with first jump\n      enemyY = PLAYER_GROUND_Y - Phaser.Math.Between(120, 180);\n    } else if (randomChoice < 0.85) {\n      // Medium enemy - comfortable first jump height\n      enemyY = PLAYER_GROUND_Y - Phaser.Math.Between(200, 260);\n    } else {\n      // High enemy - requires double jump but not too high\n      enemyY = PLAYER_GROUND_Y - Phaser.Math.Between(320, 400);\n    }\n    \n    // Check if this Y position conflicts with recent sandwich or energy drink spawn (reduced to 3 seconds)\n    const timeSinceLastSandwich = (this.time.now - this.lastSandwichSpawnTime) / 1000;\n    const timeSinceLastEnergyDrink = (this.time.now - this.lastEnergyDrinkSpawnTime) / 1000;\n    \n    if (timeSinceLastSandwich < 3 && Math.abs(enemyY - this.lastSandwichY) < 100) {\n// console.log(`[DEBUG ENEMY SPAWN] Skipping - too close to recent sandwich at Y=${this.lastSandwichY}`);\n      return;\n    }\n    \n    if (timeSinceLastEnergyDrink < 3 && Math.abs(enemyY - this.lastEnergyDrinkY) < 100) {\n// console.log(`[DEBUG ENEMY SPAWN] Skipping - too close to recent energy drink at Y=${this.lastEnergyDrinkY}`);\n      return;\n    }\n    \n    // Store enemy spawn info\n    this.lastEnemyY = enemyY;\n    this.lastEnemySpawnTime = this.time.now;\n    \n    // Create arrow indicator on right side of screen\n    // Since arrow uses scrollFactor(0), we need viewport coordinates, not world coordinates\n    const arrow = this.arrowIndicators.create(590, enemyY, 'arrow_indicator') as Phaser.GameObjects.Sprite;\n    arrow.setScale(0.15);\n    arrow.setDepth(102); // Above UI\n    arrow.setScrollFactor(0); // Keep fixed on screen\n    \n    // Position arrow on right side of viewport with correct Y coordinate relative to viewport\n    // Convert world Y to viewport Y (since we're using scrollFactor 0)\n    arrow.x = 590; // Near right edge of 640px screen\n    arrow.y = enemyY; // This is already the correct Y position in world coords\n    \n    // DEBUG: Log arrow creation details\n// console.log(`[DEBUG ARROW] Created arrow at viewport position (${arrow.x}, ${arrow.y})`);\n// console.log(`[DEBUG ARROW] Enemy will spawn at world Y=${enemyY}`);\n// console.log(`[DEBUG ARROW] Arrow properties: scale=${arrow.scale}, depth=${arrow.depth}, scrollFactor=${arrow.scrollFactorX},${arrow.scrollFactorY}`);\n    \n    // Flash the arrow for visibility\n    this.tweens.add({\n      targets: arrow,\n      alpha: { from: 1, to: 0.5 },\n      duration: 400,\n      yoyo: true,\n      repeat: -1\n    });\n    \n    // Spawn enemy after warning delay\n    this.time.delayedCall(warningTime, () => {\n      // Calculate spawn position to be just off-screen when accounting for player movement\n      const adjustedSpawnX = this.player.x + 660; // Spawn just off the right edge of screen\n      \n      // Create enemy\n      const enemy = this.enemies.create(adjustedSpawnX, enemyY, enemyType) as Phaser.Physics.Arcade.Sprite;\n      enemy.setScale(0.15); // Slightly bigger for visibility\n      enemy.setDepth(14);\n      enemy.setImmovable(true);\n      enemy.setPushable(false);\n      enemy.setVisible(true); // Ensure visible\n      enemy.setAlpha(1); // Full opacity\n      \n      // DEBUG: Log enemy creation details\n// console.log(`[DEBUG ENEMY] Created ${enemyType} at world position (${adjustedSpawnX}, ${enemyY})`);\n// console.log(`[DEBUG ENEMY] Player position: (${Math.round(this.player.x)}, ${Math.round(this.player.y)})`);\n// console.log(`[DEBUG ENEMY] Distance from player: ${adjustedSpawnX - this.player.x}px`);\n// console.log(`[DEBUG ENEMY] Enemy properties: scale=${enemy.scale}, depth=${enemy.depth}, visible=${enemy.visible}, alpha=${enemy.alpha}`);\n// console.log(`[DEBUG ENEMY] Enemy texture: ${enemy.texture.key}, frame: ${enemy.frame.name}`);\n// console.log(`[DEBUG ENEMY] Enemy dimensions: width=${enemy.width}, height=${enemy.height}`);\n// console.log(`[DEBUG ENEMY] Camera scrollX: ${this.cameras.main.scrollX}`);\n      const screenX = adjustedSpawnX - this.cameras.main.scrollX;\n// console.log(`[DEBUG ENEMY] Enemy screen position: ${Math.round(screenX)}px from left edge`);\n      \n      // Store reference to arrow on enemy so we can remove it when enemy appears\n      (enemy as any).arrow = arrow;\n      \n      // Set hitbox for enemy\n      const body = enemy.body as Phaser.Physics.Arcade.Body;\n      body.setSize(enemy.width * 0.7, enemy.height * 0.7);\n      \n      // Set very slow horizontal movement speed (enemies move backwards relative to player)\n      body.setVelocityX(-80); // Slightly faster to be visible on screen longer\n      \n      // Add floating animation\n      this.tweens.add({\n        targets: enemy,\n        y: enemyY - 20,\n        duration: 1500,\n        yoyo: true,\n        repeat: -1,\n        ease: 'Sine.easeInOut'\n      });\n      \n// console.log(`[ENEMY] Spawned ${enemyType} at (${spawnX}, ${enemyY}) after warning`);\n    });\n    \n// console.log(`[ARROW] Indicator shown at Y=${enemyY}, enemy will spawn at X=${spawnX} in 2 seconds`);\n  }\n  \n  stompEnemy(enemy: Phaser.GameObjects.Sprite) {\n    // Increment enemies defeated counter\n    this.enemiesDefeated++;\n    \n    // Register enemy kill with combo system\n    if (this.comboTracker) {\n      this.comboTracker.registerEnemyKill(this.score, this.isGrounded);\n    }\n    \n    // Create explosion at enemy position\n    const explosion = this.explosions.create(enemy.x, enemy.y, 'explosion') as Phaser.Physics.Arcade.Sprite;\n    explosion.setScale(0.3);\n    explosion.setDepth(15);\n    \n    // Animate explosion\n    this.tweens.add({\n      targets: explosion,\n      scale: 0.5,\n      alpha: 0,\n      duration: 500,\n      onComplete: () => {\n        explosion.destroy();\n      }\n    });\n    \n    // Remove enemy\n    enemy.destroy();\n    \n    // Play new explosion sound effect\n    this.sound.play('new_explosion_sfx', { volume: 0.4 });\n    \n    // Add score\n    this.score += 50;\n    this.scoreText.setText('Score: ' + this.score);\n    \n    // Play particle effect\n    this.jumpParticles.setPosition(enemy.x, enemy.y);\n    this.jumpParticles.explode(10);\n    \n// console.log('Enemy stomped!');\n  }\n  \n  bouncePlayer() {\n    // Give player a strong, satisfying bounce\n    const playerBody = this.player.body as Phaser.Physics.Arcade.Body;\n    playerBody.setVelocityY(this.bounceVelocity);\n    \n    // Add a little forward boost for extra momentum\n    const currentVelX = playerBody.velocity.x;\n    playerBody.setVelocityX(Math.min(currentVelX + 80, 450));\n    \n    // Reset jump state - player gets ONE more jump after stomping\n    this.isGrounded = false; // Important: player is now airborne after bounce\n    this.jumpCount = 1; // Set to 1 so they can only do ONE more jump (double jump)\n    this.hasDoubleJumped = false;\n    this.hasUsedTrick = false; // Reset trick ability after stomping enemy\n    // Show jump sprite since player is bouncing up\n    const jumpSprite = this.selectedCharacter === 'kev' ? 'zombie_jump' : 'stacy_jump';\n    this.player.setTexture(jumpSprite);\n    this.player.setScale(this.jumpScale);\n    \n    // Restore more stamina as reward for successful stomp\n    this.stamina = Math.min(this.maxStamina, this.stamina + 35);\n    this.updateStaminaBar();\n    \n    // Camera shake removed for smoother gameplay\n    \n    // Create extra particles for impact\n    this.jumpParticles.setPosition(this.player.x, this.player.y);\n    this.jumpParticles.explode(15);\n    \n    // Award stars for stomping enemies (90% chance of 1 star, 10% chance of 10 stars)\n    const starReward = Math.random() < 0.9 ? 1 : 10;\n    this.collectStars(starReward);\n    \n    // Visual feedback for star collection\n    const starBurst = this.add.image(this.player.x, this.player.y - 50, starReward === 1 ? 'star_single' : 'star_ten');\n    starBurst.setScale(0.15);\n    starBurst.setDepth(16);\n    this.tweens.add({\n      targets: starBurst,\n      y: starBurst.y - 100,\n      alpha: 0,\n      scale: 0.15,\n      duration: 800,\n      onComplete: () => starBurst.destroy()\n    });\n    \n// console.log('Player bounced high off enemy!');\n  }\n\n  createObstacleSystem() {\n    // Create physics group for obstacles with gravity disabled\n    this.obstacles = this.physics.add.group({ \n      allowGravity: false, \n      immovable: true \n    });\n\n    // Create score display\n    this.scoreText = this.add.text(50, 50, 'Score: 0', {\n      fontSize: '24px',\n      color: '#ffffff',\n      fontFamily: '\"Press Start 2P\", monospace',\n      stroke: '#000000',\n      strokeThickness: 4\n    });\n    this.scoreText.setDepth(100);\n    this.scoreText.setScrollFactor(0); // Keep fixed on screen\n    \n    // Create stamina bar (now below health)\n    this.staminaBarBg = this.add.graphics();\n    this.staminaBarBg.fillStyle(0x000000, 0.5);\n    this.staminaBarBg.fillRect(50, 170, 204, 24);\n    this.staminaBarBg.setDepth(100);\n    this.staminaBarBg.setScrollFactor(0);\n    \n    this.staminaBar = this.add.graphics();\n    this.staminaBar.setDepth(101);\n    this.staminaBar.setScrollFactor(0);\n    this.updateStaminaBar();\n    \n    // Create health bar (now above stamina)\n    this.healthBarBg = this.add.graphics();\n    this.healthBarBg.fillStyle(0x000000, 0.5);\n    this.healthBarBg.fillRect(50, 110, 204, 24);\n    this.healthBarBg.setDepth(100);\n    this.healthBarBg.setScrollFactor(0);\n    \n    this.healthBar = this.add.graphics();\n    this.healthBar.setDepth(101);\n    this.healthBar.setScrollFactor(0);\n    this.updateHealthBar();\n    \n    // Add health label\n    this.healthText = this.add.text(50, 88, 'HEALTH', {\n      fontSize: '18px',\n      fontFamily: '\"Press Start 2P\", monospace',\n      color: '#ff4444',\n      stroke: '#000000',\n      strokeThickness: 4\n    }).setDepth(100).setScrollFactor(0);\n    \n    // Add stamina label (now below health)\n    this.add.text(50, 148, 'STAMINA', {\n      fontSize: '18px',\n      fontFamily: '\"Press Start 2P\", monospace',\n      color: '#ffffff',\n      stroke: '#000000',\n      strokeThickness: 4\n    }).setDepth(100).setScrollFactor(0)\n    \n    // Create life counter above star counter\n    this.createLifeDisplay();\n    \n    // Create star counter UI further down to avoid overlap - positioned slightly more to the right\n    this.starIcon = this.add.image(500, 145, 'star_counter_icon');\n    this.starIcon.setScale(0.08); // Keep original size\n    this.starIcon.setDepth(100);\n    this.starIcon.setScrollFactor(0);\n    \n    this.starText = this.add.text(540, 145, '0', {\n      fontSize: '22px',\n      fontFamily: '\"Press Start 2P\", monospace',\n      color: '#ffff00',\n      stroke: '#000000',\n      strokeThickness: 4\n    });\n    this.starText.setDepth(100);\n    this.starText.setScrollFactor(0);\n    this.starText.setOrigin(0, 0.5);\n\n    // Start spawning obstacles\n// console.log('Setting up obstacle spawning timer');\n    this.obstacleTimer = this.time.addEvent({\n      delay: 2000, // Start after 2 seconds\n      callback: this.spawnObstacle,\n      callbackScope: this,\n      loop: true\n    });\n    \n// console.log('Obstacle system initialized');\n  }\n\n  spawnObstacle() {\n    const gameTime = this.time.now - this.gameStartTime;\n    const difficulty = this.getDifficulty(gameTime);\n    \n// console.log(`Spawning obstacle - gameTime: ${gameTime}ms, difficulty: ${difficulty}`);\n    \n    // Add warning time for arrow indicator\n    const warningTime = 2000; // 2 seconds warning for obstacles (same as enemies/pickups)\n    const playerSpeed = 5.5; // pixels per frame\n    const warningDistance = (playerSpeed * 60 * warningTime) / 1000;\n    \n    // Determine spawn distance based on difficulty - spawn closer so they're visible\n    const minDistance = Math.max(400 - difficulty * 25, 150) + warningDistance; \n    const maxDistance = Math.max(800 - difficulty * 50, 300) + warningDistance;\n    const spawnDistance = Phaser.Math.Between(minDistance, maxDistance);\n    \n    const spawnX = this.player.x + spawnDistance;\n    \n// console.log(`Spawn location: playerX=${this.player.x}, spawnX=${spawnX}, distance=${spawnDistance}`);\n    \n    // Skip if too close to last obstacle\n    if (spawnX - this.lastObstacleX < minDistance) {\n// console.log(`Skipping spawn - too close to last obstacle`);\n      return;\n    }\n    \n    this.lastObstacleX = spawnX;\n    \n    // Choose obstacle type based on difficulty\n    const obstacleType = this.chooseObstacleType(difficulty);\n    \n// console.log(`Creating obstacle: ${obstacleType} at x=${spawnX}`);\n    \n    // Create arrow indicator for ground obstacle\n    const arrow = this.arrowIndicators.create(590, OBSTACLE_GROUND_Y - 50, 'arrow_indicator') as Phaser.GameObjects.Sprite;\n    arrow.setScale(0.15);\n    arrow.setDepth(102); // Above UI\n    arrow.setScrollFactor(0); // Keep fixed on screen\n    arrow.x = 590; // Near right edge of 640px screen\n    arrow.y = OBSTACLE_GROUND_Y - 50; // Position arrow slightly above ground obstacle\n    \n    // Flash the arrow for visibility\n    this.tweens.add({\n      targets: arrow,\n      alpha: { from: 1, to: 0.5 },\n      duration: 400,\n      yoyo: true,\n      repeat: -1\n    });\n    \n// console.log(`[DEBUG ARROW] Created arrow for obstacle at viewport Y=${arrow.y}`);\n    \n    // Spawn obstacle after warning delay\n    this.time.delayedCall(warningTime, () => {\n      // Remove arrow\n      arrow.destroy();\n      \n      // Recalculate spawn position based on current player position\n      // The obstacle should appear just off-screen when the delay ends\n      const adjustedSpawnX = this.player.x + 700; // Spawn just ahead of visible area\n      \n// console.log(`[DEBUG OBSTACLE] Spawning at adjusted position: ${adjustedSpawnX} (was ${spawnX})`);\n      \n      // Spawn single obstacle or pattern based on difficulty\n      if (difficulty > 3 && Math.random() < 0.3) {\n        this.spawnObstaclePattern(adjustedSpawnX, obstacleType);\n      } else {\n        this.createSingleObstacle(adjustedSpawnX, obstacleType);\n      }\n    });\n    \n    // Update spawn rate based on difficulty\n    this.updateSpawnRate(difficulty);\n  }\n\n  getDifficulty(gameTime: number): number {\n    // Difficulty increases every 30 seconds, maxes at level 10\n    const level = Math.min(Math.floor(gameTime / 30000), 10);\n// console.log(`[DIFFICULTY] Level ${level} at ${Math.floor(gameTime/1000)}s`);\n    return level;\n  }\n\n  chooseObstacleType(difficulty: number): string {\n    // Pattern-based obstacle selection for better gameplay flow\n    const patterns = [\n      // Level 0-1: Easy obstacles only\n      ['obstacle_cone', 'obstacle_trash'],\n      // Level 2-3: Add crashes\n      ['obstacle_cone', 'obstacle_trash', 'obstacle_crash'],\n      // Level 4-5: Add zombies for variety\n      ['obstacle_trash', 'obstacle_crash', 'obstacle_zombie'],\n      // Level 6-7: Mix of harder obstacles\n      ['obstacle_crash', 'obstacle_zombie', 'obstacle_skull'],\n      // Level 8+: All obstacles with focus on danger\n      this.obstacleTypes\n    ];\n    \n    // Select pattern based on difficulty level\n    const patternIndex = Math.min(Math.floor(difficulty / 2), patterns.length - 1);\n    const availableTypes = patterns[patternIndex];\n    \n    // Add some structure to spawning - not pure random\n    if (difficulty >= 3 && Math.random() < 0.3) {\n      // 30% chance to spawn harder obstacle at higher difficulties\n      const harderTypes = availableTypes.filter(type => \n        type.includes('zombie') || type.includes('skull') || type.includes('crash')\n      );\n      if (harderTypes.length > 0) {\n        return Phaser.Utils.Array.GetRandom(harderTypes);\n      }\n    }\n    \n    return Phaser.Utils.Array.GetRandom(availableTypes);\n  }\n\n  createSingleObstacle(x: number, type: string) {\n    // First check if the texture exists\n    if (!this.textures.exists(type)) {\n      console.error(`Texture ${type} does not exist!`);\n      return;\n    }\n    \n    // Create obstacle through the physics group - this is the fix!\n    const obstacle = this.obstacles.create(x, OBSTACLE_GROUND_Y, type) as Phaser.Physics.Arcade.Sprite;\n    // Make zombie obstacle slightly bigger than others\n    const scale = type === 'obstacle_zombie' ? 0.17 : 0.15;\n    obstacle.setScale(scale);\n    obstacle.setDepth(15);\n    obstacle.setOrigin(0.5, 1); // Bottom center origin so it sits ON the ground\n    obstacle.setImmovable(true); // Make obstacle static\n    obstacle.setPushable(false); // Can't be pushed by player\n    \n    // Set physics body to bridge height gap between player and obstacle\n    const body = obstacle.body as Phaser.Physics.Arcade.Body;\n    // Make hitbox taller to reach up to player level\n    body.setSize(obstacle.width * 0.8, obstacle.height + 110);\n    // Offset up to bridge the gap between player at 850 and obstacle at 956 (106px gap)\n    body.setOffset(obstacle.width * 0.1, -110);\n    \n// console.log(`Created ground obstacle: ${type} at (${x}, ${OBSTACLE_GROUND_Y}) sitting on ground`);\n// console.log(`Total obstacles: ${this.obstacles.children.size}`);\n  }\n\n  spawnObstaclePattern(x: number, type: string) {\n    // Create obstacle patterns for higher difficulty\n    const patternType = Phaser.Math.Between(1, 3);\n    \n// console.log(`[DEBUG OBSTACLE] Creating pattern type ${patternType} at x=${x}`);\n    \n    switch (patternType) {\n      case 1: // Double obstacle\n        this.createSingleObstacle(x, type);\n        this.createSingleObstacle(x + 200, type);\n        break;\n      case 2: // Triple spread\n        this.createSingleObstacle(x, type);\n        this.createSingleObstacle(x + 150, type);\n        this.createSingleObstacle(x + 300, type);\n        break;\n      case 3: // Mixed types\n        this.createSingleObstacle(x, type);\n        const secondType = Phaser.Utils.Array.GetRandom(this.obstacleTypes);\n        this.createSingleObstacle(x + 250, secondType);\n        break;\n    }\n  }\n\n  updateSpawnRate(difficulty: number) {\n    // Don't recreate timer constantly - only when difficulty actually changes\n    if (difficulty === this.lastDifficulty) return;\n    this.lastDifficulty = difficulty;\n    \n    // Remove existing obstacle timer only\n    if (this.obstacleTimer) {\n      this.obstacleTimer.remove();\n    }\n    \n    // Create new timer with adjusted delay - start easier and gradually increase\n    const baseDelay = 4500; // Start easier with 4.5 seconds\n    const difficultyReduction = difficulty * 250; // Increase rate more gradually\n    const newDelay = Math.max(baseDelay - difficultyReduction, 1200); // Min 1.2 seconds (not as intense)\n    \n    this.obstacleTimer = this.time.addEvent({\n      delay: newDelay,\n      callback: this.spawnObstacle,\n      callbackScope: this,\n      loop: true\n    });\n  }\n  \n  updateEnemySpawnRate(difficulty: number) {\n    // Update enemy spawn rate based on difficulty\n    if (this.enemyTimer) {\n      this.enemyTimer.remove();\n    }\n    \n    // Start with 5 second delay, reduce by 300ms per difficulty level\n    const baseDelay = 5000;\n    const difficultyReduction = difficulty * 300;\n    const newDelay = Math.max(baseDelay - difficultyReduction, 2000); // Min 2 seconds\n    \n    this.enemyTimer = this.time.addEvent({\n      delay: newDelay,\n      callback: this.spawnEnemy,\n      callbackScope: this,\n      loop: true\n    });\n    \n// console.log(`[DEBUG ENEMY SYSTEM] Updated enemy spawn rate to ${newDelay}ms for difficulty ${difficulty}`);\n  }\n\n  gameOver() {\n    const survivalTime = this.time.now - this.gameStartTime;\n// console.log(`[DEBUG GAME OVER] Final Score: ${this.score}, Survival Time: ${survivalTime}ms`);\n// console.log(`[DEBUG GAME OVER] Health at death: ${this.health}, Lives remaining: ${this.lives}`);\n    \n    // Check if player has lives left\n    if (this.lives > 0) {\n      // Use a life and respawn (don't stop music)\n      this.lives--;\n      this.updateLifeDisplay();\n      this.respawnPlayer();\n// console.log(`[RESPAWN] Using life, ${this.lives} lives remaining`);\n    } else {\n      // No lives left - actual game over\n// console.log('[GAME OVER] No lives remaining - ending game');\n      \n      // Stop background music only on actual game over\n      this.stopBackgroundMusic();\n      \n      // Stop all timers to prevent them from running after game over\n      if (this.obstacleTimer) this.obstacleTimer.remove();\n      if (this.sandwichTimer) this.sandwichTimer.remove();\n      if (this.enemyTimer) this.enemyTimer.remove();\n      \n      // Transition to GameOver scene with score, time, and collectibles\n      this.scene.start('GameOver', { \n        score: this.score, \n        time: survivalTime,\n        sandwiches: this.sandwichesCollected,\n        cans: this.cansCollected,\n        stars: this.stars, // Add stars collected\n        enemies: this.enemiesDefeated // Add enemies defeated\n      });\n    }\n  }\n\n  // calculateJumpFrameScales removed - all frames now use same scale\n\n  // No animation needed - just show jump sprite immediately\n\n  handleLanding() {\n    this.isGrounded = true;\n    this.hasDoubleJumped = false;\n    this.trickActive = false;\n    this.hasUsedTrick = false; // Reset trick when landing\n    this.jumpCount = 0;\n    // Stomp feature removed\n    \n    // Return to normal gravity and restart skate animation when landing\n    this.physics.world.gravity.y = this.GRAVITY;\n    // Return to idle sprite when landing\n    const idleSprite = this.selectedCharacter === 'kev' ? 'zombie_idle' : 'stacy_idle';\n    this.player.setTexture(idleSprite);\n    this.player.setScale(0.4); // Ensure consistent scaling\n    \n    // Clear ALL vertical velocity to prevent bouncing\n    this.player.setVelocityY(0);\n    \n    // Ensure player is exactly at ground level\n    this.player.y = PLAYER_GROUND_Y;\n    \n// console.log('Player landed');\n  }\n\n  performJump() {\n// console.log(`Jump attempt: grounded=${this.isGrounded}, jumpCount=${this.jumpCount}, hasDoubleJumped=${this.hasDoubleJumped}, stamina=${this.stamina}`);\n    \n    // Allow jump if grounded OR if we have reset jump count (from enemy stomp)\n    if ((this.isGrounded || this.jumpCount === 0) && this.stamina >= this.staminaCost && !this.hasDoubleJumped) {\n      // First jump - clear state and jump\n      this.player.setVelocityY(this.JUMP_VELOCITY);\n      // Play jump sound for first jump only\n      this.sound.play('jump_sfx', { volume: 0.3 });\n      // Stop animation and show jump sprite - it stays until landing\n      this.player.stop(); // STOP the skate animation!\n      const jumpSprite = this.selectedCharacter === 'kev' ? 'zombie_jump' : 'stacy_jump';\n      this.player.setTexture(jumpSprite);\n      this.player.setScale(this.jumpScale);\n      this.isGrounded = false;\n      this.jumpCount = 1;\n      this.hasDoubleJumped = false;\n      \n      // Consume stamina (unless boost is active)\n      if (!this.staminaBoostActive) {\n        this.stamina = Math.max(0, this.stamina - this.staminaCost);\n      }\n      this.updateStaminaBar();\n      \n      // Trigger jump particles\n      this.dustParticles.setPosition(this.player.x, this.player.y + 48);\n      this.dustParticles.explode(3);\n      this.jumpParticles.setPosition(this.player.x, this.player.y);\n      this.jumpParticles.explode(5);\n      \n// console.log('First jump performed');\n    } else if (this.jumpCount === 1 && !this.hasDoubleJumped && this.stamina >= this.staminaCost) {\n      // Second jump - double jump (requires stamina)\n      this.player.setVelocityY(this.TRICK_JUMP_VELOCITY);\n      // Stop animation and show jump sprite for double jump\n      this.player.stop(); // STOP the skate animation!\n      const jumpSprite = this.selectedCharacter === 'kev' ? 'zombie_jump' : 'stacy_jump';\n      this.player.setTexture(jumpSprite);\n      this.player.setScale(this.jumpScale);\n      this.hasDoubleJumped = true;\n      this.trickActive = false;\n      this.jumpCount = 2;\n      \n      // Consume stamina (unless boost is active)\n      if (!this.staminaBoostActive) {\n        this.stamina = Math.max(0, this.stamina - this.staminaCost);\n      }\n      this.updateStaminaBar();\n      \n      // Trigger trick particles - continuous golden trail\n      this.trickParticles.setPosition(this.player.x, this.player.y);\n      this.trickParticles.start();\n      \n      // Reduce gravity for float effect during trick\n      this.physics.world.gravity.y = this.FLOAT_GRAVITY;\n      \n      // Return to normal gravity after trick animation\n      this.time.delayedCall(600, () => {\n        this.physics.world.gravity.y = this.GRAVITY;\n        this.trickActive = false;\n        this.trickParticles.stop(); // Stop trick particle trail\n      });\n      \n// console.log('Double jump performed');\n    } else {\n      if (this.stamina < this.staminaCost) {\n// console.log('Jump blocked - not enough stamina');\n      } else {\n// console.log('Jump blocked - already used both jumps');\n      }\n    }\n  }\n  \n  performTrick() {\n// console.log(`Trick attempt: grounded=${this.isGrounded}, jumpCount=${this.jumpCount}, hasDoubleJumped=${this.hasDoubleJumped}, hasUsedTrick=${this.hasUsedTrick}, stamina=${this.stamina}`);\n    \n    // Can perform trick if not on ground, hasn't used trick yet, and has stamina\n    if (!this.isGrounded && !this.hasUsedTrick && this.stamina >= 15) {\n      // Apply small upward boost\n      this.player.setVelocityY(this.SWIPE_TRICK_VELOCITY);\n      \n      // Stop animation and use trick sprite\n      this.player.stop(); // Stop any animation\n      // Use the trick sprite during the trick\n      const trickSprite = this.selectedCharacter === 'kev' ? 'zombie_trick' : 'stacy_trick';\n      this.player.setTexture(trickSprite);\n      this.player.setScale(this.jumpScale);\n      this.trickActive = true;\n      \n      // Register trick with combo system\n      if (this.comboTracker) {\n        this.comboTracker.registerTrick(this.score, this.isGrounded);\n      }\n      this.hasUsedTrick = true; // Mark trick as used\n      \n      // Consume less stamina for tricks (unless boost is active)\n      if (!this.staminaBoostActive) {\n        this.stamina = Math.max(0, this.stamina - 15);\n      }\n      this.updateStaminaBar();\n      \n      // Add score for performing trick\n      this.score += 10;\n      this.scoreText.setText('Score: ' + this.score);\n      \n      // Trigger golden trick particles\n      this.trickParticles.setPosition(this.player.x, this.player.y);\n      this.trickParticles.start();\n      \n      // Slightly reduce gravity for a moment\n      this.physics.world.gravity.y = this.FLOAT_GRAVITY;\n      \n      // Return to normal gravity after trick\n      this.time.delayedCall(400, () => {\n        this.physics.world.gravity.y = this.GRAVITY;\n        this.trickActive = false;\n        this.trickParticles.stop();\n        // Keep jump sprite if still airborne\n        if (!this.isGrounded) {\n          const jumpSprite = this.selectedCharacter === 'kev' ? 'zombie_jump' : 'stacy_jump';\n          this.player.setTexture(jumpSprite);\n          this.player.setScale(this.jumpScale);\n        }\n      });\n      \n// console.log('Swipe trick performed!');\n    } else {\n      if (this.isGrounded) {\n// console.log('Trick blocked - must be in air');\n      } else if (this.hasUsedTrick) {\n// console.log('Trick blocked - already used trick this jump');\n      } else if (this.stamina < 15) {\n// console.log('Trick blocked - not enough stamina');\n      }\n    }\n  }\n  \n  // performStomp removed - stomp feature no longer exists\n  \n  updateStaminaBar() {\n    this.staminaBar.clear();\n    \n    let color = 0x00ff00;  // Default green\n    let flashAlpha = 1;\n    \n    // If stamina boost is active, flash between neon blue and magenta\n    if (this.staminaBoostActive) {\n      // Use time to determine which color to show\n      const time = this.time.now;\n      const flashSpeed = 200; // Flash every 200ms\n      const isBlue = Math.floor(time / flashSpeed) % 2 === 0;\n      color = isBlue ? 0x00ffff : 0xff00ff; // Neon blue or magenta\n      this.stamina = this.maxStamina; // Keep stamina at max during boost\n      \n      // Also make the skater flash the same colors as the power up bar\n      if (!this.invulnerable) {\n        this.player.setTint(color);\n      }\n    } else {\n      // Normal color based on stamina level\n      if (this.stamina < 33.33) {\n        color = 0xff0000;  // Red\n      } else if (this.stamina < 66.66) {\n        color = 0xffaa00;  // Orange\n      }\n      \n      // Clear skater color effect when not boosting (and not taking damage)\n      if (!this.invulnerable) {\n        this.player.clearTint();\n      }\n    }\n    \n    // Draw stamina bar (now at y=172)\n    this.staminaBar.fillStyle(color, flashAlpha);\n    const barWidth = (this.stamina / this.maxStamina) * 200;\n    this.staminaBar.fillRect(52, 172, barWidth, 20);\n  }\n  \n  updateHealthBar() {\n    this.healthBar.clear();\n    \n    // Choose color based on health level\n    let color = 0x00ff00;  // Green\n    if (this.health < 30) {\n      color = 0xff0000;  // Red\n    } else if (this.health < 60) {\n      color = 0xffaa00;  // Orange\n    }\n    \n    // Draw health bar (now at y=112)\n    this.healthBar.fillStyle(color, 1);\n    const healthPercent = this.health / this.maxHealth;\n    this.healthBar.fillRect(52, 112, 200 * healthPercent, 20);\n  }\n  \n  takeDamage(amount: number) {\n// console.log(`[DEBUG DAMAGE] takeDamage called with amount: ${amount}, Current health: ${this.health}, Invulnerable: ${this.invulnerable}`);\n    if (this.invulnerable) {\n// console.log(`[DEBUG DAMAGE] Damage blocked - player is invulnerable`);\n      return;\n    }\n    \n    const newHealth = Math.max(0, this.health - amount);\n// console.log(`[DEBUG DAMAGE] Taking ${amount} damage: ${this.health} -> ${newHealth}`);\n    this.health = newHealth;\n    this.updateHealthBar();\n    \n    // Flash the player red\n    this.player.setTint(0xff0000);\n    \n    // Make invulnerable for a short time\n    this.invulnerable = true;\n    \n    // Flash effect\n    let flashCount = 0;\n    const flashTimer = this.time.addEvent({\n      delay: 150,\n      callback: () => {\n        flashCount++;\n        if (flashCount % 2 === 0) {\n          this.player.setTint(0xffffff);\n        } else {\n          this.player.setTint(0xff8888);\n        }\n        \n        if (flashCount >= 8) {\n          this.player.clearTint();\n          this.invulnerable = false;\n          flashTimer.remove();\n        }\n      },\n      loop: true\n    });\n    \n    // Check if dead\n    if (this.health <= 0) {\n      this.gameOverTriggered = true;\n      this.gameOver();\n    }\n  }\n  \n  createSandwichSystem() {\n    // Create physics group for sandwiches\n    this.sandwiches = this.physics.add.group({\n      allowGravity: false,\n      immovable: true\n    });\n    \n    // Start spawning sandwiches much less frequently\n    this.sandwichTimer = this.time.addEvent({\n      delay: 20000, // Spawn every 20 seconds (much rarer)\n      callback: this.spawnSandwich,\n      callbackScope: this,\n      loop: true\n    });\n    \n    // Spawn first sandwich after 15 seconds\n    this.time.delayedCall(15000, () => {\n      this.spawnSandwich();\n    });\n  }\n  \n  spawnSandwich() {\n    // Calculate initial spawn distance\n    const spawnDistance = Phaser.Math.Between(800, 1200);\n    const spawnY = Phaser.Math.Between(400, 600); // Float in the sky\n    \n    // Check if this Y position conflicts with recent enemy or energy drink spawn (reduced to 3 seconds)\n    const timeSinceLastEnemy = (this.time.now - this.lastEnemySpawnTime) / 1000;\n    const timeSinceLastEnergyDrink = (this.time.now - this.lastEnergyDrinkSpawnTime) / 1000;\n    \n    if (timeSinceLastEnemy < 3 && Math.abs(spawnY - this.lastEnemyY) < 100) {\n// console.log(`[DEBUG SANDWICH SPAWN] Skipping - too close to recent enemy at Y=${this.lastEnemyY}`);\n      return;\n    }\n    \n    if (timeSinceLastEnergyDrink < 3 && Math.abs(spawnY - this.lastEnergyDrinkY) < 100) {\n// console.log(`[DEBUG SANDWICH SPAWN] Skipping - too close to recent energy drink at Y=${this.lastEnergyDrinkY}`);\n      return;\n    }\n    \n    // Store sandwich spawn info\n    this.lastSandwichY = spawnY;\n    this.lastSandwichSpawnTime = this.time.now;\n    \n    // Create arrow warning indicator for sandwich using custom sandwich arrow\n    // Move arrow slightly left (from 590 to 580)\n    const arrow = this.arrowIndicators.create(580, spawnY, 'sandwich_arrow') as Phaser.GameObjects.Sprite;\n    arrow.setScale(0.15);\n    arrow.setDepth(102); // Above UI\n    arrow.setScrollFactor(0); // Keep fixed on screen\n    \n    // Flash the arrow for visibility\n    this.tweens.add({\n      targets: arrow,\n      alpha: { from: 1, to: 0.5 },\n      duration: 400,\n      yoyo: true,\n      repeat: -1\n    });\n    \n// console.log(`[DEBUG SANDWICH] Arrow indicator shown at Y=${spawnY}, sandwich will spawn in 2 seconds`);\n    \n    // Spawn sandwich after 2 second warning\n    this.time.delayedCall(2000, () => {\n      arrow.destroy();\n      \n      // Recalculate spawn position based on current player position\n      // Account for the 2 second delay - player moves at 380 pixels/second\n      const adjustedSpawnX = this.player.x + spawnDistance;\n      \n      const sandwich = this.sandwiches.create(adjustedSpawnX, spawnY, 'sandwich');\n      sandwich.setScale(0.12); // Scale down the sandwich\n      sandwich.setDepth(10);\n      \n      // Add floating animation\n      this.tweens.add({\n        targets: sandwich,\n        y: spawnY - 20,\n        duration: 1500,\n        ease: 'Sine.inOut',\n        yoyo: true,\n        repeat: -1\n      });\n      \n// console.log(`Sandwich spawned at (${adjustedSpawnX}, ${spawnY}) - player at ${this.player.x}`);  \n    });\n  }\n  \n  createEnergyDrinkSystem() {\n    // Create physics group for energy drinks\n    this.energyDrinks = this.physics.add.group({\n      allowGravity: false,\n      immovable: true\n    });\n    \n    // Random energy drink spawning with minimum 30 second cooldown\n    // Check every 5 seconds if we should spawn\n    this.energyDrinkTimer = this.time.addEvent({\n      delay: 5000, // Check every 5 seconds\n      callback: () => {\n        // Only try to spawn if 30+ seconds have passed and random chance\n        const timeSinceLastCan = (this.time.now - this.lastEnergyDrinkSpawnTime) / 1000;\n        if (timeSinceLastCan >= 30 && Math.random() < 0.3) { // 30% chance each check after cooldown\n          this.spawnEnergyDrink();\n        }\n      },\n      callbackScope: this,\n      loop: true\n    });\n    \n    // First potential spawn after 35-45 seconds\n    this.time.delayedCall(Phaser.Math.Between(35000, 45000), () => {\n      this.spawnEnergyDrink();\n    });\n  }\n  \n  spawnEnergyDrink() {\n    // Double-check cooldown (in case called directly)\n    const timeSinceLastCan = (this.time.now - this.lastEnergyDrinkSpawnTime) / 1000;\n    if (timeSinceLastCan < 30) {\n// console.log(`[DEBUG ENERGY DRINK] Cooldown active - ${Math.floor(30 - timeSinceLastCan)}s remaining`);\n      return;\n    }\n    \n    // Calculate initial spawn distance\n    const spawnDistance = Phaser.Math.Between(900, 1300);\n    const spawnY = Phaser.Math.Between(450, 650); // Float in the sky\n    \n    // Check if this Y position conflicts with recent spawns (sandwich or enemy) within 3 seconds (reduced from 5)\n    const timeSinceLastSandwich = (this.time.now - this.lastSandwichSpawnTime) / 1000;\n    const timeSinceLastEnemy = (this.time.now - this.lastEnemySpawnTime) / 1000;\n    \n    if (timeSinceLastSandwich < 3 && Math.abs(spawnY - this.lastSandwichY) < 100) {\n// console.log(`[DEBUG ENERGY DRINK] Skipping - too close to recent sandwich at Y=${this.lastSandwichY}`);\n      return;\n    }\n    \n    if (timeSinceLastEnemy < 3 && Math.abs(spawnY - this.lastEnemyY) < 100) {\n// console.log(`[DEBUG ENERGY DRINK] Skipping - too close to recent enemy at Y=${this.lastEnemyY}`);\n      return;\n    }\n    \n    // Store energy drink spawn info\n    this.lastEnergyDrinkY = spawnY;\n    this.lastEnergyDrinkSpawnTime = this.time.now;\n    \n    // Create arrow warning indicator for energy drink\n    const arrow = this.arrowIndicators.create(580, spawnY, 'energy_warning') as Phaser.GameObjects.Sprite;\n    arrow.setScale(0.15);\n    arrow.setDepth(102); // Above UI\n    arrow.setScrollFactor(0); // Keep fixed on screen\n    \n    // Flash the arrow for visibility\n    this.tweens.add({\n      targets: arrow,\n      alpha: { from: 1, to: 0.5 },\n      duration: 400,\n      yoyo: true,\n      repeat: -1\n    });\n    \n// console.log(`[DEBUG ENERGY DRINK] Arrow indicator shown at Y=${spawnY}, drink will spawn in 2 seconds`);\n    \n    // Spawn energy drink after 2 second warning\n    this.time.delayedCall(2000, () => {\n      arrow.destroy();\n      \n      // Recalculate spawn position to match obstacle timing - spawn just off-screen\n      const adjustedSpawnX = this.player.x + 700; // Same as obstacles\n      \n      const energyDrink = this.energyDrinks.create(adjustedSpawnX, spawnY, 'energy_drink');\n      energyDrink.setScale(0.12); // Scale down the energy drink\n      energyDrink.setDepth(10);\n      \n      // Add floating animation with shimmer effect\n      this.tweens.add({\n        targets: energyDrink,\n        y: spawnY - 20,\n        duration: 1500,\n        ease: 'Sine.inOut',\n        yoyo: true,\n        repeat: -1\n      });\n      \n      // Add shimmer effect\n      this.tweens.add({\n        targets: energyDrink,\n        alpha: { from: 0.8, to: 1 },\n        duration: 300,\n        yoyo: true,\n        repeat: -1\n      });\n      \n// console.log(`Energy drink spawned at (${adjustedSpawnX}, ${spawnY}) - player at ${this.player.x}`);\n    });\n  }\n  \n  collectEnergyDrink(energyDrink: any) {\n    // Play energy drink sound effect\n    this.sound.play('energy_drink_sfx', { volume: 0.5 });\n    \n    // Increment can counter\n    this.cansCollected++;\n    \n    // Show MAXIMUM! text at screen center - NO VFX, just appear and slide\n    const maximumText = this.add.image(320, 480, 'maximum_text');\n    maximumText.setScale(0.45); // Slightly smaller\n    maximumText.setDepth(150);\n    maximumText.setScrollFactor(0); // Keep fixed on screen\n    \n    // Keep on screen for 1.5 seconds, then slide left EXTREMELY fast\n    this.time.delayedCall(1500, () => {\n      // Slide to the left extremely fast\n      this.tweens.add({\n        targets: maximumText,\n        x: -300,\n        duration: 100, // VERY fast - only 100ms\n        ease: 'Power3.easeIn',\n        onComplete: () => {\n          maximumText.destroy();\n        }\n      });\n    });\n    \n    // Activate stamina boost\n    this.staminaBoostActive = true;\n    this.stamina = this.maxStamina; // Fill stamina to max\n    \n    // Cancel any existing boost timer\n    if (this.staminaBoostTimer) {\n      this.staminaBoostTimer.remove();\n    }\n    \n    // Set timer to deactivate boost after 10 seconds\n    this.staminaBoostTimer = this.time.delayedCall(10000, () => {\n      this.staminaBoostActive = false;\n      // Clear the skater color effect when boost expires\n      if (!this.invulnerable) {\n        this.player.clearTint();\n      }\n// console.log('[ENERGY DRINK] Stamina boost expired');\n    });\n    \n    // Add score\n    this.score += 50;\n    this.scoreText.setText('Score: ' + this.score);\n    \n    // Play particle effect at drink location\n    this.jumpParticles.setPosition(energyDrink.x, energyDrink.y);\n    this.jumpParticles.explode(25);\n    \n    // Remove energy drink\n    energyDrink.destroy();\n    \n// console.log(`Energy drink collected! Stamina boost active for 10 seconds, Total: ${this.cansCollected}`);\n  }\n  \n  collectSandwich(sandwich: any) {\n    // Play bite sound effect\n    this.sound.play('bite_sfx', { volume: 0.5 });\n    \n    // Increment sandwich counter\n    this.sandwichesCollected++;\n    \n    // Heal player\n    this.health = Math.min(this.maxHealth, this.health + 40);\n    this.updateHealthBar();\n    \n    // Add score\n    this.score += 25;\n    this.scoreText.setText('Score: ' + this.score);\n    \n    // Play particle effect at sandwich location\n    this.jumpParticles.setPosition(sandwich.x, sandwich.y);\n    this.jumpParticles.explode(15);\n    \n    // Remove sandwich\n    sandwich.destroy();\n    \n// console.log(`Sandwich collected! Health: ${this.health}/${this.maxHealth}, Total: ${this.sandwichesCollected}`);\n  }\n  \n  createStarSystem() {\n    // Create physics group for star pickups\n    this.starPickups = this.physics.add.group({\n      allowGravity: false\n    });\n    \n    // Start spawning star patterns\n    this.time.addEvent({\n      delay: 30000, // Spawn star patterns every 30 seconds  \n      callback: this.spawnStarPattern,\n      callbackScope: this,\n      loop: true\n    });\n    \n    // First star pattern after 20 seconds\n    this.time.delayedCall(20000, () => {\n      this.spawnStarPattern();\n    });\n    \n    // Add collision for star collection\n    this.physics.add.overlap(this.player, this.starPickups, (player: any, star: any) => {\n      const value = (star as any).value || 1;\n      \n      // Play appropriate sound effect based on star type\n      if (value === 10) {\n        this.sound.play('star_cluster_sfx', { volume: 0.5 });\n      } else {\n        this.sound.play('new_star_sfx', { volume: 0.4 });\n      }\n      \n      this.collectStars(value);\n      star.destroy();\n    }, undefined, this);\n  }\n  \n  spawnStarPattern() {\n    const baseX = this.player.x + Phaser.Math.Between(800, 1200);\n    const baseY = Phaser.Math.Between(600, 750); // Can be ground or air level\n    \n    // Spawn a line of 3-5 single stars\n    const starCount = Phaser.Math.Between(3, 5);\n    for (let i = 0; i < starCount; i++) {\n      const star = this.starPickups.create(baseX + (i * 80), baseY, 'star_single');\n      star.setScale(0.12);\n      star.setDepth(9);\n      (star as any).value = 1;\n      \n      // Add subtle floating animation\n      this.tweens.add({\n        targets: star,\n        y: star.y - 10,\n        duration: 1000,\n        ease: 'Sine.inOut',\n        yoyo: true,\n        repeat: -1\n      });\n    }\n    \n    // 30% chance to add a 10-star at the end of the line\n    if (Math.random() < 0.3) {\n      const bigStar = this.starPickups.create(baseX + (starCount * 80), baseY, 'star_ten');\n      bigStar.setScale(0.15);\n      bigStar.setDepth(9);\n      (bigStar as any).value = 10;\n      \n      // Add more prominent animation for the big star\n      this.tweens.add({\n        targets: bigStar,\n        y: bigStar.y - 15,\n        scale: 0.12,\n        duration: 800,\n        ease: 'Sine.inOut',\n        yoyo: true,\n        repeat: -1\n      });\n    }\n    \n// console.log(`Star pattern spawned at (${baseX}, ${baseY})`);\n  }\n  \n  collectStars(amount: number) {\n    this.stars += amount;\n    this.starText.setText(this.stars.toString());\n    \n    // Check if player earned an extra life (every 100 stars)\n    while (this.stars >= this.nextLifeAt) {\n      this.lives++; // Add extra life\n      this.updateLifeDisplay();\n      this.nextLifeAt += this.starLifeThreshold; // Set next milestone (200, 300, 400, etc.)\n      \n      // Show \"1UP\" message\n      const oneUpText = this.add.text(this.player.x, this.player.y - 100, '1UP!', {\n        fontSize: '32px',\n        fontFamily: '\"Press Start 2P\", monospace',\n        color: '#00ff00',\n        stroke: '#000000',\n        strokeThickness: 4\n      });\n      oneUpText.setDepth(20);\n      \n      this.tweens.add({\n        targets: oneUpText,\n        y: oneUpText.y - 80,\n        alpha: 0,\n        duration: 1500,\n        onComplete: () => oneUpText.destroy()\n      });\n      \n// console.log('[EXTRA LIFE] Earned 1UP! Lives: ' + this.lives);\n    }\n    \n    // Add a shine effect to the star counter instead of scaling\n    const shineEffect = this.add.graphics();\n    shineEffect.x = this.starIcon.x;\n    shineEffect.y = this.starIcon.y;\n    shineEffect.setDepth(101);\n    shineEffect.setScrollFactor(0);\n    \n    // Create a white shine overlay\n    shineEffect.fillStyle(0xffffff, 0.7);\n    shineEffect.fillCircle(0, 0, 25);\n    \n    // Animate the shine effect\n    this.tweens.add({\n      targets: shineEffect,\n      alpha: { from: 0.7, to: 0 },\n      scale: { from: 0.5, to: 1.5 },\n      duration: 500,\n      ease: 'Cubic.out',\n      onComplete: () => {\n        shineEffect.destroy();\n      }\n    });\n    \n    // Also add a subtle glow to the text\n    this.tweens.add({\n      targets: this.starText,\n      alpha: { from: 1, to: 0.5 },\n      duration: 200,\n      yoyo: true,\n      ease: 'Sine.inOut'\n    });\n    \n// console.log(`Collected ${amount} stars! Total: ${this.stars}`);\n  }\n  \n  updateBackgroundTiles() {\n    if (this.backgroundTiles.length === 0) return;\n    \n    const cameraX = this.cameras.main.scrollX;\n    const screenWidth = 640;\n    \n    // Find the leftmost and rightmost tiles\n    let leftmostTile = this.backgroundTiles[0];\n    let rightmostTile = this.backgroundTiles[this.backgroundTiles.length - 1];\n    \n    // Remove tiles that are too far behind\n    while (this.backgroundTiles.length > 0 && this.backgroundTiles[0].x < cameraX - screenWidth) {\n      const tileToRemove = this.backgroundTiles.shift();\n      if (tileToRemove) tileToRemove.destroy();\n    }\n    \n    // Add new tiles ahead if needed\n    if (this.backgroundTiles.length > 0) {\n      rightmostTile = this.backgroundTiles[this.backgroundTiles.length - 1];\n      \n      while (rightmostTile.x < cameraX + screenWidth * 2) {\n        const newX = rightmostTile.x + this.backgroundWidth;\n        const newTile = this.add.image(newX, 960, 'city_background')\n          .setOrigin(0.5, 1)\n          .setScrollFactor(1.0)\n          .setDepth(1)\n          .setScale(1.1, 1.1);\n        this.backgroundTiles.push(newTile);\n        rightmostTile = newTile;\n      }\n    }\n  }\n\n  createLifeDisplay() {\n    // Create life icon and text - positioned slightly more to the right\n    this.lifeIcon = this.add.image(500, 62, 'life_icon');\n    this.lifeIcon.setScale(0.12); // Keep larger size\n    this.lifeIcon.setDepth(102); // Higher depth than star (100)\n    this.lifeIcon.setScrollFactor(0);\n    \n    this.lifeText = this.add.text(540, 62, this.lives.toString(), {\n      fontSize: '24px',\n      color: '#ffffff',\n      fontFamily: '\"Press Start 2P\", monospace',\n      stroke: '#000000',\n      strokeThickness: 4\n    });\n    this.lifeText.setOrigin(0, 0.5);\n    this.lifeText.setDepth(100);\n    this.lifeText.setScrollFactor(0);\n  }\n  \n  updateLifeDisplay() {\n    // Update the life counter text\n    if (this.lifeText) {\n      this.lifeText.setText(this.lives.toString());\n    }\n  }\n  \n  respawnPlayer() {\n    // Reset player health only - not position or movement state\n    this.health = 100;\n    this.updateHealthBar();\n    this.stamina = 100;\n    this.updateStaminaBar();\n    \n    // Music continues playing during respawn - no need to restart\n    \n    // Reset game state but preserve player movement/position\n    this.gameOverTriggered = false;\n    this.invulnerable = true; // Give temporary invulnerability after respawn\n    this.player.clearTint();\n    // Don't reset Y position - player continues what they were doing\n    // Don't reset jump states - preserve current action\n    // Don't change sprite - keep current animation state\n    \n    // Clear nearby obstacles for safe respawn\n    const clearRadius = 800;\n    this.obstacles.children.entries.forEach((obstacle: any) => {\n      if (Math.abs(obstacle.x - this.player.x) < clearRadius) {\n        obstacle.destroy();\n      }\n    });\n    \n    // Clear nearby enemies\n    this.enemies.children.entries.forEach((enemy: any) => {\n      if (Math.abs(enemy.x - this.player.x) < clearRadius) {\n        enemy.destroy();\n      }\n    });\n    \n    // Flash effect to indicate respawn\n    let flashCount = 0;\n    const flashTimer = this.time.addEvent({\n      delay: 150,\n      callback: () => {\n        flashCount++;\n        if (flashCount % 2 === 0) {\n          this.player.setAlpha(1);\n        } else {\n          this.player.setAlpha(0.5);\n        }\n        \n        if (flashCount >= 12) {\n          this.player.setAlpha(1);\n          this.invulnerable = false;\n          flashTimer.remove();\n        }\n      },\n      loop: true\n    });\n    \n// console.log('[RESPAWN] Player respawned with full health');\n  }\n\n  shutdown() {\n    // Clean up all arrow indicators when scene shuts down\n    if (this.arrowIndicators) {\n      this.arrowIndicators.clear(true, true); // Remove and destroy all arrows\n    }\n    \n    // Clean up any remaining arrows attached to enemies\n    if (this.enemies) {\n      this.enemies.children.entries.forEach((enemy: any) => {\n        if (enemy.arrow) {\n          enemy.arrow.destroy();\n          enemy.arrow = null;\n        }\n      });\n    }\n    \n    // Clean up any remaining arrows attached to obstacles\n    if (this.obstacles) {\n      this.obstacles.children.entries.forEach((obstacle: any) => {\n        if (obstacle.arrow) {\n          obstacle.arrow.destroy();\n          obstacle.arrow = null;\n        }\n      });\n    }\n    \n    // Clean up any remaining arrows attached to sandwiches or energy drinks\n    if (this.sandwiches) {\n      this.sandwiches.children.entries.forEach((item: any) => {\n        if (item.arrow) {\n          item.arrow.destroy();\n          item.arrow = null;\n        }\n      });\n    }\n    \n    if (this.energyDrinks) {\n      this.energyDrinks.children.entries.forEach((item: any) => {\n        if (item.arrow) {\n          item.arrow.destroy();\n          item.arrow = null;\n        }\n      });\n    }\n  }\n\n  update() {\n    // Get player body for velocity checks\n    const playerBody = this.player.body as Phaser.Physics.Arcade.Body;\n    \n    // Update red sky background scrolling for parallax effect\n    if (this.redSkyBg) {\n      // Scroll the tile position based on camera position for infinite repeating\n      this.redSkyBg.tilePositionX = this.cameras.main.scrollX * 0.3; // Slower scrolling for parallax\n    }\n    \n    // Manage infinite background scrolling\n    this.updateBackgroundTiles();\n    \n    // Regenerate stamina slowly (unless boost is active)\n    if (!this.staminaBoostActive && this.stamina < this.maxStamina) {\n      this.stamina = Math.min(this.maxStamina, this.stamina + this.staminaRegen);\n    }\n    this.updateStaminaBar(); // Always update to handle flashing during boost\n    \n    // Force movement by directly updating position since velocity isn't working\n    // Apply speed multiplier for progressive difficulty\n    const baseSpeed = 6.3; // Base movement speed\n    const currentSpeed = baseSpeed * this.speedMultiplier;\n    this.player.x += currentSpeed; // Move with increasing speed over time\n    \n    // Still set velocity for physics calculations\n    this.player.setVelocityX(380 * this.speedMultiplier);\n    \n    // Removed velocity logging for performance\n    \n    // Removed debug logging for performance\n    \n    // Handle jumping with simple state check\n    if ((Phaser.Input.Keyboard.JustDown(this.cursors.space!) || \n         Phaser.Input.Keyboard.JustDown(this.cursors.up!)) || \n         this.controls.justTapped()) {\n      this.performJump();\n    }\n    \n    // Handle swipe-up for tricks while airborne (mobile)\n    if (this.controls.justSwipedUp() && !this.isGrounded) {\n      this.performTrick();\n    }\n    \n    // Handle J key for tricks while airborne (desktop)\n    if (Phaser.Input.Keyboard.JustDown(this.trickKey) && !this.isGrounded) {\n      console.log('[J KEY] J key detected for trick!');\n      this.performTrick();\n    }\n    \n    // Swipe down does nothing now - stomp feature removed\n    \n    // Update world scrolling for infinite background\n    this.world.update(this.cameras.main.scrollX);\n    \n    // Update trick particles to follow player during tricks\n    if (this.trickActive && this.trickParticles.emitting) {\n      this.trickParticles.setPosition(this.player.x, this.player.y);\n    }\n    \n    // Update score based on distance traveled (incremental)\n    const currentDistanceMilestone = Math.floor((this.player.x - 320) / 100);\n    if (currentDistanceMilestone > this.lastDistanceScoreMilestone) {\n      // Add 10 points for each new milestone reached\n      const milestonesGained = currentDistanceMilestone - this.lastDistanceScoreMilestone;\n      this.score += (milestonesGained * 10);\n      this.lastDistanceScoreMilestone = currentDistanceMilestone;\n      this.scoreText.setText(`Score: ${this.score}`);\n    }\n    \n    // Clean up off-screen obstacles\n    this.obstacles.children.entries.forEach((obstacle: any) => {\n      if (obstacle.x < this.cameras.main.scrollX - 200) {\n        this.obstacles.remove(obstacle);\n        obstacle.destroy();\n      }\n    });\n    \n    // Clean up off-screen sandwiches\n    this.sandwiches.children.entries.forEach((sandwich: any) => {\n      if (sandwich.x < this.cameras.main.scrollX - 200) {\n        this.sandwiches.remove(sandwich);\n        sandwich.destroy();\n      }\n    });\n    \n    // Clean up off-screen stars\n    this.starPickups.children.entries.forEach((star: any) => {\n      if (star.x < this.cameras.main.scrollX - 200) {\n        this.starPickups.remove(star);\n        star.destroy();\n      }\n    });\n    \n    // Clean up off-screen enemies and manage arrow indicators\n    this.enemies.children.entries.forEach((enemy: any, index: number) => {\n      // Removed enemy tracking debug for performance\n      \n      // Remove arrow when enemy is on screen (visible)\n      if (enemy.arrow && enemy.x < this.player.x + 640) {\n// console.log(`[DEBUG ARROW] Destroying arrow as enemy is on screen at X=${enemy.x}`);\n        enemy.arrow.destroy();\n        enemy.arrow = null;\n      }\n      \n      // Clean up off-screen enemies\n      if (enemy.x < this.cameras.main.scrollX - 200) {\n        // Also remove arrow if still exists\n        if (enemy.arrow) {\n          enemy.arrow.destroy();\n        }\n        this.enemies.remove(enemy);\n        enemy.destroy();\n      }\n    });\n    \n    // Check if player fell too far (infinite runner should never end)\n    if (this.player.y > 1200) {\n// console.log('Player fell - restarting scene');\n      this.scene.restart();\n    }\n    \n    // Get physics body for ground checks\n    const body = this.player.body as Phaser.Physics.Arcade.Body;\n    \n    // Disable gravity when on ground to prevent constant downward force\n    if (this.isGrounded) {\n      body.allowGravity = false;\n    } else {\n      body.allowGravity = true;\n    }\n    \n    // Predict if player will land this frame and prevent overshooting\n    if (!this.isGrounded && body.velocity.y > 0) {\n      const nextY = this.player.y + (body.velocity.y * this.game.loop.delta / 1000);\n      \n      // If next position would be at or below ground, land NOW\n      if (nextY >= PLAYER_GROUND_Y) {\n        // Set to exact ground position before overshooting\n        this.player.y = PLAYER_GROUND_Y;\n        this.handleLanding();\n      }\n    }\n    \n    // Jump tracking removed - no longer needed\n    \n    // Keep zombie absolutely stable on ground when grounded\n    if (this.isGrounded) {\n      // Lock to exact ground position\n      this.player.y = PLAYER_GROUND_Y;\n      // Zero all Y velocity\n      this.player.setVelocityY(0);\n      body.velocity.y = 0;\n    }\n    \n    // Update combo system with ground state\n    if (this.comboTracker) {\n      const starsEarned = this.comboTracker.updateAirState(this.score, this.wasGrounded, this.isGrounded);\n      this.wasGrounded = this.isGrounded;\n      \n      // Update combo UI every frame to ensure it's hidden when inactive\n      this.updateComboUI();\n    }\n  }\n  \n  setupComboUI() {\n    // Create combo UI text (initially hidden) - positioned much lower and larger font\n    this.comboUI = this.add.text(320, 300, '', {\n      fontSize: '26px',\n      color: '#ffff00',\n      fontFamily: '\"Press Start 2P\", monospace',\n      stroke: '#000000',\n      strokeThickness: 3,\n      align: 'center'\n    }).setOrigin(0.5).setScrollFactor(0).setDepth(101);\n    this.comboUI.setVisible(false);\n  }\n  \n  updateComboUI() {\n    if (!this.comboUI || !this.comboTracker) return;\n    \n    const state = this.comboTracker.getComboState();\n    \n    if (state.status === 'inactive') {\n      // Don't hide immediately if we have combo data to display\n      if (!this.lastComboData) {\n        this.comboUI.setVisible(false);\n      }\n    } else if (state.status === 'pending') {\n      // Hide the pending state display\n      this.comboUI.setVisible(false);\n      this.lastComboData = null;\n    } else if (state.status === 'active') {\n      // Cancel any existing hide timer when combo is active\n      if (this.comboDisplayTimer) {\n        this.comboDisplayTimer.remove();\n        this.comboDisplayTimer = undefined;\n      }\n      \n      // Only show combo UI when combo is actually active (3+ events)\n      this.comboUI.setVisible(true);\n      this.comboUI.setText(`COMBO x${state.multiplier}\\nSCORE: ${state.comboScorePoints}`);\n      this.comboUI.setColor('#00ff00');\n      \n      // Store the combo data for display after landing\n      this.lastComboData = {\n        multiplier: state.multiplier,\n        scorePoints: state.comboScorePoints\n      };\n    }\n  }\n  \n  showComboEndEffect(data: any) {\n    if (!data.starsEarned || data.starsEarned <= 0) return;\n    \n    // Show simple combo end effect with stars earned - no floating VFX\n    const comboEndText = this.add.text(320, 360, `COMBO!\\n+${data.starsEarned} STARS`, {\n      fontSize: '24px',\n      color: '#ffff00',\n      fontFamily: '\"Press Start 2P\", monospace',\n      stroke: '#000000',\n      strokeThickness: 4,\n      align: 'center'\n    }).setOrigin(0.5).setScrollFactor(0).setDepth(102);\n    \n    // Show for 2 seconds then remove immediately (no fade)\n    this.time.delayedCall(2000, () => {\n      comboEndText.destroy();\n    });\n  }\n}","size_bytes":84483},"client/src/game/scenes/GameOver.ts":{"content":"import Phaser from 'phaser';\n\nexport default class GameOver extends Phaser.Scene {\n  private finalScore = 0;\n  private survivalTime = 0;\n  private sandwichesCollected = 0;\n  private cansCollected = 0;\n  private starsCollected = 0;\n  private enemiesDefeated = 0;\n  private selectedOption = 0; // 0 = Play Again, 1 = Main Menu\n  private isNewHighScore = false;\n  private playAgainText?: Phaser.GameObjects.Text;\n  private mainMenuText?: Phaser.GameObjects.Text;\n  private selector?: Phaser.GameObjects.Text;\n  private upKey?: Phaser.Input.Keyboard.Key;\n  private downKey?: Phaser.Input.Keyboard.Key;\n  private spaceKey?: Phaser.Input.Keyboard.Key;\n  private enterKey?: Phaser.Input.Keyboard.Key;\n  private playerName = '';\n  private nameInputText?: Phaser.GameObjects.Text;\n  private isEnteringName = false;\n  private hasSavedScore = false;\n  private namePromptText?: Phaser.GameObjects.Text;\n  private instructionText?: Phaser.GameObjects.Text;\n\n  constructor() {\n    super('GameOver');\n  }\n\n  shutdown() {\n    // Clean up any audio references when scene shuts down\n    // This prevents errors with audio configs being accessed after destruction\n    this.sound.stopAll();\n    this.sound.removeAllListeners();\n  }\n\n  init(data: { score: number, time: number, sandwiches?: number, cans?: number, stars?: number, enemies?: number }) {\n    this.finalScore = data.score || 0;\n    this.survivalTime = data.time || 0;\n    this.sandwichesCollected = data.sandwiches || 0;\n    this.cansCollected = data.cans || 0;\n    this.starsCollected = data.stars || 0;\n    this.enemiesDefeated = data.enemies || 0;\n    this.selectedOption = 0; // Reset selection\n    \n    // CRITICAL: Reset these flags for every new game over\n    this.hasSavedScore = false;\n    this.isNewHighScore = false;\n    this.isEnteringName = false;\n    this.playerName = '';\n    \n    // Reset UI references\n    this.playAgainText = undefined;\n    this.mainMenuText = undefined;\n    this.selector = undefined;\n    this.nameInputText = undefined;\n    this.namePromptText = undefined;\n    this.instructionText = undefined;\n  }\n\n  create() {\n    // Add game over background\n    const bg = this.add.image(320, 480, 'game_over_bg');\n    bg.setDisplaySize(640, 960);\n\n    // Game Over text\n    const gameOverText = this.add.text(320, 200, 'GAME OVER', {\n      fontFamily: '\"Press Start 2P\", monospace',\n      fontSize: '40px',\n      color: '#ff0000',\n      stroke: '#ffffff',\n      strokeThickness: 6\n    }).setOrigin(0.5);\n    gameOverText.setShadow(3, 3, '#000000', 5, true, true);\n\n    // Results text\n    const resultsText = this.add.text(320, 320, 'RESULTS', {\n      fontFamily: '\"Press Start 2P\", monospace',\n      fontSize: '28px',\n      color: '#ffff00',\n      stroke: '#000000',\n      strokeThickness: 4\n    }).setOrigin(0.5);\n    resultsText.setShadow(2, 2, '#000000', 4, true, true);\n\n    // Stats in order: Score, Time, Enemies, Sandwiches, Energy Drinks, Stars\n    \n    // Final score\n    const finalScoreText = this.add.text(320, 400, `SCORE: ${Math.floor(this.finalScore)}`, {\n      fontFamily: '\"Press Start 2P\", monospace',\n      fontSize: '22px',\n      color: '#ffffff',\n      stroke: '#000000',\n      strokeThickness: 4\n    }).setOrigin(0.5);\n    finalScoreText.setShadow(2, 2, '#000000', 3, true, true);\n    \n    // Survival time\n    const minutes = Math.floor(this.survivalTime / 60000);\n    const seconds = Math.floor((this.survivalTime % 60000) / 1000);\n    const timeText = `${minutes}:${seconds.toString().padStart(2, '0')}`;\n    \n    const timeTextEl = this.add.text(320, 450, `TIME: ${timeText}`, {\n      fontFamily: '\"Press Start 2P\", monospace',\n      fontSize: '20px',\n      color: '#ffffff',\n      stroke: '#000000',\n      strokeThickness: 4\n    }).setOrigin(0.5);\n    timeTextEl.setShadow(2, 2, '#000000', 3, true, true);\n    \n    // Enemies defeated\n    const enemiesText = this.add.text(320, 495, `ENEMIES: ${this.enemiesDefeated}`, {\n      fontFamily: '\"Press Start 2P\", monospace',\n      fontSize: '20px',\n      color: '#ff6600',\n      stroke: '#000000',\n      strokeThickness: 4\n    }).setOrigin(0.5);\n    enemiesText.setShadow(2, 2, '#000000', 3, true, true);\n    \n    // Sandwiches collected - white font as requested\n    const sandwichesText = this.add.text(320, 535, `SANDWICHES: ${this.sandwichesCollected}`, {\n      fontFamily: '\"Press Start 2P\", monospace',\n      fontSize: '18px',\n      color: '#ffffff',\n      stroke: '#000000',\n      strokeThickness: 4\n    }).setOrigin(0.5);\n    sandwichesText.setShadow(2, 2, '#000000', 3, true, true);\n    \n    // Energy drinks collected  \n    const energyText = this.add.text(320, 575, `ENERGY DRINKS: ${this.cansCollected}`, {\n      fontFamily: '\"Press Start 2P\", monospace',\n      fontSize: '18px',\n      color: '#00ffff',\n      stroke: '#000000',\n      strokeThickness: 4\n    }).setOrigin(0.5);\n    energyText.setShadow(2, 2, '#000000', 3, true, true);\n    \n    // Stars collected - larger yellow font\n    const starsText = this.add.text(320, 625, `STARS: ${this.starsCollected}`, {\n      fontFamily: '\"Press Start 2P\", monospace',\n      fontSize: '24px',\n      color: '#ffff00',\n      stroke: '#000000',\n      strokeThickness: 4\n    }).setOrigin(0.5);\n    starsText.setShadow(2, 2, '#000000', 3, true, true);\n\n    // Check and show high score info\n    this.checkHighScoreDisplay();\n\n    // Automatically save score with \"Player 1\" and show menu options\n    this.autoSubmitScore();\n    \n    // ALWAYS show menu options after a delay, even if score submission fails\n    this.time.delayedCall(500, () => {\n      // Safety check - if menu options aren't shown yet, show them now\n      if (!this.playAgainText && !this.mainMenuText) {\n        this.showMenuOptions();\n      }\n    });\n    \n// console.log(`[DEBUG GAME OVER] Score: ${this.finalScore}, Time: ${timeText}`);\n\n    // Setup keyboard input\n    this.setupInput();\n  }\n\n  async checkHighScoreDisplay() {\n    // Show current high score\n    try {\n      const response = await fetch('/api/leaderboard/high-score');\n      if (response.ok) {\n        const { highScore } = await response.json();\n        \n        this.isNewHighScore = this.finalScore > highScore;\n        \n        if (this.isNewHighScore) {\n          const newHighScoreText = this.add.text(320, 685, 'NEW HIGH SCORE!', {\n            fontFamily: '\"Press Start 2P\", monospace',\n            fontSize: '22px',\n            color: '#ffff00',\n            stroke: '#000000',\n            strokeThickness: 4\n          }).setOrigin(0.5);\n          newHighScoreText.setShadow(2, 2, '#000000', 4, true, true);\n        } else {\n          const highScoreText = this.add.text(320, 685, `HIGH SCORE: ${Math.floor(highScore)}`, {\n            fontFamily: '\"Press Start 2P\", monospace',\n            fontSize: '18px',\n            color: '#ffffff',\n            stroke: '#000000',\n            strokeThickness: 3\n          }).setOrigin(0.5);\n          highScoreText.setShadow(2, 2, '#000000', 3, true, true);\n        }\n      } else {\n        // Fallback to localStorage if API fails\n        const highScore = this.getHighScore();\n        this.isNewHighScore = this.finalScore > highScore;\n        \n        if (this.isNewHighScore) {\n          this.setHighScore(this.finalScore);\n          const newHighScoreText = this.add.text(320, 685, 'NEW HIGH SCORE!', {\n            fontFamily: '\"Press Start 2P\", monospace',\n            fontSize: '22px',\n            color: '#ffff00',\n            stroke: '#000000',\n            strokeThickness: 4\n          }).setOrigin(0.5);\n          newHighScoreText.setShadow(2, 2, '#000000', 4, true, true);\n        } else {\n          const highScoreText = this.add.text(320, 685, `HIGH SCORE: ${Math.floor(highScore)}`, {\n            fontFamily: '\"Press Start 2P\", monospace',\n            fontSize: '18px',\n            color: '#ffffff',\n            stroke: '#000000',\n            strokeThickness: 3\n          }).setOrigin(0.5);\n          highScoreText.setShadow(2, 2, '#000000', 3, true, true);\n        }\n      }\n    } catch (error) {\n      console.error('Error checking high score:', error);\n      // Fallback to localStorage\n      const highScore = this.getHighScore();\n      this.isNewHighScore = this.finalScore > highScore;\n      if (this.isNewHighScore) {\n        this.setHighScore(this.finalScore);\n        this.add.text(320, 685, 'NEW HIGH SCORE!', {\n          fontFamily: '\"Press Start 2P\", monospace',\n          fontSize: '22px',\n          color: '#ffff00',\n          stroke: '#000000',\n          strokeThickness: 4\n        }).setOrigin(0.5);\n      } else {\n        this.add.text(320, 685, `HIGH SCORE: ${Math.floor(highScore)}`, {\n          fontFamily: '\"Press Start 2P\", monospace',\n          fontSize: '18px',\n          color: '#ffffff',\n          stroke: '#000000',\n          strokeThickness: 3\n        }).setOrigin(0.5);\n      }\n    }\n  }\n  \n  \n  \n  createMenuOptions() {\n    // Initially hidden - will be shown after name input or high score check\n  }\n  \n  async autoSubmitScore() {\n    if (this.hasSavedScore) return;\n    this.hasSavedScore = true;\n    \n    // Automatically use \"Player 1\" as the name\n    const finalName = 'Player 1';\n    \n    try {\n      // Submit score to database\n      const response = await fetch('/api/leaderboard', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          playerName: finalName,\n          score: Math.floor(this.finalScore)\n        })\n      });\n      \n      if (response.ok) {\n        console.log('Score saved to leaderboard');\n      } else {\n        console.error('Failed to save score to leaderboard');\n      }\n    } catch (error) {\n      console.error('Error saving score:', error);\n    } finally {\n      // ALWAYS show menu options, even if score submission fails\n      this.showMenuOptions();\n    }\n  }\n  \n  // Keep for compatibility but won't be used\n  showNameInput() {\n    // This function is no longer used but kept for compatibility\n    this.autoSubmitScore();\n  }\n  \n  async submitScore() {\n    if (this.hasSavedScore) return; // Prevent double submission\n    this.hasSavedScore = true;\n    this.isEnteringName = false;\n    \n    const finalName = this.playerName || 'PLAYER';\n    \n    try {\n      // Submit score to database\n      const response = await fetch('/api/leaderboard', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          playerName: finalName,\n          score: Math.floor(this.finalScore)\n        })\n      });\n      \n      if (response.ok) {\n        console.log('Score saved to leaderboard');\n      } else {\n        console.error('Failed to save score to leaderboard');\n      }\n    } catch (error) {\n      console.error('Error saving score:', error);\n    }\n    \n    // Clear the name input UI\n    if (this.nameInputText) this.nameInputText.destroy();\n    if (this.namePromptText) this.namePromptText.destroy();\n    if (this.instructionText) this.instructionText.destroy();\n    \n    // Show menu options after name submission\n    this.showMenuOptions();\n  }\n  \n  showMenuOptions() {\n    // Don't create duplicate menu options\n    if (this.playAgainText || this.mainMenuText) {\n      return;\n    }\n    \n    // Menu options - positioned higher since no name input\n    this.playAgainText = this.add.text(320, 760, 'PLAY AGAIN', {\n      fontFamily: '\"Press Start 2P\", monospace',\n      fontSize: '20px',\n      color: '#00ff00',\n      stroke: '#000000',\n      strokeThickness: 3\n    }).setOrigin(0.5);\n    this.playAgainText.setShadow(2, 2, '#000000', 3, true, true);\n    \n    this.mainMenuText = this.add.text(320, 800, 'MAIN MENU', {\n      fontFamily: '\"Press Start 2P\", monospace',\n      fontSize: '20px',\n      color: '#ffffff',\n      stroke: '#000000',\n      strokeThickness: 3\n    }).setOrigin(0.5);\n    this.mainMenuText.setShadow(2, 2, '#000000', 3, true, true);\n    \n    // Selection indicator\n    this.selector = this.add.text(200, 760, '>', {\n      fontFamily: '\"Press Start 2P\", monospace',\n      fontSize: '24px',\n      color: '#ffff00',\n      stroke: '#000000',\n      strokeThickness: 3\n    }).setOrigin(0.5);\n    this.selector.setShadow(2, 2, '#000000', 3, true, true);\n    \n    this.updateSelector();\n    this.setupMenuInteraction();\n  }\n  \n  updateSelector() {\n    if (!this.selector || !this.playAgainText || !this.mainMenuText) return;\n    \n    if (this.selectedOption === 0) {\n      this.selector.setY(760);\n      this.playAgainText.setColor('#00ff00');\n      this.mainMenuText.setColor('#ffffff');\n    } else {\n      this.selector.setY(800);\n      this.playAgainText.setColor('#ffffff');\n      this.mainMenuText.setColor('#00ff00');\n    }\n  }\n  \n  setupMenuInteraction() {\n    // Touch/click handling for menu options\n    if (this.playAgainText && this.mainMenuText) {\n      this.playAgainText.setInteractive({ useHandCursor: true });\n      this.mainMenuText.setInteractive({ useHandCursor: true });\n      \n      this.playAgainText.on('pointerdown', () => {\n        this.scene.start('Game');\n      });\n      \n      this.playAgainText.on('pointerover', () => {\n        this.selectedOption = 0;\n        this.updateSelector();\n      });\n      \n      this.mainMenuText.on('pointerdown', () => {\n        // Pass undefined music to let MainMenu know to create new music\n        this.scene.start('MainMenu', { menuMusic: undefined });\n      });\n      \n      this.mainMenuText.on('pointerover', () => {\n        this.selectedOption = 1;\n        this.updateSelector();\n      });\n    }\n  }\n  \n  setupInput() {\n    // Input handling - keyboard (simplified - menu navigation only)\n    this.upKey = this.input.keyboard?.addKey('UP');\n    this.downKey = this.input.keyboard?.addKey('DOWN');\n    this.spaceKey = this.input.keyboard?.addKey('SPACE');\n    this.enterKey = this.input.keyboard?.addKey('ENTER');\n    \n    // Handle menu navigation\n    this.input.keyboard?.on('keydown', (event: any) => {\n      if (event.key === 'ArrowUp') {\n        this.selectedOption = 0;\n        this.updateSelector();\n      } else if (event.key === 'ArrowDown') {\n        this.selectedOption = 1;\n        this.updateSelector();\n      } else if (event.key === ' ' || event.key === 'Enter') {\n        this.selectOption();\n      }\n    });\n  }\n  \n  \n  selectOption() {\n    if (this.selectedOption === 0) {\n      this.scene.start('Game');\n    } else {\n      // Pass undefined music to let MainMenu know to create new music\n      this.scene.start('MainMenu', { menuMusic: undefined });\n    }\n  }\n\n  getHighScore(): number {\n    return parseFloat(localStorage.getItem('zombieSkaterHighScore') || '0');\n  }\n\n  setHighScore(score: number): void {\n    localStorage.setItem('zombieSkaterHighScore', score.toString());\n  }\n}","size_bytes":14703},"client/src/game/scenes/Preload.ts":{"content":"import Phaser from 'phaser';\n// All visual asset imports removed - clean slate for new assets\n\nexport default class Preload extends Phaser.Scene {\n  constructor() {\n    super('Preload');\n  }\n\n  preload() {\n    // Load new character select and background images\n    this.load.image('zombie_character', 'assets/zombie_character.png');\n    this.load.image('stacy_character', '/images/stacy-select.png');\n    this.load.image('red_sky_bg', 'assets/red_sky_bg.png');\n    \n    // Load zombie skater assets\n    this.load.image('zombie_idle', '/images/zombie-idle.png');\n    this.load.image('zombie_jump', '/sprites/jump_static.png');\n    this.load.image('zombie_trick', '/sprites/trick_sprite.png');\n    \n    // Load Stacy skater assets\n    this.load.image('stacy_idle', '/images/stacy-idle.png');\n    this.load.image('stacy_jump', '/images/stacy-jump.png');\n    this.load.image('stacy_trick', '/images/stacy-trick.png');\n    \n    // Keep old skater references for compatibility\n    this.load.image('skater_idle', 'assets/skater_idle.png');\n    this.load.image('skater_jump', 'assets/skater_idle.png'); // Use same image for now\n    this.load.image('skater_trick', 'assets/skater_idle.png'); // Use same image for now\n    \n    // Load single jump sprite - no animation, just one image\n    this.load.image('jump_static', 'sprites/jump_static.png');\n    \n    // Load trick sprite for swipe-up tricks\n    this.load.image('trick_sprite', 'sprites/trick_sprite.png');\n    \n    // Load obstacle images\n    this.load.image('obstacle_cone', 'assets/obstacle_cone.png');\n    this.load.image('obstacle_trash', 'assets/obstacle_trash.png');\n    this.load.image('obstacle_crash', 'assets/obstacle_crash.png');\n    this.load.image('obstacle_zombie', 'assets/obstacle_zombie.png');\n    this.load.image('obstacle_skulls', 'assets/obstacle_skulls.png');\n    \n    // Load enemy images\n    this.load.image('enemy_eyeball', 'assets/enemy_eyeball.png');\n    this.load.image('enemy_robot', 'assets/enemy_robot.png');\n    this.load.image('explosion', 'assets/explosion.png');\n    this.load.image('arrow_indicator', 'assets/arrow_indicator.png');\n    \n    // Load heart image for life system\n    this.load.image('heart', 'assets/heart.png');\n    this.load.image('life_icon', 'assets/life_icon.png');\n    \n    // Load health pickup\n    this.load.image('sandwich', 'assets/sandwich.png');\n    \n    // Load energy drink power-up\n    this.load.image('energy_drink', 'assets/energy_drink.png');\n    this.load.image('energy_warning', 'assets/energy_warning.png');\n    this.load.image('maximum_text', 'assets/maximum_text.png');\n    \n    // Load game over background\n    this.load.image('game_over_bg', 'assets/game_over_bg.png');\n    \n    // Load star assets\n    this.load.image('star_icon', 'assets/star_icon.png');\n    this.load.image('star_counter_icon', 'assets/star_counter_icon.png');\n    this.load.image('star_single', 'assets/star_single.png');\n    this.load.image('star_ten', 'assets/star_ten.png');\n    this.load.image('sandwich_arrow', 'assets/sandwich_arrow.png');\n    \n    // Load city background\n    this.load.image('city_background', 'assets/city_background.png');\n    \n    // Load splash screen images\n    this.load.image('slime_splash', 'assets/slime_splash.png');\n    this.load.image('soul_arcade', 'assets/soul_arcade.png');\n    this.load.image('soul_arcade_logo', 'soul_arcade_logo.png');\n    this.load.image('soul_arcade_new_logo', 'assets/soul_arcade_new_logo.png');\n    this.load.image('warning_skull', 'assets/warning_skull.png');\n    this.load.image('starfall_presents', 'assets/starfall_presents.png');\n    this.load.image('graffiti_bg', 'assets/graffiti_bg.png');\n    \n    // Load menu assets\n    this.load.image('menu_background', 'assets/menu_background.png');\n    this.load.image('play_button', 'assets/play_button.png');\n    this.load.image('options_button', 'assets/options_button.png');\n    \n    // Load menu music\n    this.load.audio('menu_music', 'assets/menu_music.m4a');\n    \n    // Load gameplay background music\n    this.load.audio('broken_code', 'assets/broken_code.m4a');\n    this.load.audio('undead_empire', 'assets/undead_empire.m4a');\n    \n    // Load sound effects\n    this.load.audio('star_single_sfx', 'assets/star_single_sfx.wav');\n    this.load.audio('star_cluster_sfx', 'assets/star_cluster_sfx.wav');\n    this.load.audio('bite_sfx', 'assets/bite_sfx.m4a');\n    this.load.audio('energy_drink_sfx', 'assets/energy_drink_sfx.wav');\n    this.load.audio('enemy_explosion', 'sounds/enemy_explosion.m4a');\n    this.load.audio('combo_sfx', 'sounds/combo.m4a');\n    this.load.audio('jump_sfx', 'sounds/jump.m4a');\n    this.load.audio('new_explosion_sfx', 'sounds/new_explosion.m4a');\n    this.load.audio('new_star_sfx', 'sounds/new_star_single.m4a');\n    \n    // Loading silently without text\n  }\n\n  create() {\n    // Create a simple white pixel texture for particles\n    const pixelGraphics = this.add.graphics();\n    pixelGraphics.fillStyle(0xFFFFFF);\n    pixelGraphics.fillRect(0, 0, 4, 4);\n    pixelGraphics.generateTexture('pixel', 4, 4);\n    pixelGraphics.destroy();\n\n    // Images are now loaded from files instead of generated\n\n    // Create skater animations\n    this.anims.create({\n      key: 'skate',\n      frames: [{ key: 'skater_idle' }],\n      frameRate: 8,\n      repeat: -1\n    });\n\n    this.anims.create({\n      key: 'jump',\n      frames: [{ key: 'skater_jump' }],\n      frameRate: 8,\n      repeat: 0\n    });\n\n    this.anims.create({\n      key: 'trick',\n      frames: [{ key: 'skater_trick' }],\n      frameRate: 8,\n      repeat: 0\n    });\n\n// console.log('Zombie skater loaded with animations');\n    \n    // Start with splash screens\n    this.scene.start('Splash1');\n  }\n\n  // Removed all asset creation methods - clean slate for new assets\n}\n","size_bytes":5764},"client/src/game/systems/controls.ts":{"content":"import Phaser from 'phaser';\n\nexport function setupControls(scene: Phaser.Scene) {\n  let lastInput = 0;\n  let justTapped = false;\n  let justSwipedUp = false;\n  let justSwipedDown = false;\n  \n  // Swipe detection variables\n  let startX = 0;\n  let startY = 0;\n  let startTime = 0;\n  let isPointerDown = false;\n  \n  // Swipe detection thresholds\n  const SWIPE_THRESHOLD = 50; // Minimum distance for a swipe (pixels)\n  const SWIPE_TIME_THRESHOLD = 300; // Maximum time for a swipe (ms)\n  const SWIPE_VELOCITY_THRESHOLD = 0.3; // Minimum velocity (pixels/ms)\n\n  // Disable context menu\n  scene.input.mouse?.disableContextMenu();\n\n  // Setup touch/click events with swipe detection\n  scene.input.on('pointerdown', (pointer: Phaser.Input.Pointer) => {\n    const now = scene.time.now;\n    if (now - lastInput > 50) { // Shorter debounce for more responsive controls\n      // Record start position for swipe detection\n      startX = pointer.x;\n      startY = pointer.y;\n      startTime = now;\n      isPointerDown = true;\n      \n      console.log('Pointer down at:', startX, startY);\n    }\n  });\n  \n  scene.input.on('pointerup', (pointer: Phaser.Input.Pointer) => {\n    if (!isPointerDown) return;\n    \n    const now = scene.time.now;\n    const deltaX = pointer.x - startX;\n    const deltaY = startY - pointer.y; // Inverted for upward swipe\n    const deltaTime = now - startTime;\n    const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n    const velocity = deltaTime > 0 ? distance / deltaTime : 0;\n    \n    console.log(`Pointer up - deltaY: ${deltaY}, deltaTime: ${deltaTime}, distance: ${distance}, velocity: ${velocity}`);\n    \n    // Check if it's a swipe up\n    if (deltaY > SWIPE_THRESHOLD && \n        deltaTime < SWIPE_TIME_THRESHOLD && \n        velocity > SWIPE_VELOCITY_THRESHOLD &&\n        Math.abs(deltaX) < deltaY) { // Ensure it's more vertical than horizontal\n      \n      justSwipedUp = true;\n      lastInput = now;\n      console.log('SWIPE UP detected!');\n      \n    } else if (-deltaY > SWIPE_THRESHOLD && \n               deltaTime < SWIPE_TIME_THRESHOLD && \n               velocity > SWIPE_VELOCITY_THRESHOLD &&\n               Math.abs(deltaX) < Math.abs(deltaY)) { // Check for swipe down\n      \n      justSwipedDown = true;\n      lastInput = now;\n      console.log('SWIPE DOWN detected!');\n      \n    } else if (distance < 20) { \n      // It's a tap (minimal movement, any press duration)\n      justTapped = true;\n      lastInput = now;\n      console.log('TAP detected - duration:', deltaTime, 'ms');\n    }\n    \n    isPointerDown = false;\n  });\n  \n  // Cancel swipe detection if pointer moves out of bounds or is cancelled\n  scene.input.on('pointerout', () => {\n    isPointerDown = false;\n  });\n\n  return {\n    justTapped: () => {\n      // Keyboard input\n      const spaceKey = scene.input.keyboard?.addKey('SPACE');\n      const upKey = scene.input.keyboard?.addKey('UP');\n      const keyPressed = Phaser.Input.Keyboard.JustDown(spaceKey!) || Phaser.Input.Keyboard.JustDown(upKey!);\n      \n      // Check for touch input or keyboard\n      if (keyPressed || justTapped) {\n        justTapped = false; // Reset tap flag\n        console.log('Jump triggered - key:', keyPressed, 'tap:', !keyPressed);\n        return true;\n      }\n      \n      return false;\n    },\n    \n    justSwipedUp: () => {\n      if (justSwipedUp) {\n        justSwipedUp = false; // Reset swipe flag\n        console.log('Trick triggered by swipe up!');\n        return true;\n      }\n      return false;\n    },\n    \n    justSwipedDown: () => {\n      if (justSwipedDown) {\n        justSwipedDown = false; // Reset swipe flag\n        console.log('Stomp attack triggered by swipe down!');\n        return true;\n      }\n      return false;\n    },\n    \n    holding: () => false\n  };\n}\n","size_bytes":3766},"client/src/game/systems/obstacles.ts":{"content":"import Phaser from 'phaser';\n\nexport class ObstacleManager {\n  private scene: Phaser.Scene;\n  private obstacles: Phaser.Physics.Arcade.Group;\n  private lastObstacleX = 0;\n  private spawnTimer = 0;\n  private spawnInterval = 2000; // 2 seconds\n\n  constructor(scene: Phaser.Scene) {\n    this.scene = scene;\n    this.obstacles = scene.physics.add.group();\n    this.lastObstacleX = 300; // Start spawning after initial area\n  }\n\n  update(delta: number) {\n    this.spawnTimer += delta;\n    \n    if (this.spawnTimer >= this.spawnInterval) {\n      this.spawnObstacle();\n      this.spawnTimer = 0;\n      \n      // Gradually decrease spawn interval for increased difficulty\n      this.spawnInterval = Math.max(1000, this.spawnInterval - 10);\n    }\n\n    // Remove obstacles that are far behind the camera\n    const cameraX = this.scene.cameras.main.scrollX;\n    this.obstacles.children.entries.forEach(obstacle => {\n      if ((obstacle as any).x < cameraX - 100) {\n        obstacle.destroy();\n      }\n    });\n  }\n\n  spawnObstacle() {\n    const cameraX = this.scene.cameras.main.scrollX;\n    const spawnX = Math.max(this.lastObstacleX + Phaser.Math.Between(100, 200), cameraX + 250);\n    \n    // Create obstacle\n    const obstacle = this.obstacles.create(spawnX, 116, 'obstacles');\n    obstacle.setOrigin(0.5, 1);\n    obstacle.body.setImmovable(true);\n    obstacle.body.setSize(12, 20); // Smaller hitbox for fairer gameplay\n    \n    this.lastObstacleX = spawnX;\n    \n    console.log(`Spawned obstacle at x: ${spawnX}`);\n  }\n\n  getObstacles(): Phaser.Physics.Arcade.Group {\n    return this.obstacles;\n  }\n}\n","size_bytes":1595},"client/src/game/systems/score.ts":{"content":"export class Score {\n  value = 0;\n  \n  addDistance(distance: number) {\n    this.value += distance * 0.1; // Distance points\n  }\n  \n  addTrick(points: number) {\n    this.value += points;\n  }\n  \n  addGrindTick() {\n    this.value += 1; // Small constant grind bonus\n  }\n  \n  reset() {\n    this.value = 0;\n  }\n}\n","size_bytes":308},"client/src/lib/stores/useAudio.tsx":{"content":"import { create } from \"zustand\";\n\ninterface AudioState {\n  backgroundMusic: HTMLAudioElement | null;\n  hitSound: HTMLAudioElement | null;\n  successSound: HTMLAudioElement | null;\n  isMuted: boolean;\n  \n  // Setter functions\n  setBackgroundMusic: (music: HTMLAudioElement) => void;\n  setHitSound: (sound: HTMLAudioElement) => void;\n  setSuccessSound: (sound: HTMLAudioElement) => void;\n  \n  // Control functions\n  toggleMute: () => void;\n  playHit: () => void;\n  playSuccess: () => void;\n}\n\nexport const useAudio = create<AudioState>((set, get) => ({\n  backgroundMusic: null,\n  hitSound: null,\n  successSound: null,\n  isMuted: true, // Start muted by default\n  \n  setBackgroundMusic: (music) => set({ backgroundMusic: music }),\n  setHitSound: (sound) => set({ hitSound: sound }),\n  setSuccessSound: (sound) => set({ successSound: sound }),\n  \n  toggleMute: () => {\n    const { isMuted } = get();\n    const newMutedState = !isMuted;\n    \n    // Just update the muted state\n    set({ isMuted: newMutedState });\n    \n    // Log the change\n    console.log(`Sound ${newMutedState ? 'muted' : 'unmuted'}`);\n  },\n  \n  playHit: () => {\n    const { hitSound, isMuted } = get();\n    if (hitSound) {\n      // If sound is muted, don't play anything\n      if (isMuted) {\n        console.log(\"Hit sound skipped (muted)\");\n        return;\n      }\n      \n      // Clone the sound to allow overlapping playback\n      const soundClone = hitSound.cloneNode() as HTMLAudioElement;\n      soundClone.volume = 0.3;\n      soundClone.play().catch(error => {\n        console.log(\"Hit sound play prevented:\", error);\n      });\n    }\n  },\n  \n  playSuccess: () => {\n    const { successSound, isMuted } = get();\n    if (successSound) {\n      // If sound is muted, don't play anything\n      if (isMuted) {\n        console.log(\"Success sound skipped (muted)\");\n        return;\n      }\n      \n      successSound.currentTime = 0;\n      successSound.play().catch(error => {\n        console.log(\"Success sound play prevented:\", error);\n      });\n    }\n  }\n}));\n","size_bytes":2025},"client/src/lib/stores/useGame.tsx":{"content":"import { create } from \"zustand\";\nimport { subscribeWithSelector } from \"zustand/middleware\";\n\nexport type GamePhase = \"ready\" | \"playing\" | \"ended\";\n\ninterface GameState {\n  phase: GamePhase;\n  \n  // Actions\n  start: () => void;\n  restart: () => void;\n  end: () => void;\n}\n\nexport const useGame = create<GameState>()(\n  subscribeWithSelector((set) => ({\n    phase: \"ready\",\n    \n    start: () => {\n      set((state) => {\n        // Only transition from ready to playing\n        if (state.phase === \"ready\") {\n          return { phase: \"playing\" };\n        }\n        return {};\n      });\n    },\n    \n    restart: () => {\n      set(() => ({ phase: \"ready\" }));\n    },\n    \n    end: () => {\n      set((state) => {\n        // Only transition from playing to ended\n        if (state.phase === \"playing\") {\n          return { phase: \"ended\" };\n        }\n        return {};\n      });\n    }\n  }))\n);\n","size_bytes":893},"client/src/art/generateNYC.ts":{"content":"import { PAL } from './palette';\n\nfunction hex(s:string){ const v=parseInt(s.slice(1),16); return [(v>>16)&255,(v>>8)&255,(v)&255]; }\nfunction dither(ctx: CanvasRenderingContext2D, x:number,y:number,w:number,h:number, c0:string,c1:string){\n  const p=ctx.createImageData(w,h); const A=hex(c0), B=hex(c1);\n  for(let j=0;j<h;j++) for(let i=0;i<w;i++){\n    const idx=(j*w+i)*4, b=((i&1)^(j&1))?1:0, C=b?A:B;\n    p.data[idx]=C[0]; p.data[idx+1]=C[1]; p.data[idx+2]=C[2]; p.data[idx+3]=255;\n  }\n  ctx.putImageData(p,x,y);\n}\n\nexport function makeNYCTiles(scene: Phaser.Scene) {\n  const tw=32, th=32, cols=8, rows=4; // Double resolution for HD\n  const sheet=document.createElement('canvas'); sheet.width=cols*tw; sheet.height=rows*th;\n  const g=sheet.getContext('2d')!; g.imageSmoothingEnabled=false;\n\n  // 0: asphalt base (dither + cracks) - HD version\n  dither(g, 0,0,tw,th, PAL.asphalt0, PAL.asphalt1);\n  g.strokeStyle = PAL.asphaltCrack; g.lineWidth=2;\n  g.beginPath(); g.moveTo(6,24); g.lineTo(20,16); g.lineTo(28,20); g.stroke();\n\n  // 1: asphalt with lane paint line - HD version\n  dither(g, 32,0,tw,th, PAL.asphalt0, PAL.asphalt1);\n  g.fillStyle = PAL.lanePaint; g.fillRect(32+14,0,4,32);\n\n  // 2: crosswalk (diagonal) - HD version\n  dither(g, 64,0,tw,th, PAL.asphalt0, PAL.asphalt1);\n  g.fillStyle = PAL.lanePaint; for(let x=-12;x<32;x+=10) g.fillRect(64+x,0,6,32);\n\n  // 3: manhole - HD version\n  dither(g, 96,0,tw,th, PAL.asphalt0, PAL.asphalt1);\n  g.fillStyle = '#404650'; g.fillRect(96+8,8,16,16);\n  g.fillStyle = '#2d323a'; for (let i=96+10;i<96+22;i+=4) g.fillRect(i,12,2,8);\n\n  // 4: sidewalk slab - HD version\n  dither(g, 0,32,tw,th, PAL.sidewalk0, PAL.sidewalk1);\n  g.strokeStyle = '#4c4c56'; g.lineWidth=2; g.strokeRect(1,33,tw-2,th-2);\n  g.beginPath(); g.moveTo(0,32+16); g.lineTo(32,32+16); g.stroke();\n\n  // 5: curb (top + face) - HD version\n  dither(g, 32,32,tw,th, PAL.curbTop, PAL.sidewalk1);\n  g.fillStyle = PAL.curbFace; g.fillRect(32,32+20,32,12);\n\n  // 6: debris (papers) - HD version\n  dither(g, 64,32,tw,th, PAL.asphalt0, PAL.asphalt1);\n  g.fillStyle = '#cfcfd4'; g.fillRect(64+6,32+22,6,4); g.fillRect(64+22,32+12,4,4);\n\n  // 7: hazard edge - HD version\n  dither(g, 96,32,tw,th, PAL.asphalt0, PAL.asphalt1);\n  g.fillStyle = PAL.hazard; for(let i=0;i<32;i+=8) g.fillRect(96+i,32+24,4,8);\n\n  scene.textures.addCanvas('nyc_tiles', sheet);\n\n  // HD Rail 96x12 + posts\n  const rail=document.createElement('canvas'); rail.width=96; rail.height=12;\n  const r=rail.getContext('2d')!; r.imageSmoothingEnabled=false;\n  r.fillStyle = PAL.steel; r.fillRect(0,4,96,4);\n  r.fillStyle = '#2c3942'; r.fillRect(0,2,96,2);\n  [12,48,84].forEach(x=>r.fillRect(x,6,4,6));\n  scene.textures.addCanvas('rail', rail);\n\n  // HD Barricade 32x48\n  const ob=document.createElement('canvas'); ob.width=32; ob.height=48;\n  const o=ob.getContext('2d')!; o.imageSmoothingEnabled=false;\n  dither(o, 0,0,32,48, '#402a1f', '#6b3f28');\n  o.fillStyle = PAL.hazard; o.fillRect(4,12,24,6); o.fillRect(4,28,24,6);\n  scene.textures.addCanvas('barricade', ob);\n}\n\nexport function makeSkyline(scene: Phaser.Scene) {\n  const w=240, h=80; const c=document.createElement('canvas'); c.width=w; c.height=h;\n  const ctx=c.getContext('2d')!; ctx.imageSmoothingEnabled=false;\n\n  // banded sky\n  for(let y=0;y<h;y++){\n    const t=y/h; ctx.fillStyle = t<0.33?PAL.bgSky0 : t<0.66?PAL.bgSky1 : PAL.bgSky2;\n    ctx.fillRect(0,y,w,1);\n  }\n  // jagged skyline + broken windows\n  const rnd=(a:number,b:number)=>Math.floor(a+Math.random()*(b-a));\n  for (let i=0;i<12;i++){\n    const bw=rnd(12,30), bh=rnd(18,50), bx=rnd(-10,w-10), by=h-bh;\n    ctx.fillStyle = PAL.bldgDark; ctx.fillRect(bx,by,bw,bh);\n    // missing roof chunks\n    ctx.clearRect(bx+rnd(1,bw-4), by-2, rnd(2,4), 3);\n    // sparse window glow\n    ctx.fillStyle = '#d7872f';\n    for (let y2=by+4; y2<by+bh-4; y2+=6)\n      for (let x2=bx+3; x2<bx+bw-3; x2+=6)\n        if (Math.random()<0.12) ctx.fillRect(x2,y2,1,2);\n  }\n  scene.textures.addCanvas('skyline', c);\n}","size_bytes":3991},"client/src/art/palette.ts":{"content":"export const PAL = {\n  // sky\n  bgSky0: '#61c3b3',\n  bgSky1: '#4aa89a',\n  bgSky2: '#397f74',\n  // skyline\n  bldgDark: '#0d1b26',\n  bldgMid:  '#132634',\n  // street\n  asphalt0: '#2b2c33',\n  asphalt1: '#3a3c45',\n  asphaltCrack: '#1f2026',\n  lanePaint: '#cfcf7a',\n  // sidewalk / curb\n  sidewalk0: '#6f6f7a',\n  sidewalk1: '#8a8a95',\n  curbTop:   '#a7a7b4',\n  curbFace:  '#5a5a65',\n  // metal / hazard\n  steel:  '#5d707b',\n  hazard: '#f2a130',\n  // accents\n  crown:  '#f7b51b'\n};","size_bytes":475},"client/src/art/spriteFromImage.ts":{"content":"// Auto-crop a subject out of the image (uses corner color as \"bg\") then scale to 'target'\nexport async function cropAndMakeTexture(\n  scene: Phaser.Scene, inKey: string, outKey: string, target = 96\n) {\n  const tex = scene.textures.get(inKey);\n  const img = tex.getSourceImage() as HTMLImageElement;\n  const w = img.width, h = img.height;\n\n  const c = document.createElement('canvas'); c.width = w; c.height = h;\n  const ctx = c.getContext('2d')!; ctx.imageSmoothingEnabled = false;\n  ctx.drawImage(img, 0, 0);\n\n  const bg = ctx.getImageData(0, 0, 1, 1).data;\n  const isBg = (r:number,g:number,b:number,a:number) => {\n    if (a < 5) return true;\n    const dr=r-bg[0], dg=g-bg[1], db=b-bg[2];\n    return (dr*dr + dg*dg + db*db) < 18*18;\n  };\n\n  const data = ctx.getImageData(0,0,w,h).data;\n  let minX=w, minY=h, maxX=0, maxY=0, found=false;\n  for (let y=0;y<h;y++) for (let x=0;x<w;x++){\n    const i=(y*w+x)*4; if (!isBg(data[i],data[i+1],data[i+2],data[i+3])) {\n      found=true; if(x<minX)minX=x; if(y<minY)minY=y; if(x>maxX)maxX=x; if(y>maxY)maxY=y;\n    }\n  }\n  if (!found) throw new Error('No foreground found for sprite.');\n\n  const sw=maxX-minX+1, sh=maxY-minY+1, side=Math.max(sw,sh);\n  const c2 = document.createElement('canvas'); c2.width=side; c2.height=side;\n  const ctx2=c2.getContext('2d')!; ctx2.imageSmoothingEnabled=false;\n  const ox=Math.floor((side-sw)/2), oy=Math.floor((side-sh)/2);\n  ctx2.drawImage(c, minX, minY, sw, sh, ox, oy, sw, sh);\n\n  const c3=document.createElement('canvas'); c3.width=target; c3.height=target;\n  const ctx3=c3.getContext('2d')!; ctx3.imageSmoothingEnabled=false;\n  ctx3.drawImage(c2, 0, 0, side, side, 0, 0, target, target);\n\n  scene.textures.addCanvas(outKey, c3);\n}\n\n// Build small lean/tilt frames from a base texture to simulate a skate loop.\nexport function synthesizeLeanFrames(\n  scene: Phaser.Scene, baseKey: string, framePrefix: string, angles = [-4,-2,0,2,4,2]\n) {\n  const base = scene.textures.get(baseKey).getSourceImage() as HTMLCanvasElement|HTMLImageElement;\n  angles.forEach((deg,idx)=>{\n    const s = 96, pad = 4;\n    const c = document.createElement('canvas'); c.width=s+pad*2; c.height=s+pad*2;\n    const ctx=c.getContext('2d')!; ctx.imageSmoothingEnabled=false;\n    ctx.translate((s+pad*2)/2, (s+pad*2)/2);\n    ctx.rotate(deg*Math.PI/180);\n    ctx.drawImage(base, -s/2, -s/2);\n    scene.textures.addCanvas(`${framePrefix}_${idx}`, c);\n  });\n}","size_bytes":2408},"client/src/game/utils/BitmapText.ts":{"content":"// HD 2D Bitmap Font Renderer for pixel-perfect text\nexport class BitmapText {\n  private scene: Phaser.Scene;\n  private graphics: Phaser.GameObjects.Graphics;\n  private x: number;\n  private y: number;\n  private text: string;\n  private color: number;\n  \n  // 8x8 pixel font bitmap (simplified for HD clarity)\n  private static readonly FONT_DATA: { [key: string]: number[][] } = {\n    'A': [\n      [0,1,1,1,0],\n      [1,0,0,0,1],\n      [1,1,1,1,1],\n      [1,0,0,0,1],\n      [1,0,0,0,1]\n    ],\n    'B': [\n      [1,1,1,1,0],\n      [1,0,0,0,1],\n      [1,1,1,1,0],\n      [1,0,0,0,1],\n      [1,1,1,1,0]\n    ],\n    'C': [\n      [0,1,1,1,0],\n      [1,0,0,0,1],\n      [1,0,0,0,0],\n      [1,0,0,0,1],\n      [0,1,1,1,0]\n    ],\n    'E': [\n      [1,1,1,1,1],\n      [1,0,0,0,0],\n      [1,1,1,0,0],\n      [1,0,0,0,0],\n      [1,1,1,1,1]\n    ],\n    'O': [\n      [0,1,1,1,0],\n      [1,0,0,0,1],\n      [1,0,0,0,1],\n      [1,0,0,0,1],\n      [0,1,1,1,0]\n    ],\n    'R': [\n      [1,1,1,1,0],\n      [1,0,0,0,1],\n      [1,1,1,1,0],\n      [1,1,0,0,0],\n      [1,0,1,0,1]\n    ],\n    'S': [\n      [0,1,1,1,1],\n      [1,0,0,0,0],\n      [0,1,1,1,0],\n      [0,0,0,0,1],\n      [1,1,1,1,0]\n    ],\n    ':': [\n      [0,0,0,0,0],\n      [0,1,0,0,0],\n      [0,0,0,0,0],\n      [0,1,0,0,0],\n      [0,0,0,0,0]\n    ],\n    ' ': [\n      [0,0,0,0,0],\n      [0,0,0,0,0],\n      [0,0,0,0,0],\n      [0,0,0,0,0],\n      [0,0,0,0,0]\n    ],\n    '0': [[0,1,1,1,0],[1,0,0,0,1],[1,0,0,0,1],[1,0,0,0,1],[0,1,1,1,0]],\n    '1': [[0,0,1,0,0],[0,1,1,0,0],[0,0,1,0,0],[0,0,1,0,0],[0,1,1,1,0]],\n    '2': [[0,1,1,1,0],[1,0,0,0,1],[0,0,1,1,0],[0,1,0,0,0],[1,1,1,1,1]],\n    '3': [[0,1,1,1,0],[1,0,0,0,1],[0,0,1,1,0],[1,0,0,0,1],[0,1,1,1,0]],\n    '4': [[1,0,0,1,0],[1,0,0,1,0],[1,1,1,1,1],[0,0,0,1,0],[0,0,0,1,0]],\n    '5': [[1,1,1,1,1],[1,0,0,0,0],[1,1,1,1,0],[0,0,0,0,1],[1,1,1,1,0]],\n    '6': [[0,1,1,1,0],[1,0,0,0,0],[1,1,1,1,0],[1,0,0,0,1],[0,1,1,1,0]],\n    '7': [[1,1,1,1,1],[0,0,0,0,1],[0,0,0,1,0],[0,0,1,0,0],[0,1,0,0,0]],\n    '8': [[0,1,1,1,0],[1,0,0,0,1],[0,1,1,1,0],[1,0,0,0,1],[0,1,1,1,0]],\n    '9': [[0,1,1,1,0],[1,0,0,0,1],[0,1,1,1,1],[0,0,0,0,1],[0,1,1,1,0]],\n    'M': [[1,0,0,0,1],[1,1,0,1,1],[1,0,1,0,1],[1,0,0,0,1],[1,0,0,0,1]],\n    'X': [[1,0,0,0,1],[0,1,0,1,0],[0,0,1,0,0],[0,1,0,1,0],[1,0,0,0,1]],\n    'P': [[1,1,1,1,0],[1,0,0,0,1],[1,1,1,1,0],[1,0,0,0,0],[1,0,0,0,0]],\n    'J': [[1,1,1,1,1],[0,0,0,1,0],[0,0,0,1,0],[1,0,0,1,0],[0,1,1,0,0]],\n    'U': [[1,0,0,0,1],[1,0,0,0,1],[1,0,0,0,1],[1,0,0,0,1],[0,1,1,1,0]],\n    'N': [[1,0,0,0,1],[1,1,0,0,1],[1,0,1,0,1],[1,0,0,1,1],[1,0,0,0,1]],\n    'T': [[1,1,1,1,1],[0,0,1,0,0],[0,0,1,0,0],[0,0,1,0,0],[0,0,1,0,0]],\n    'H': [[1,0,0,0,1],[1,0,0,0,1],[1,1,1,1,1],[1,0,0,0,1],[1,0,0,0,1]],\n    'L': [[1,0,0,0,0],[1,0,0,0,0],[1,0,0,0,0],[1,0,0,0,0],[1,1,1,1,1]],\n    'D': [[1,1,1,1,0],[1,0,0,0,1],[1,0,0,0,1],[1,0,0,0,1],[1,1,1,1,0]],\n    'G': [[0,1,1,1,0],[1,0,0,0,0],[1,0,1,1,1],[1,0,0,0,1],[0,1,1,1,0]],\n    'I': [[1,1,1,1,1],[0,0,1,0,0],[0,0,1,0,0],[0,0,1,0,0],[1,1,1,1,1]]\n  };\n\n  constructor(scene: Phaser.Scene, x: number, y: number, text: string, color: number = 0xffffff) {\n    this.scene = scene;\n    this.x = x;\n    this.y = y;\n    this.text = text;\n    this.color = color;\n    \n    this.graphics = scene.add.graphics();\n    this.graphics.setDepth(100);\n    this.render();\n  }\n\n  setText(newText: string) {\n    this.text = newText;\n    this.render();\n  }\n\n  setPosition(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n    this.render();\n  }\n\n  private render() {\n    this.graphics.clear();\n    this.graphics.fillStyle(this.color);\n    \n    let currentX = this.x;\n    const pixelSize = 1; // 1 pixel per font pixel for crisp rendering\n    \n    for (let i = 0; i < this.text.length; i++) {\n      const char = this.text[i].toUpperCase();\n      const charData = BitmapText.FONT_DATA[char];\n      \n      if (charData) {\n        for (let row = 0; row < charData.length; row++) {\n          for (let col = 0; col < charData[row].length; col++) {\n            if (charData[row][col] === 1) {\n              this.graphics.fillRect(\n                currentX + col * pixelSize,\n                this.y + row * pixelSize,\n                pixelSize,\n                pixelSize\n              );\n            }\n          }\n        }\n      }\n      \n      currentX += 6 * pixelSize; // Character width + spacing\n    }\n  }\n\n  setScrollFactor(x: number, y?: number) {\n    this.graphics.setScrollFactor(x, y);\n  }\n\n  destroy() {\n    this.graphics.destroy();\n  }\n}","size_bytes":4448},"client/src/world/angledStreet.ts":{"content":"// Renders a wide visual street/sidewalk strip, then rotates it slightly.\n// Physics ground remains an invisible static rectangle at Y=160.\nexport function buildAngledStreet(scene: Phaser.Scene){\n  const group = scene.add.container(0, 80);\n  group.angle = -7;\n  group.setScrollFactor(1);\n  group.setDepth(5); // street above parallax (which sits at depth 0–2)\n\n  const addStrip = (texKey: string, y: number, alpha=1) => {\n    const s = scene.add.tileSprite(-40, y, 800, 32, texKey).setOrigin(0,0).setAlpha(alpha);\n    s.setScrollFactor(1); group.add(s); return s;\n  };\n\n  // swapped to the per-tile textures:\n  const sidewalk = addStrip('tile_sidewalk', 32);\n  const curb     = addStrip('tile_curb',     64);\n  const asphalt1 = addStrip('tile_asphalt',  96);\n  const asphalt2 = addStrip('tile_asphalt', 128);\n\n  const lanes    = addStrip('tile_lane',     96, 0.7);\n  const cross    = addStrip('tile_cross',    96, 0.25);\n  const debris   = addStrip('tile_debris',  128, 0.7);\n  const manhole  = addStrip('tile_manhole',  96, 0.9);\n\n  const update = (scrollX:number)=>{\n    [sidewalk, curb, asphalt1, asphalt2, lanes, cross, debris, manhole]\n      .forEach(s => s.tilePositionX = scrollX);\n  };\n\n  // Visual asphalt baseline y=f(x)\n  function visualGroundYFor(worldX: number){\n    const theta = Phaser.Math.DegToRad(group.angle);\n    const localY = 128; // lower asphalt strip Y inside the container\n    const base = group.y + localY * Math.cos(theta);\n    const delta = (worldX - group.x) * Math.sin(theta);\n    return base + delta;\n  }\n\n  return { group, update, visualGroundYFor };\n}","size_bytes":1587},"client/src/world/index.ts":{"content":"export { createSeamlessWorld as createWorld } from './seamlessBackground';","size_bytes":74},"client/src/world/palette.ts":{"content":"export const PAL = {\n  // night sky\n  sky0: '#274b8c', sky1: '#1f3d6e', sky2: '#162b4d',     // bluer night\n  star: '#ffecb3',\n\n  // skyline / ruins\n  bldg0: '#0b1a2a', bldg1: '#12304a', window: '#f1a340', // warmer windows\n\n  // road / sidewalk\n  asphalt0: '#2d303b', asphalt1: '#454a57', crack: '#1c1e25', lane: '#e2e28e',\n  sidewalk0: '#757c8b', sidewalk1: '#9aa2b2',\n  curbTop: '#b9c0cf', curbFace: '#646c7a',\n\n  // props\n  steel: '#6f8391', grime: '#3f4955', hazard: '#ffb648', cone: '#ff784f',\n  fence: '#345061'\n};","size_bytes":521},"client/src/world/parallax.ts":{"content":"import { PAL } from './palette';\n\nexport function buildParallax(scene: Phaser.Scene){\n  // Stars (tileSprite) — slow drift\n  const stars = scene.add.tileSprite(0, 0, 480, 160, createStars(scene)).setOrigin(0,0);\n  stars.setScrollFactor(0.05).setDepth(0);\n\n  // Skyline silhouettes (tileSprite)\n  const skyline = scene.add.tileSprite(0, 40, 480, 80, createSkyline(scene)).setOrigin(0,0);\n  skyline.setScrollFactor(0.2).setDepth(1);\n\n  // Foreground chain-link fence strip for depth\n  const fence = scene.add.tileSprite(0, 110, 480, 50, createFence(scene)).setOrigin(0,0);\n  fence.setScrollFactor(0.6).setAlpha(0.5).setDepth(2);\n\n  return { stars, skyline, fence };\n}\n\nfunction createStars(scene: Phaser.Scene){\n  const key='starsTex'; \n  if (scene.textures.exists(key)) return key;\n  const w=240,h=160,c=document.createElement('canvas'); c.width=w; c.height=h;\n  const g=c.getContext('2d')!; g.imageSmoothingEnabled=false;\n  // vertical bands\n  for(let y=0;y<h;y++){\n    const t=y/h; g.fillStyle=t<.33?PAL.sky0:t<.66?PAL.sky1:PAL.sky2; g.fillRect(0,y,w,1);\n  }\n  // scatter stars\n  g.fillStyle = PAL.star;\n  for(let i=0;i<90;i++){ const x=Math.random()*w|0, y=Math.random()*h|0; if (y>20) g.fillRect(x,y,1,1); }\n  scene.textures.addCanvas(key,c); return key;\n}\n\nfunction createSkyline(scene: Phaser.Scene){\n  const key='skylineTex'; \n  if (scene.textures.exists(key)) return key;\n  const w=240,h=80,c=document.createElement('canvas'); c.width=w; c.height=h;\n  const g=c.getContext('2d')!; g.imageSmoothingEnabled=false;\n  g.fillStyle='transparent'; g.clearRect(0,0,w,h);\n  const R=(a:number,b:number)=>Math.floor(a+Math.random()*(b-a));\n  for(let i=0;i<12;i++){\n    const bw=R(16,36), bh=R(18,60), bx=R(-10,w-10), by=h-bh;\n    g.fillStyle=PAL.bldg0; g.fillRect(bx,by,bw,bh);\n    // broken roof\n    g.clearRect(bx+R(2,bw-6), by-2, R(2,4), 3);\n    // windows\n    g.fillStyle=PAL.window;\n    for(let yy=by+6; yy<by+bh-4; yy+=6)\n      for(let xx=bx+4; xx<bx+bw-4; xx+=6)\n        if(Math.random()<0.12) g.fillRect(xx,yy,1,2);\n  }\n  scene.textures.addCanvas(key,c); return key;\n}\n\nfunction createFence(scene: Phaser.Scene){\n  const key='fenceTex'; \n  if (scene.textures.exists(key)) return key;\n  const w=240,h=50,c=document.createElement('canvas'); c.width=w; c.height=h;\n  const g=c.getContext('2d')!; g.imageSmoothingEnabled=false;\n  g.fillStyle = PAL.fence;  // diamond mesh\n  for(let y=0;y<h;y+=4) for(let x=((y/4)&1)*2; x<w; x+=4) g.fillRect(x,y,1,1);\n  scene.textures.addCanvas(key,c); return key;\n}","size_bytes":2501},"client/src/world/tiles32.ts":{"content":"import { PAL } from './palette';\n\nfunction hex(s:string){ const v=parseInt(s.slice(1),16); return [(v>>16)&255,(v>>8)&255,(v)&255]; }\nfunction dither(ctx:CanvasRenderingContext2D,x:number,y:number,w:number,h:number,a:string,b:string){\n  const A=hex(a),B=hex(b), img=ctx.createImageData(w,h);\n  for(let j=0;j<h;j++)for(let i=0;i<w;i++){\n    const idx=(j*w+i)*4, bit=((i&1)^(j&1))?1:0, C=bit?A:B;\n    img.data[idx]=C[0]; img.data[idx+1]=C[1]; img.data[idx+2]=C[2]; img.data[idx+3]=255;\n  }\n  ctx.putImageData(img,x,y);\n}\n\nexport function buildNYCAtlas32(scene: Phaser.Scene){\n  // Check if textures already exist to avoid duplication errors\n  if (scene.textures.exists('nyc32_atlas')) {\n    return;\n  }\n  \n  const tw=32, th=32, cols=8, rows=1;\n  const atlas=document.createElement('canvas'); atlas.width=cols*tw; atlas.height=rows*th;\n  const g=atlas.getContext('2d')!; g.imageSmoothingEnabled=false;\n\n  // 0: asphalt A\n  dither(g, 0,0,tw,th, PAL.asphalt0, PAL.asphalt1);\n  g.strokeStyle=PAL.crack; g.lineWidth=1;\n  g.beginPath(); g.moveTo(5,26); g.lineTo(16,20); g.lineTo(28,23); g.stroke();\n\n  // 1: asphalt + lane\n  dither(g, 32,0,tw,th, PAL.asphalt0, PAL.asphalt1);\n  g.fillStyle=PAL.lane; g.fillRect(32+15,0,2,32);\n\n  // 2: crosswalk\n  dither(g, 64,0,tw,th, PAL.asphalt0, PAL.asphalt1);\n  g.fillStyle=PAL.lane; for(let x=-10;x<32;x+=7) g.fillRect(64+x,0,4,32);\n\n  // 3: manhole\n  dither(g, 96,0,tw,th, PAL.asphalt0, PAL.asphalt1);\n  g.fillStyle='#404650'; g.fillRect(96+8,8,16,16);\n  g.fillStyle='#2d323a'; for(let x=96+10;x<96+22;x+=3) g.fillRect(x,12,1,8);\n\n  // 4: debris / grime\n  dither(g, 128,0,tw,th, PAL.asphalt0, PAL.asphalt1);\n  g.fillStyle='#cfcfd4'; g.fillRect(128+6,23,5,3); g.fillRect(128+23,14,3,2);\n  g.fillStyle=PAL.grime; g.fillRect(128+18,28,8,2);\n\n  // 5: sidewalk\n  dither(g, 160,0,tw,th, PAL.sidewalk0, PAL.sidewalk1);\n  g.strokeStyle = '#4c4c56'; g.strokeRect(160.5,0.5,tw-1,th-1);\n  g.beginPath(); g.moveTo(160,16); g.lineTo(192,16); g.stroke();\n\n  // 6: curb\n  dither(g, 192,0,tw,th, PAL.curbTop, PAL.sidewalk1);\n  g.fillStyle=PAL.curbFace; g.fillRect(192, 22, 32, 10);\n\n  // 7: hazard edge\n  dither(g, 224,0,tw,th, PAL.asphalt0, PAL.asphalt1);\n  g.fillStyle=PAL.hazard; for(let i=0;i<32;i+=6) g.fillRect(224+i,24,3,8);\n\n  // Register the atlas\n  scene.textures.addCanvas('nyc32_atlas', atlas);\n\n  // Slice frames into individual textures for tile use\n  const names = ['tile_asphalt','tile_lane','tile_cross','tile_manhole','tile_debris','tile_sidewalk','tile_curb','tile_hazard'];\n  const src = scene.textures.get('nyc32_atlas').getSourceImage() as HTMLCanvasElement;\n  names.forEach((name, i) => {\n    const c = document.createElement('canvas'); c.width=tw; c.height=th;\n    const ctx = c.getContext('2d')!; ctx.imageSmoothingEnabled=false;\n    ctx.drawImage(src, i*tw, 0, tw, th, 0, 0, tw, th);\n    scene.textures.addCanvas(name, c);\n  });\n\n  // --- Props (unchanged)\n  if (!scene.textures.exists('rail32')) {\n    const rail=document.createElement('canvas'); rail.width=32; rail.height=8;\n    const r=rail.getContext('2d')!; r.imageSmoothingEnabled=false;\n    r.fillStyle=PAL.steel; r.fillRect(0,3,32,2); r.fillStyle='#2c3942'; r.fillRect(0,2,32,1);\n    [6,16,26].forEach(x=>r.fillRect(x,5,2,3));\n    scene.textures.addCanvas('rail32', rail);\n  }\n\n  if (!scene.textures.exists('barricade32')) {\n    const bar=document.createElement('canvas'); bar.width=32; bar.height=24;\n    const bc=bar.getContext('2d')!; bc.imageSmoothingEnabled=false;\n    dither(bc,0,0,32,24,'#402a1f','#6b3f28'); bc.fillStyle=PAL.hazard;\n    bc.fillRect(4,7,24,4); bc.fillRect(4,15,24,4);\n    scene.textures.addCanvas('barricade32', bar);\n  }\n\n  if (!scene.textures.exists('cone16x24')) {\n    const cone=document.createElement('canvas'); cone.width=16; cone.height=24;\n    const cc=cone.getContext('2d')!; cc.imageSmoothingEnabled=false;\n    cc.fillStyle=PAL.cone; cc.fillRect(3,14,10,8); cc.fillRect(6,6,6,8);\n    cc.fillStyle=PAL.hazard; cc.fillRect(6,10,6,2);\n    scene.textures.addCanvas('cone16x24', cone);\n  }\n\n  if (!scene.textures.exists('cone_knock24x12')) {\n    const coneK=document.createElement('canvas'); coneK.width=24; coneK.height=12;\n    const ck=coneK.getContext('2d')!; ck.imageSmoothingEnabled=false;\n    ck.fillStyle=PAL.cone; ck.fillRect(2,6,16,5); ck.fillRect(16,3,6,3);\n    ck.fillStyle=PAL.hazard; ck.fillRect(4,7,12,2);\n    scene.textures.addCanvas('cone_knock24x12', coneK);\n  }\n\n  if (!scene.textures.exists('pothole32x12')) {\n    const hole=document.createElement('canvas'); hole.width=32; hole.height=12;\n    const hc=hole.getContext('2d')!; hc.imageSmoothingEnabled=false;\n    hc.fillStyle='#15171c'; hc.beginPath(); hc.ellipse(16,6,14,5,0,0,Math.PI*2); hc.fill();\n    hc.strokeStyle='#262a32'; hc.stroke();\n    scene.textures.addCanvas('pothole32x12', hole);\n  }\n\n  if (!scene.textures.exists('woodblock32x14')) {\n    const wood=document.createElement('canvas'); wood.width=32; wood.height=14;\n    const wc=wood.getContext('2d')!; wc.imageSmoothingEnabled=false;\n    wc.fillStyle='#6b3f28'; wc.fillRect(0,6,32,8);\n    wc.fillStyle='#402a1f'; wc.fillRect(0,10,32,2);\n    wc.fillStyle='#814d34'; wc.fillRect(4,4,8,2); wc.fillRect(18,5,7,2);\n    scene.textures.addCanvas('woodblock32x14', wood);\n  }\n}","size_bytes":5234},"client/src/game/scenes/GameOld.ts":{"content":"import Phaser from 'phaser';\n// All visual asset imports removed - clean slate for new assets\n\nexport default class Game extends Phaser.Scene {\n  // All game logic removed - clean slate for new assets and gameplay\n\n  constructor() {\n    super('Game');\n  }\n\n  create() {\n    // Placeholder scene - all assets removed for replacement\n    this.cameras.main.setBackgroundColor('#162b4d');\n    \n    this.add.text(120, 60, 'GAME SCENE', {\n      fontSize: '20px',\n      color: '#ffecb3',\n      fontFamily: 'monospace',\n      align: 'center'\n    }).setOrigin(0.5);\n\n    this.add.text(120, 90, 'ALL ASSETS REMOVED', {\n      fontSize: '12px',\n      color: '#b9c0cf',\n      fontFamily: 'monospace',\n      align: 'center'\n    }).setOrigin(0.5);\n\n    this.add.text(120, 110, 'READY FOR NEW ASSETS', {\n      fontSize: '12px',\n      color: '#e2e28e',\n      fontFamily: 'monospace',\n      align: 'center'\n    }).setOrigin(0.5);\n\n    this.add.text(120, 140, 'PRESS ESC TO RETURN TO MENU', {\n      fontSize: '8px',\n      color: '#646c7a',\n      fontFamily: 'monospace',\n      align: 'center'\n    }).setOrigin(0.5);\n\n    // ESC to return to main menu\n    this.input.keyboard!.on('keydown-ESC', () => {\n      this.scene.start('MainMenu');\n    });\n\n    console.log('Game scene loaded - all assets removed, ready for replacement');\n    \n    // Setup camera to follow player immediately\n    this.cameras.main.startFollow(this.player, true, 0.08, 0.08, -90, 0);\n\n    // Setup controls\n    this.cursors = setupControls(this);\n\n    // Create UI\n    this.createUI();\n\n    // Setup physics tweaks for GBA feel\n    this.setupGBAPhysics();\n\n    console.log('Game scene created successfully with new world system');\n  }\n\n  setupProperGround() {\n    // Ground is already properly set up in createWorld() - flat road at y=160\n    console.log('Using flat ground at Y: 160');\n  }\n\n  setupGBAPhysics() {\n    // Higher gravity for GBA runner feel\n    this.physics.world.gravity.y = 950;\n    \n    // Setup coyote time and jump buffer\n    this.time.addEvent({\n      loop: true,\n      delay: 16,\n      callback: () => {\n        const body = this.player.body as Phaser.Physics.Arcade.Body;\n        if (body.blocked.down) {\n          this.coyoteTime = this.COYOTE_MS;\n        } else {\n          this.coyoteTime = Math.max(0, this.coyoteTime - 16);\n        }\n        this.jumpBuffer = Math.max(0, this.jumpBuffer - 16);\n      }\n    });\n  }\n\n\n\n  createPlayer() {\n    // Use the first animated frame as the sprite - position lower for easier rail access\n    this.player = this.physics.add.sprite(40, 85, 'zombie_0'); // Lowered from 50 to 85\n    this.player.setCollideWorldBounds(false);\n    this.player.setDepth(10);\n    \n    // Adjust size for the new 96x96 HD sprite  \n    this.player.body!.setSize(32, 40); // Smaller hitbox to avoid getting stuck\n    this.player.setScale(0.6); // Scale down for mobile-friendly size\n    \n    // Configure physics for smooth movement - cast to correct type\n    const body = this.player.body as Phaser.Physics.Arcade.Body;\n    body.setDrag(0); // No air resistance\n    body.setMaxVelocity(300, 600); // Higher max velocity\n    body.immovable = false;\n    \n    // Tighter collider for better ground contact\n    this.player.setSize(20, 28).setOffset(14, 18); // hitbox smaller than 48x48 canvas\n    this.player.setBounce(0); // no floaty landing\n    \n    // Start skating animation\n    this.player.play('skate');\n    \n    // FORCE position update as well as velocity\n    this.player.setVelocityX(this.gameSpeed);\n    this.player.x += 1; // Force initial position change\n    \n    // Create contact shadow that follows the visual ground\n    this.shadow = this.add.ellipse(this.player.x, this.player.y + 18, 22, 6, 0x000000, 0.45)\n      .setDepth(2);\n    this.shadow.setScrollFactor(1);\n    \n    console.log('Player created at position:', this.player.x, 'Y:', this.player.y, 'with velocity:', this.gameSpeed);\n  }\n\n  setupCollisions() {\n    // Ground collision with process callback to allow horizontal movement\n    this.physics.add.collider(this.player, this.world.ground, (player: any, ground: any) => {\n      if (this.didTrickThisJump && this.comboTimer > 0) {\n        // Successful trick landing\n        this.score.addTrick(50 * this.comboMultiplier);\n        this.showTrickScore();\n        this.didTrickThisJump = false;\n      }\n    }, (player: any, ground: any) => {\n      // Process callback - return true to allow collision, but maintain horizontal velocity\n      this.player.setVelocityX(this.gameSpeed);\n      return true;\n    });\n\n    // Rail overlap for automatic grinding\n    this.physics.add.overlap(this.player, this.world.rails, (player: any, rail: any) => {\n      // Auto-grind when player first touches a rail\n      if (!this.isOnRail) {\n        console.log('Player touched rail - starting auto-grind! Rail Y:', rail.y, 'Player Y:', player.y);\n        this.startGrinding(rail);\n        this.currentRail = rail;\n      }\n    });\n\n    // Obstacle collision\n    this.physics.add.collider(this.player, this.world.obstacles, () => {\n      console.log('Player hit obstacle - game over');\n      this.gameOver();\n    });\n  }\n\n  createUI() {\n    // Create pixel-perfect bitmap text for HD 2D crisp rendering\n    this.scoreText = new BitmapText(this, 8, 8, 'SCORE: 0', 0xffffff);\n    this.scoreText.setScrollFactor(0);\n\n    this.comboText = new BitmapText(this, 8, 18, '', 0xffff00);\n    this.comboText.setScrollFactor(0);\n\n    // Use bitmap text for instructions for crisp HD 2D rendering\n    this.instructionsText = new BitmapText(this, 60, 140, 'TAP TO JUMP AUTO GRIND', 0xffffff);\n    this.instructionsText.setScrollFactor(0);\n  }\n\n  startGrinding(railGameObject?: any) {\n    if (!this.isOnRail) {\n      console.log('Starting grind! Locking to rail');\n      this.isOnRail = true;\n      this.currentRail = railGameObject;\n      \n      if (railGameObject) {\n        // Position player visibly on top of the rail and lock in place\n        this.player.y = railGameObject.y - 25; // Position clearly above rail\n        this.player.setVelocityY(0);\n        this.player.setGravityY(0);\n        console.log('Player locked on rail. Rail Y:', railGameObject.y, 'Player Y:', this.player.y);\n      }\n\n      // Play grind sound\n      this.playSound('grind');\n      \n      // Start/continue combo (only increase once per rail)\n      if (this.comboTimer <= 0) {\n        this.comboMultiplier = 1;\n      } else {\n        this.comboMultiplier += 1;\n      }\n      this.comboTimer = 3000; // 3 seconds\n      console.log('Grinding started! Combo:', this.comboMultiplier);\n    }\n  }\n\n  stopGrinding() {\n    if (this.isOnRail) {\n      console.log('Stopping grind - restoring gravity');\n      this.isOnRail = false;\n      this.currentRail = null;\n      this.player.setGravityY(600);\n    }\n  }\n\n  showTrickScore() {\n    const points = 50 * this.comboMultiplier;\n    \n    // Create crisp trick score popup\n    const trickText = this.add.text(this.player.x, this.player.y - 60, `+${points}`, {\n      fontFamily: 'Courier, \"Courier New\", monospace',\n      fontSize: '14px',\n      color: '#00ff00',\n      stroke: '#000000',\n      strokeThickness: 0\n    });\n    \n    trickText.setDepth(150);\n    \n    // Animate the popup\n    this.tweens.add({\n      targets: trickText,\n      y: trickText.y - 40,\n      alpha: 0,\n      duration: 1000,\n      ease: 'Power2',\n      onComplete: () => {\n        trickText.destroy();\n      }\n    });\n  }\n\n  playSound(key: string) {\n    // Audio playback is optional for this demo\n    try {\n      if (this.sound.get(key)) {\n        this.sound.play(key, { volume: 0.5 });\n      }\n    } catch (e) {\n      console.log('Audio not available:', key);\n    }\n  }\n\n  gameOver() {\n    console.log('Game Over! Final Score:', this.score.value);\n    this.scene.start('GameOver', { score: this.score.value });\n  }\n\n  update(time: number, delta: number) {\n    // Update combo timer\n    if (this.comboTimer > 0) {\n      this.comboTimer -= delta;\n      if (this.comboTimer <= 0) {\n        this.comboMultiplier = 1;\n      }\n    }\n\n    // Keep player locked to rail while grinding\n    if (this.isOnRail && this.currentRail) {\n      // Keep player locked to current rail position\n      this.player.y = this.currentRail.y - 25;\n      this.player.setVelocityY(0);\n      \n      // Check if player has moved past the current rail (simple X check)\n      const playerX = this.player.x;\n      const railX = this.currentRail.x;\n      const railWidth = 32; // Each rail segment is 32px wide\n      \n      // If player moved significantly past this rail segment, check for next rail or stop grinding\n      if (playerX > railX + railWidth + 50) { // Give some buffer\n        // Check if there's another rail nearby\n        const nextRail = this.physics.world.bodies.entries.find(body => {\n          if (!this.world.rails.contains(body.gameObject)) return false;\n          const rail = body.gameObject as any;\n          return Math.abs(rail.x - playerX) < 100 && Math.abs(rail.y - this.currentRail.y) < 20;\n        });\n        \n        if (nextRail) {\n          // Switch to the next rail seamlessly\n          this.currentRail = nextRail.gameObject;\n        } else {\n          // No more rails, stop grinding\n          console.log('Player reached end of rail - stopping grind');\n          this.stopGrinding();\n        }\n      }\n    }\n\n    // Handle jump input - any touch makes zombie jump\n    if (this.cursors.justTapped()) {\n      this.jumpBuffer = this.BUFFER_MS;\n    }\n    \n    // Process jump buffer and coyote time\n    if (this.jumpBuffer > 0 && this.coyoteTime > 0) {\n      this.jumpBuffer = 0;\n      this.coyoteTime = 0;\n      this.isOnRail = false;\n      const body = this.player.body as Phaser.Physics.Arcade.Body;\n      body.allowGravity = true;\n      this.player.setVelocityY(-280);\n      this.didTrickThisJump = false;\n      this.playSound('jump');\n      console.log('Player jumped with velocity -280 from Y:', this.player.y);\n    } else if (!this.didTrickThisJump && !this.isOnRail) {\n      // Air trick - only when not on rail and not already doing a trick\n      this.didTrickThisJump = true;\n      this.comboMultiplier = Math.min(this.comboMultiplier + 1, 5);\n      this.comboTimer = 3000;\n      \n      console.log('Air trick performed! Combo:', this.comboMultiplier);\n      \n      // Simple rotation without animation spam\n      this.tweens.killTweensOf(this.player); // Stop any existing tweens\n      this.player.setAngle(0); // Reset angle first\n      \n      this.tweens.add({\n        targets: this.player,\n        angle: 360,\n        duration: 600,\n        ease: 'Power2',\n        onComplete: () => {\n          this.player.setAngle(0); // Reset angle after trick\n          this.player.play('skate');\n        }\n      });\n      \n      this.playSound('trick');\n    }\n\n    // Update level director for procedural spawning\n    this.levelDirector.update(this.cameras.main.scrollX);\n    \n    // Update game speed based on difficulty\n    this.gameSpeed = this.levelDirector.getSpeed(this.cameras.main.scrollX);\n\n    // Force player to maintain horizontal velocity every frame\n    if (this.player && this.player.body) {\n      this.player.setVelocityX(this.gameSpeed);\n      this.player.x += this.gameSpeed * delta / 1000;\n    }\n\n    // Continuous scoring\n    this.score.addDistance(this.gameSpeed * delta / 1000);\n    \n    if (this.isOnRail) {\n      this.score.addGrindTick();\n    }\n\n    // Shadow tracking and rim light tinting\n    const vx = this.player.x;\n    const yVis = (this.world as any).visualGroundYFor(vx);\n    this.shadow.setPosition(vx, yVis - 2); // tiny lift to avoid z-fighting\n    this.shadow.scaleX = Phaser.Math.Clamp(1 - (this.player.y - (yVis - 14)) / 80, 0.6, 1.1);\n    this.shadow.scaleY = Phaser.Math.Clamp(1 - (this.player.y - (yVis - 14)) / 80, 0.4, 1.0);\n\n    // Rim light tint when airborne\n    const onGround = (this.player.body as Phaser.Physics.Arcade.Body).blocked.down || this.isOnRail;\n    if (onGround) {\n      this.player.clearTint();\n      // Reset trick state when landing\n      if (this.didTrickThisJump) {\n        this.didTrickThisJump = false;\n        this.tweens.killTweensOf(this.player);\n        this.player.setAngle(0);\n      }\n      if (this.player.anims.currentAnim?.key !== 'skate') {\n        this.player.play('skate');\n      }\n    } else {\n      this.player.setTintFill(0x99ffcc); // faint mint rim when airborne\n    }\n\n    // Update the world (parallax, street scroll, dynamic content)\n    this.world.update(this.cameras.main.scrollX);\n\n    // Game speed is now handled by LevelDirector\n\n    // Fail condition - moved down to give more room\n    if (this.player.y > 200) {\n      console.log('Game over - player fell too far. Y position:', this.player.y);\n      this.gameOver();\n    }\n\n    // Update UI\n    this.updateUI();\n  }\n\n\n\n  updateUI() {\n    this.scoreText.setText(`SCORE: ${Math.floor(this.score.value)}`);\n    \n    if (this.comboMultiplier > 1) {\n      this.comboText.setText(`COMBO ${this.comboMultiplier}`);\n    } else {\n      this.comboText.setText('');\n    }\n  }\n}\n","size_bytes":13000},"client/src/game/scenes/MainMenu.ts":{"content":"// Global window variable for menu music with debugging\ndeclare global {\n  interface Window {\n    menuMusicInstance?: Phaser.Sound.BaseSound;\n    menuMusicStarted?: boolean; // Track if music has ever been started\n    menuMusicDebug?: string[]; // Debug log\n  }\n}\n\nexport class MainMenu extends Phaser.Scene {\n  private selectedIndex = 0;\n  private menuItems: (Phaser.GameObjects.Image | Phaser.GameObjects.Text)[] = [];\n  private cursors!: Phaser.Types.Input.Keyboard.CursorKeys;\n  private enterKey!: Phaser.Input.Keyboard.Key;\n  private buttonBaseScales: number[] = [];\n  private menuMusic!: Phaser.Sound.BaseSound;\n\n  constructor() {\n    super({ key: 'MainMenu' });\n  }\n\n  init(data: { menuMusic?: Phaser.Sound.BaseSound }) {\n    // Receive menu music back from other scenes to keep it playing\n    if (data.menuMusic) {\n      this.menuMusic = data.menuMusic;\n      // Also make sure global instance is updated\n      window.menuMusicInstance = data.menuMusic;\n    }\n  }\n\n  create() {\n    const cam = this.cameras.main;\n    \n    // Only stop sounds if we're NOT coming from another menu scene with music\n    if (!this.menuMusic) {\n      // CRITICAL: Stop ALL sounds first to prevent duplicates\n      this.sound.stopAll();\n      this.game.sound.stopAll();\n      \n      // Stop any playing menu music from ANY scene\n      const allSounds = this.game.sound.getAllPlaying();\n      allSounds.forEach((sound: any) => {\n        if (sound.key === 'menu_music') {\n          sound.stop();\n          sound.destroy();\n        }\n      });\n      \n      // Check if we have a global instance that exists and is valid\n      if (window.menuMusicInstance) {\n        // If instance exists but isn't in our sound manager, it's orphaned - destroy it\n        if (!this.sound.get('menu_music')) {\n          try {\n            window.menuMusicInstance.stop();\n            window.menuMusicInstance.destroy();\n          } catch (e) {\n            // Instance might be invalid\n          }\n          window.menuMusicInstance = undefined;\n          window.menuMusicStarted = false;\n        }\n      }\n    }\n    \n    // Now create or reference the menu music\n    if (!this.menuMusic) {\n      // Check if the global instance exists but is destroyed/invalid\n      let needNewInstance = false;\n      if (window.menuMusicInstance) {\n        try {\n          // Check if the instance is still valid by accessing a property\n          const isPlaying = window.menuMusicInstance.isPlaying;\n          // Also check if the sound manager still has this sound\n          if (!this.sound.get(window.menuMusicInstance.key)) {\n            needNewInstance = true;\n            window.menuMusicInstance = undefined;\n          }\n        } catch (e) {\n          // Instance is invalid/destroyed - need new one\n          needNewInstance = true;\n          window.menuMusicInstance = undefined;\n          window.menuMusicStarted = false; // Reset flag if instance is destroyed\n        }\n      }\n      \n      if (!window.menuMusicStarted) {\n        // First time - create ONE instance\n        window.menuMusicStarted = true;\n        this.menuMusic = this.sound.add('menu_music', { loop: true, volume: 0.5 });\n        window.menuMusicInstance = this.menuMusic;\n        this.menuMusic.play();\n      } else if (window.menuMusicInstance && !needNewInstance) {\n        // Music was created before - just reference it\n        this.menuMusic = window.menuMusicInstance;\n        // Make sure it's playing\n        if (!this.menuMusic.isPlaying) {\n          this.menuMusic.play();\n        }\n      } else {\n        // Flag was set but no instance exists or instance was destroyed - create new one\n        this.menuMusic = this.sound.add('menu_music', { loop: true, volume: 0.5 });\n        window.menuMusicInstance = this.menuMusic;\n        this.menuMusic.play();\n      }\n    } else {\n      // Make sure the music from init is playing\n      if (!this.menuMusic.isPlaying) {\n        this.menuMusic.play();\n      }\n    }\n    \n    // Add menu background image (responsive scaling to fill screen)\n    const background = this.add.image(cam.centerX, cam.centerY, 'menu_background');\n    const backgroundScale = Math.max(cam.width / background.width, cam.height / background.height);\n    background.setScale(backgroundScale).setScrollFactor(0);\n    \n    // Calculate responsive button size (target 40% of screen width, but not larger than original)\n    const targetButtonWidth = cam.width * 0.4;\n    \n    // Add button images - positioned responsively below the SKATERZ title\n    const playButton = this.add.image(cam.centerX, cam.height * 0.82, 'play_button').setOrigin(0.5);\n    const optionsButton = this.add.image(cam.centerX, cam.height * 0.92, 'options_button').setOrigin(0.5);\n\n    // Calculate base scales for buttons to fit target size\n    const playBaseScale = Math.min(targetButtonWidth / playButton.width, 0.8);\n    const optionsBaseScale = Math.min(targetButtonWidth / optionsButton.width, 0.8);\n    \n    playButton.setScale(playBaseScale);\n    optionsButton.setScale(optionsBaseScale);\n    \n    // Store base scales for selection highlighting\n    this.buttonBaseScales = [playBaseScale, optionsBaseScale];\n    \n    this.menuItems = [playButton, optionsButton];\n\n    // Make buttons interactive\n    playButton.setInteractive({ useHandCursor: true })\n      .on('pointerdown', () => {\n        this.selectItem(0);\n        this.confirmSelection();\n      });\n      \n    optionsButton.setInteractive({ useHandCursor: true })\n      .on('pointerdown', () => {\n        this.selectItem(1);\n        this.confirmSelection();\n      });\n\n\n    // Set up input (create keys once)\n    this.cursors = this.input.keyboard!.createCursorKeys();\n    this.enterKey = this.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.ENTER);\n\n    // Set initial selection\n    this.updateSelection();\n  }\n\n  update() {\n    // Handle input\n    if (Phaser.Input.Keyboard.JustDown(this.cursors.up!)) {\n      this.selectedIndex = (this.selectedIndex - 1 + this.menuItems.length) % this.menuItems.length;\n      this.updateSelection();\n    } else if (Phaser.Input.Keyboard.JustDown(this.cursors.down!)) {\n      this.selectedIndex = (this.selectedIndex + 1) % this.menuItems.length;\n      this.updateSelection();\n    } else if (Phaser.Input.Keyboard.JustDown(this.cursors.space!) || \n               Phaser.Input.Keyboard.JustDown(this.enterKey)) {\n      this.confirmSelection();\n    }\n  }\n\n  private selectItem(index: number) {\n    this.selectedIndex = index;\n    this.updateSelection();\n  }\n\n  private updateSelection() {\n    this.menuItems.forEach((item, index) => {\n      const baseScale = this.buttonBaseScales[index];\n      if (index === this.selectedIndex) {\n        // Highlight selected button with more visible scale increase and tint\n        item.setScale(baseScale * 1.2);\n        item.setTint(0xffff00); // Bright yellow tint for better visibility\n      } else {\n        // Normal button appearance with base scale\n        item.setScale(baseScale);\n        item.clearTint();\n      }\n    });\n  }\n\n  private confirmSelection() {\n    if (this.selectedIndex === 0) {\n      // Go to character select, keep music playing\n      this.scene.start('CharacterSelect', { menuMusic: this.menuMusic });\n    } else if (this.selectedIndex === 1) {\n      // Go to options, keep music playing\n      this.scene.start('OptionsMenu', { menuMusic: this.menuMusic });\n    }\n  }\n}","size_bytes":7365},"client/src/game/scenes/OptionsMenu.ts":{"content":"export class OptionsMenu extends Phaser.Scene {\n  private cursors!: Phaser.Types.Input.Keyboard.CursorKeys;\n  private menuMusic: Phaser.Sound.BaseSound | null = null;\n  private selectedOption = 0; // 0 = How to Play, 1 = Leaderboard, 2 = Back\n  private menuItems: Phaser.GameObjects.Text[] = [];\n\n  constructor() {\n    super({ key: 'OptionsMenu' });\n  }\n\n  init(data: { menuMusic?: Phaser.Sound.BaseSound }) {\n    // Receive menu music from MainMenu to keep it playing\n    this.menuMusic = data.menuMusic || null;\n  }\n\n  create() {\n    // Add graffiti background\n    const bg = this.add.image(320, 480, 'graffiti_bg');\n    bg.setDisplaySize(640, 960);\n    \n    // Title\n    const titleText = this.add.text(320, 200, 'OPTIONS', {\n      fontSize: '32px',\n      color: '#ffecb3',\n      fontFamily: '\"Press Start 2P\", monospace',\n      align: 'center',\n      stroke: '#000000',\n      strokeThickness: 4\n    }).setOrigin(0.5);\n    titleText.setShadow(3, 3, '#000000', 5, true, true);\n\n    // Menu options\n    const howToPlayText = this.add.text(320, 320, 'HOW TO PLAY', {\n      fontSize: '24px',\n      color: '#ffffff',\n      fontFamily: '\"Press Start 2P\", monospace',\n      align: 'center',\n      stroke: '#000000',\n      strokeThickness: 3\n    }).setOrigin(0.5);\n    howToPlayText.setShadow(2, 2, '#000000', 3, true, true);\n\n    const leaderboardText = this.add.text(320, 420, 'LEADERBOARD', {\n      fontSize: '24px',\n      color: '#ffffff',\n      fontFamily: '\"Press Start 2P\", monospace',\n      align: 'center',\n      stroke: '#000000',\n      strokeThickness: 3\n    }).setOrigin(0.5);\n    leaderboardText.setShadow(2, 2, '#000000', 3, true, true);\n\n    const backText = this.add.text(320, 520, 'GO BACK', {\n      fontSize: '22px',\n      color: '#ffffff',\n      fontFamily: '\"Press Start 2P\", monospace',\n      align: 'center',\n      stroke: '#000000',\n      strokeThickness: 2\n    }).setOrigin(0.5);\n    backText.setShadow(2, 2, '#000000', 3, true, true);\n    \n    // Store menu items\n    this.menuItems = [howToPlayText, leaderboardText, backText];\n    \n    // Selection indicator\n    const selector = this.add.text(150, 320, '>', {\n      fontSize: '24px',\n      color: '#ffff00',\n      fontFamily: '\"Press Start 2P\", monospace',\n      stroke: '#000000',\n      strokeThickness: 3\n    }).setOrigin(0.5);\n    selector.setShadow(2, 2, '#000000', 3, true, true);\n    \n    // Update selector position\n    const updateSelector = () => {\n      // Reset all colors with font preserved\n      howToPlayText.setStyle({ color: '#ffffff', fontFamily: '\"Press Start 2P\", monospace' });\n      leaderboardText.setStyle({ color: '#ffffff', fontFamily: '\"Press Start 2P\", monospace' });\n      backText.setStyle({ color: '#ffffff', fontFamily: '\"Press Start 2P\", monospace' });\n      \n      if (this.selectedOption === 0) {\n        selector.setY(320);\n        howToPlayText.setStyle({ color: '#00ff00', fontFamily: '\"Press Start 2P\", monospace' });\n      } else if (this.selectedOption === 1) {\n        selector.setY(420);\n        leaderboardText.setStyle({ color: '#00ff00', fontFamily: '\"Press Start 2P\", monospace' });\n      } else {\n        selector.setY(520);\n        backText.setStyle({ color: '#00ff00', fontFamily: '\"Press Start 2P\", monospace' });\n      }\n    };\n    \n    updateSelector();\n    \n    // Make options interactive\n    howToPlayText.setInteractive({ useHandCursor: true })\n      .on('pointerdown', () => {\n        this.scene.start('HowToPlay', { menuMusic: this.menuMusic });\n      })\n      .on('pointerover', () => {\n        this.selectedOption = 0;\n        updateSelector();\n      });\n\n    leaderboardText.setInteractive({ useHandCursor: true })\n      .on('pointerdown', () => {\n        this.scene.start('Leaderboard', { menuMusic: this.menuMusic });\n      })\n      .on('pointerover', () => {\n        this.selectedOption = 1;\n        updateSelector();\n      });\n      \n    backText.setInteractive({ useHandCursor: true })\n      .on('pointerdown', () => {\n        this.scene.start('MainMenu', { menuMusic: this.menuMusic });\n      })\n      .on('pointerover', () => {\n        this.selectedOption = 2;\n        updateSelector();\n      });\n    \n    // Handle keyboard input\n    const upKey = this.input.keyboard?.addKey('UP');\n    const downKey = this.input.keyboard?.addKey('DOWN');\n    const spaceKey = this.input.keyboard?.addKey('SPACE');\n    const enterKey = this.input.keyboard?.addKey('ENTER');\n    \n    upKey?.on('down', () => {\n      this.selectedOption = (this.selectedOption - 1 + this.menuItems.length) % this.menuItems.length;\n      updateSelector();\n    });\n    \n    downKey?.on('down', () => {\n      this.selectedOption = (this.selectedOption + 1) % this.menuItems.length;\n      updateSelector();\n    });\n    \n    const selectOption = () => {\n      if (this.selectedOption === 0) {\n        this.scene.start('HowToPlay', { menuMusic: this.menuMusic });\n      } else if (this.selectedOption === 1) {\n        this.scene.start('Leaderboard', { menuMusic: this.menuMusic });\n      } else {\n        this.scene.start('MainMenu', { menuMusic: this.menuMusic });\n      }\n    };\n    \n    spaceKey?.on('down', selectOption);\n    enterKey?.on('down', selectOption);\n\n    // Set up input\n    this.cursors = this.input.keyboard!.createCursorKeys();\n  }\n\n  update() {\n    // ESC to go back\n    if (Phaser.Input.Keyboard.JustDown(this.input.keyboard!.addKey('ESC'))) {\n      this.scene.start('MainMenu', { menuMusic: this.menuMusic });\n    }\n  }\n}","size_bytes":5445},"client/src/game/scenes/Splash1.ts":{"content":"export class Splash1 extends Phaser.Scene {\n  constructor() {\n    super({ key: 'Splash1' });\n  }\n\n  create() {\n    // Set black background\n    this.cameras.main.setBackgroundColor('#000000');\n    \n    const centerX = this.cameras.main.width / 2;\n    const centerY = this.cameras.main.height / 2;\n    \n    // Display the Soul Arcade Advance logo - make it bigger\n    const logo = this.add.image(centerX, centerY, 'soul_arcade_new_logo');\n    logo.setOrigin(0.5, 0.5);\n    \n    // Make the logo bigger - use more of the screen\n    const maxWidth = 1600;  // Much bigger\n    const maxHeight = 1400; // Much bigger\n    const scale = Math.min(maxWidth / logo.width, maxHeight / logo.height);\n    logo.setScale(scale);\n    \n    // Wait 2 seconds then add shine effect\n    this.time.delayedCall(2000, () => {\n      // Create a duplicate of the logo for the shine effect\n      const shineLogo = this.add.image(centerX, centerY, 'soul_arcade_new_logo');\n      shineLogo.setOrigin(0.5, 0.5);\n      shineLogo.setScale(scale);\n      shineLogo.setAlpha(0); // Start invisible\n      \n      // Use additive blend mode so only the colored parts (letters) get brightened\n      // Black stays black since black + anything = that color\n      shineLogo.setBlendMode(Phaser.BlendModes.ADD);\n      shineLogo.setTint(0xffffff); // White tint for shine\n      \n      // Create a gradient mask for the shine sweep\n      const maskGraphics = this.make.graphics({});\n      const shineWidth = 150;\n      \n      // Start position - off the left side\n      let maskX = logo.x - logo.displayWidth/2 - shineWidth;\n      \n      // Create initial mask\n      maskGraphics.fillStyle(0xffffff);\n      maskGraphics.fillRect(maskX, logo.y - logo.displayHeight/2, shineWidth, logo.displayHeight);\n      \n      const mask = maskGraphics.createGeometryMask();\n      shineLogo.setMask(mask);\n      \n      // Make the shine visible\n      shineLogo.setAlpha(0.6);\n      \n      // Animate the mask moving across\n      this.tweens.add({\n        targets: { x: maskX },\n        x: logo.x + logo.displayWidth/2 + shineWidth,\n        duration: 800,\n        ease: 'Power2',\n        onUpdate: (tween) => {\n          const value = tween.targets[0] as any;\n          maskGraphics.clear();\n          maskGraphics.fillStyle(0xffffff);\n          // Create a gradient effect by drawing multiple rectangles with decreasing alpha\n          const gradientWidth = shineWidth;\n          const strips = 10;\n          for (let i = 0; i < strips; i++) {\n            const alpha = 1 - (i / strips);\n            maskGraphics.fillStyle(0xffffff, alpha);\n            maskGraphics.fillRect(\n              value.x + (i * gradientWidth/strips), \n              logo.y - logo.displayHeight/2, \n              gradientWidth/strips, \n              logo.displayHeight\n            );\n          }\n        },\n        onComplete: () => {\n          shineLogo.destroy();\n          maskGraphics.destroy();\n          \n          // Transition to next splash screen after shine completes\n          this.time.delayedCall(500, () => {\n            this.scene.start('Splash2');\n          });\n        }\n      });\n    });\n  }\n}","size_bytes":3130},"client/src/game/scenes/Splash2.ts":{"content":"export class Splash2 extends Phaser.Scene {\n  constructor() {\n    super({ key: 'Splash2' });\n  }\n\n  create() {\n    // Warning skull splash (first time)\n    this.cameras.main.setBackgroundColor('#000000');\n    \n    const centerX = this.cameras.main.width / 2;\n    const centerY = this.cameras.main.height / 2;\n    \n    const warningSkull = this.add.image(centerX, centerY, 'warning_skull');\n    warningSkull.setOrigin(0.5, 0.5);\n    warningSkull.setDisplaySize(640, 960);\n\n    // Auto-advance after 2 seconds\n    this.time.delayedCall(2000, () => {\n      this.scene.start('Splash3');\n    });\n  }\n}","size_bytes":596},"client/src/game/scenes/Splash3.ts":{"content":"export class Splash3 extends Phaser.Scene {\n  constructor() {\n    super({ key: 'Splash3' });\n  }\n\n  create() {\n    // Warning skull splash (second time)\n    this.cameras.main.setBackgroundColor('#000000');\n    \n    const centerX = this.cameras.main.width / 2;\n    const centerY = this.cameras.main.height / 2;\n    \n    const warningSkull = this.add.image(centerX, centerY, 'warning_skull');\n    warningSkull.setOrigin(0.5, 0.5);\n    warningSkull.setDisplaySize(640, 960);\n\n    // Auto-advance after 2 seconds\n    this.time.delayedCall(2000, () => {\n      this.scene.start('Splash4');\n    });\n  }\n}","size_bytes":597},"client/src/world/angledStreet_mask.ts":{"content":"// src/world/angledStreet_mask.ts\n// Draw a horizontal street and clip it with a slanted trapezoid mask.\n// No rotation used. Physics stays axis-aligned.\n\n// Tunables\nconst STREET_HEIGHT = 384;               // total visual band height (curb+asphalt)\nconst STREET_Y = 672;                   // top of band at x = origin\nconst TILT_DEG = -7;                    // visual slope (negative tilts down to the right)\nconst SLOPE = Math.tan(Phaser.Math.DegToRad(TILT_DEG)); // pixels of Y per pixel of X\nconst BAND_WIDTH = 9600;                // how wide we draw the repeating street\n\nexport function buildAngledStreet(scene: Phaser.Scene) {\n  // Container that holds all street strips (no rotation)\n  const group = scene.add.container(0, 0).setDepth(5).setScrollFactor(1);\n\n  // Helper to make a horizontal TileSprite strip\n  const makeStrip = (key: string, y: number, alpha = 1) =>\n    scene.add.tileSprite(0, y, BAND_WIDTH, 192, key)\n      .setOrigin(0, 0)\n      .setAlpha(alpha)\n      .setScrollFactor(1);\n\n  // Horizontal strips stacked from top to bottom (32px each)\n  const yTop = STREET_Y;              // visual top edge at x=0\n  const sidewalk = makeStrip('tile_sidewalk', yTop + 0);\n  const curb     = makeStrip('tile_curb',     yTop + 32);\n  const asphalt1 = makeStrip('tile_asphalt',  yTop + 64 - 32);\n  const asphalt2 = makeStrip('tile_asphalt',  yTop + 64);\n\n  const lanes    = makeStrip('tile_lane',     yTop + 64 - 32, 0.70);\n  const cross    = makeStrip('tile_cross',    yTop + 64 - 32, 0.25);\n  const debris   = makeStrip('tile_debris',   yTop + 64,      0.70);\n  const manhole  = makeStrip('tile_manhole',  yTop + 64 - 32, 0.90);\n\n  [sidewalk, curb, asphalt1, asphalt2, lanes, cross, debris, manhole]\n    .forEach(s => group.add(s));\n\n  // --- Slanted mask (trapezoid) clipped onto the whole group ----------------\n  // Top edge: y = yTop + SLOPE * x\n  // Bottom edge: y + STREET_HEIGHT\n  const makeMaskShape = () => {\n    const g = scene.add.graphics().setScrollFactor(1).setDepth(4);\n    g.clear().fillStyle(0xffffff, 1);\n\n    // Build a polygon that spans camera view + margin with the slanted top\n    const cam = scene.cameras.main;\n    const x0 = cam.scrollX - 80;\n    const x1 = x0 + cam.width + 200;\n\n    const yTop0 = yTop + SLOPE * (x0 - 0);\n    const yTop1 = yTop + SLOPE * (x1 - 0);\n\n    // trapezoid points (clockwise)\n    const pts = new Phaser.Geom.Polygon([\n      x0, yTop0,\n      x1, yTop1,\n      x1, yTop1 + STREET_HEIGHT,\n      x0, yTop0 + STREET_HEIGHT\n    ]);\n    g.fillPoints(pts.points, true);\n    return g;\n  };\n\n  // Create and apply a BitmapMask\n  let maskShape = makeMaskShape();\n  group.setMask(maskShape.createBitmapMask());\n\n  // Keep mask polygon aligned with camera as we move\n  scene.events.on('postupdate', () => {\n    const old = maskShape;\n    maskShape = makeMaskShape();\n    group.setMask(maskShape.createBitmapMask());\n    old.destroy();\n  });\n\n  // Update function: scroll textures to follow camera\n  const update = (scrollX: number) => {\n    [sidewalk, curb, asphalt1, asphalt2, lanes, cross, debris, manhole]\n      .forEach(s => s.tilePositionX = scrollX);\n  };\n\n  // Visual ground equation (place feet & obstacles on this)\n  // Ground = bottom of band (asphalt baseline)\n  function visualGroundYFor(worldX: number) {\n    const yTopX = yTop + SLOPE * (worldX - 0);\n    return yTopX + (STREET_HEIGHT - 4); // -4 so wheels don't sink\n  }\n\n  // Debug: press D to draw the ground line\n  const dbg = scene.add.graphics().setDepth(9).setVisible(false);\n  scene.input.keyboard?.on('keydown-D', () => dbg.setVisible(!dbg.visible));\n  scene.events.on('postupdate', () => {\n    if (!dbg.visible) return;\n    dbg.clear().lineStyle(1, 0x3aa1ff, 0.9);\n    const cam = scene.cameras.main;\n    const x0 = cam.scrollX - 40;\n    const x1 = x0 + cam.width + 120;\n    dbg.beginPath();\n    for (let x = x0; x <= x1; x += 8) {\n      const y = visualGroundYFor(x);\n      if (x === x0) dbg.moveTo(x, y); else dbg.lineTo(x, y);\n    }\n    dbg.strokePath();\n  });\n\n  return { group, update, visualGroundYFor };\n}","size_bytes":4041},"client/src/world/citySimple.ts":{"content":"// Minimal \"looks like a city street\" renderer\n// flat physics baseline (y=160) + slanted top edge for the street band\n\nconst GROUND_Y = 960;      // <-- your physics floor\nconst STREET_H = 384;       // height of the entire street band\nconst TILT_DEG  = -8;      // visual slope (negative = down to the right)\nconst SLOPE     = Math.tan(TILT_DEG * Math.PI / 180); // Δy per px of x\n\n// GBA-ish palette\nconst PAL = {\n  sky0:'#274b8c', sky1:'#1f3d6e', sky2:'#162b4d', star:'#ffecb3',\n  bldg:'#0b1a2a', win:'#f1a340',\n  asphalt:'#2d303b', curbTop:'#b9c0cf', curbFace:'#646c7a',\n  lane:'#e2e28e', crack:'#1c1e25'\n};\n\nfunction drawSkyline(w:number,h:number){\n  const c=document.createElement('canvas'); c.width=w; c.height=h;\n  const g=c.getContext('2d')!; g.imageSmoothingEnabled=false;\n  // banded sky\n  for(let y=0;y<h;y++){\n    const t=y/h; g.fillStyle=t<.33?PAL.sky0:t<.66?PAL.sky1:PAL.sky2; g.fillRect(0,y,w,1);\n  }\n  // stars\n  g.fillStyle=PAL.star; for(let i=0;i<120;i++){ const x=(Math.random()*w)|0, y=(Math.random()*h)|0; if(y>12) g.fillRect(x,y,1,1); }\n  // simple building silhouettes\n  let x=0; const R=(a:number,b:number)=>Math.floor(a+Math.random()*(b-a));\n  while(x<w){\n    const bw=R(48,96), bh=R(56,120), by=GROUND_Y-STREET_H-10-bh;\n    g.fillStyle=PAL.bldg; g.fillRect(x,by,bw,bh);\n    g.fillStyle=PAL.win;\n    for(let yy=by+8; yy<by+bh-6; yy+=8) for(let xx=x+6; xx<x+bw-6; xx+=8)\n      if(Math.random()<0.20) g.fillRect(xx,yy,2,3);\n    x+=bw+R(8,20);\n  }\n  return c;\n}\n\nfunction drawStreet(w:number,h:number){\n  const c=document.createElement('canvas'); c.width=w; c.height=h;\n  const g=c.getContext('2d')!; g.imageSmoothingEnabled=false;\n\n  // STREET (trapezoid): top slants with SLOPE, bottom is the baseline\n  g.fillStyle=PAL.asphalt;\n  g.beginPath();\n  g.moveTo(0, GROUND_Y - STREET_H + SLOPE*0);\n  g.lineTo(w, GROUND_Y - STREET_H + SLOPE*w);\n  g.lineTo(w, GROUND_Y);\n  g.lineTo(0, GROUND_Y);\n  g.closePath(); g.fill();\n\n  // curb face strip (gives that \"edge\" like your reference)\n  g.fillStyle=PAL.curbFace;\n  g.beginPath();\n  const curbY0 = GROUND_Y - STREET_H + SLOPE*0 + 18;\n  const curbY1 = GROUND_Y - STREET_H + SLOPE*w + 18;\n  g.moveTo(0,  curbY0);\n  g.lineTo(w,  curbY1);\n  g.lineTo(w,  curbY1+3);\n  g.lineTo(0,  curbY0+3);\n  g.closePath(); g.fill();\n\n  // curb top highlight\n  g.strokeStyle=PAL.curbTop; g.lineWidth=1;\n  g.beginPath(); g.moveTo(0,curbY0); g.lineTo(w,curbY1); g.stroke();\n\n  // dashed lane paint (parallelograms aligned to slope)\n  g.fillStyle=PAL.lane;\n  for(let x=40; x<w; x+=200){\n    const y = GROUND_Y - 24 + SLOPE*x;\n    g.beginPath();\n    g.moveTo(x, y);\n    g.lineTo(x+64, y + SLOPE*64);\n    g.lineTo(x+64, y + SLOPE*64 + 4);\n    g.lineTo(x, y + 4);\n    g.closePath(); g.fill();\n  }\n\n  // cracks\n  g.fillStyle=PAL.crack;\n  for(let x=100; x<w; x+=320){\n    const y = GROUND_Y - 12 + SLOPE*x;\n    g.beginPath();\n    g.moveTo(x, y);\n    g.lineTo(x+36, y + SLOPE*36);\n    g.lineTo(x+36, y + SLOPE*36 + 2);\n    g.lineTo(x, y + 2);\n    g.closePath(); g.fill();\n  }\n\n  return c;\n}\n\nexport function createWorld(scene: Phaser.Scene){\n  // Check if textures already exist to avoid duplication errors\n  if (!scene.textures.exists('city_back')) {\n    // ---- BACKGROUND (tileable skyline) ----\n    const backCanvas = drawSkyline(5760, 960);\n    scene.textures.addCanvas('city_back', backCanvas);\n  }\n  \n  if (!scene.textures.exists('city_street')) {\n    // ---- STREET LAYER (angled-looking strip) ----\n    const streetCanvas = drawStreet(5760, 960);\n    scene.textures.addCanvas('city_street', streetCanvas);\n  }\n  \n  const skyline = scene.add.tileSprite(0,0,2880,960,'city_back')\n    .setOrigin(0,0).setScrollFactor(0.25).setDepth(1);\n\n  const street = scene.add.tileSprite(0,0,2880,960,'city_street')\n    .setOrigin(0,0).setScrollFactor(1).setDepth(5);\n\n  // ---- PHYSICS GROUND (invisible, exactly on baseline) ----\n  const ground = scene.physics.add.staticGroup();\n  const slab = scene.add.rectangle(0, GROUND_Y, 10000, 10, 0x000000, 0);\n  scene.physics.add.existing(slab, true);\n  ground.add(slab as any);\n\n  // ---- Gameplay groups ----\n  const rails = scene.physics.add.staticGroup();\n  const obstacles = scene.physics.add.staticGroup();\n\n  // ---- Update (parallax only) ----\n  const update = (scrollX:number)=>{\n    skyline.tilePositionX = scrollX * 0.25;\n    street.tilePositionX  = scrollX * 1.00; // keeps paint/cracks moving with the world\n  };\n\n  function visualGroundYFor(){ return GROUND_Y; }\n\n  return { ground, rails, obstacles, update, visualGroundYFor };\n}","size_bytes":4521},"client/src/world/cityVisuals.ts":{"content":"// src/world/cityVisuals.ts\nconst GROUND_Y = 960;      // physics baseline\nconst STREET_H = 384;       // total street band height\nconst SLOPE_DEG = -8;      // how \"angled\" the top edge looks\nconst SLOPE = Math.tan(SLOPE_DEG * Math.PI / 180); // Δy per px of x\n\n// --- colors (GBA-leaning)\nconst C = {\n  sky0:'#274b8c', sky1:'#1f3d6e', sky2:'#162b4d',\n  star:'#ffecb3',\n  bldg0:'#0b1a2a', bldgMid:'#12304a', win:'#f1a340',\n  asphalt:'#2d303b', lane:'#e2e28e', crack:'#1c1e25',\n  curbTop:'#b9c0cf', curbFace:'#646c7a', sidewalk0:'#757c8b', sidewalk1:'#9aa2b2'\n};\n\nfunction gradSky(g:CanvasRenderingContext2D, w:number, h:number){\n  for(let y=0;y<h;y++){ const t=y/h; g.fillStyle = t<.33?C.sky0:t<.66?C.sky1:C.sky2; g.fillRect(0,y,w,1); }\n  g.fillStyle = C.star; for(let i=0;i<90;i++){ const x=(Math.random()*w)|0, y=(Math.random()*h)|0; if (y>12) g.fillRect(x,y,1,1); }\n}\n\nfunction drawBuildings(g:CanvasRenderingContext2D, w:number, h:number){\n  const R=(a:number,b:number)=>Math.floor(a+Math.random()*(b-a));\n  for(let x=0; x<w; ){\n    const bw = R(40,90), bh = R(50,120);\n    const by = GROUND_Y - STREET_H - 10 - bh; // sit above street\n    g.fillStyle = C.bldg0; g.fillRect(x, by, bw, bh);\n    // windows\n    g.fillStyle = C.win;\n    for(let yy=by+8; yy<by+bh-6; yy+=8){\n      for(let xx=x+6; xx<x+bw-6; xx+=8){ if(Math.random()<0.22) g.fillRect(xx,yy,2,3); }\n    }\n    x += bw + R(6,18);\n  }\n}\n\nexport function buildCityBack(scene: Phaser.Scene){\n  const w = 4320, h = 960;\n  const c = document.createElement('canvas'); c.width=w; c.height=h;\n  const g = c.getContext('2d')!; g.imageSmoothingEnabled=false;\n\n  gradSky(g, w, h);\n  drawBuildings(g, w, h);\n\n  const key = 'city_back';\n  scene.textures.addCanvas(key, c);\n  const t = scene.add.tileSprite(0, 0, 2880, 960, key).setOrigin(0,0).setScrollFactor(0.25).setDepth(1);\n  return t;\n}\n\nexport function buildStreetLayer(scene: Phaser.Scene){\n  const w = 5760, h = 960;\n  const c = document.createElement('canvas'); c.width=w; c.height=h;\n  const g = c.getContext('2d')!; g.imageSmoothingEnabled=false;\n\n  // --- STREET POLYGON (flat at bottom, angled top edge)\n  // Top edge: y_top(x) = GROUND_Y - STREET_H + SLOPE*x\n  g.fillStyle = C.asphalt;\n  g.beginPath();\n  g.moveTo(0, GROUND_Y - STREET_H + SLOPE*(0));\n  g.lineTo(w, GROUND_Y - STREET_H + SLOPE*(w));\n  g.lineTo(w, GROUND_Y);\n  g.lineTo(0, GROUND_Y);\n  g.closePath(); g.fill();\n\n  // curb & sidewalk along the top of street\n  // curb face (2px)\n  g.fillStyle = C.curbFace;\n  g.beginPath();\n  g.moveTo(0, GROUND_Y - STREET_H + SLOPE*0 + 18);\n  g.lineTo(w, GROUND_Y - STREET_H + SLOPE*w + 18);\n  g.lineTo(w, GROUND_Y - STREET_H + SLOPE*w + 22);\n  g.lineTo(0, GROUND_Y - STREET_H + SLOPE*0 + 22);\n  g.closePath(); g.fill();\n\n  // curb top (thin)\n  g.strokeStyle = C.curbTop; g.lineWidth = 1;\n  g.beginPath();\n  g.moveTo(0, GROUND_Y - STREET_H + SLOPE*0 + 18);\n  g.lineTo(w, GROUND_Y - STREET_H + SLOPE*w + 18);\n  g.stroke();\n\n  // dashed lane paint (draw parallelograms following slope)\n  g.fillStyle = C.lane;\n  for(let x=20; x<w; x+=200){\n    const y = GROUND_Y - 24 + SLOPE*(x);\n    g.beginPath();\n    g.moveTo(x, y);\n    g.lineTo(x+60, y + SLOPE*60);\n    g.lineTo(x+60, y + SLOPE*60 + 4);\n    g.lineTo(x, y + 4);\n    g.closePath(); g.fill();\n  }\n\n  // a few cracks (short parallelograms)\n  g.fillStyle = C.crack;\n  for (let x=80; x<w; x+=320){\n    const y = GROUND_Y - 10 + SLOPE*x;\n    g.beginPath();\n    g.moveTo(x, y); g.lineTo(x+40, y + SLOPE*40);\n    g.lineTo(x+40, y + SLOPE*40 + 2);\n    g.lineTo(x, y + 2);\n    g.closePath(); g.fill();\n  }\n\n  const key = 'city_street';\n  scene.textures.addCanvas(key, c);\n  const t = scene.add.tileSprite(0, 0, 2880, 960, key).setOrigin(0,0).setScrollFactor(1).setDepth(3);\n  return t;\n}\n\nexport const VisualGroundY = () => GROUND_Y;  // flat physics baseline","size_bytes":3815},"client/src/world/index_backup.ts":{"content":"import { buildNYCAtlas32 } from './tiles32';\nimport { buildParallax } from './parallax';\nimport { buildAngledStreet } from './angledStreet';\n\nexport function createWorld(scene: Phaser.Scene){\n  buildNYCAtlas32(scene);\n  const par = buildParallax(scene);\n  const street = buildAngledStreet(scene);\n\n  // Pretty rails and obstacles that match visuals but keep physics simple\n  const rails = scene.physics.add.staticGroup();\n  for (let x=140; x<2000; x+=220) {\n    const rImg = scene.add.image(x, 110, 'rail32').setOrigin(0.5,1).setDepth(5);\n    scene.physics.add.existing(rImg, true); rails.add(rImg as any);\n  }\n\n  const obstacles = scene.physics.add.staticGroup();\n  // Start obstacles further away and make them less frequent\n  for (let x=500; x<2000; x+=400) {\n    const type = (x/400)%2 ? 'barricade32':'cone16x24';\n    const img = scene.add.image(x, 160, type).setOrigin(0.5,1).setDepth(6);\n    scene.physics.add.existing(img, true); obstacles.add(img as any);\n  }\n\n  // invisible physics ground - positioned to match visual street\n  const ground = scene.physics.add.staticGroup();\n\n  // expose an update hook\n  const update = (cameraScrollX:number, time?:number)=>{\n    // parallax drift with subtle motion\n    const t = (time || 0) * 0.001;\n    par.stars.tilePositionX = cameraScrollX * 0.06;\n    par.skyline.tilePositionX = cameraScrollX * 0.22 + Math.sin(t*0.5)*2; // micro drift\n    par.fence.tilePositionX = cameraScrollX * 0.55;\n    // angled street scroll\n    street.update(cameraScrollX);\n  };\n\n  return { ground, rails, obstacles, update, visualGroundYFor: street.visualGroundYFor };\n}","size_bytes":1599},"client/src/world/seamlessBackground.ts":{"content":"// Seamless single-image background system for continuous scrolling\n// Street, curb, and buildings all in one tiling image\n\nconst GROUND_Y = 960; // Physics baseline - street surface\n\nexport function createSeamlessWorld(scene: Phaser.Scene) {\n  // Create placeholder background until you provide AI-generated image\n  const bgCanvas = document.createElement('canvas');\n  bgCanvas.width = 1280;\n  bgCanvas.height = 960;\n  const ctx = bgCanvas.getContext('2d')!;\n  ctx.imageSmoothingEnabled = false;\n  \n  // Placeholder showing where your AI image will go\n  const gradient = ctx.createLinearGradient(0, 0, 0, 960);\n  gradient.addColorStop(0, '#274b8c'); // sky\n  gradient.addColorStop(0.6, '#646c7a'); // buildings/curb\n  gradient.addColorStop(1, '#2d303b'); // street\n  ctx.fillStyle = gradient;\n  ctx.fillRect(0, 0, 1280, 960);\n  \n  // Street area indication\n  ctx.fillStyle = '#4a4a4a';\n  ctx.fillRect(0, 720, 1280, 240); // Street area\n  \n  // Lane markings\n  ctx.fillStyle = '#e2e28e';\n  for (let x = 0; x < 1280; x += 160) {\n    ctx.fillRect(x, 810, 80, 8);\n  }\n  \n  ctx.fillStyle = '#ffecb3';\n  ctx.font = '24px monospace';\n  ctx.fillText('SEAMLESS BACKGROUND PLACEHOLDER', 370, 480);\n  ctx.fillText('Replace with your AI-generated image', 400, 520);\n  \n  if (!scene.textures.exists('seamless_bg')) {\n    scene.textures.addCanvas('seamless_bg', bgCanvas);\n  }\n  \n  const background = scene.add.tileSprite(0, 0, 1280, 960, 'seamless_bg')\n    .setOrigin(0, 0)\n    .setScrollFactor(1) // Moves with camera for endless effect\n    .setDepth(1);\n\n  // Physics ground - invisible, matches street in image\n  const ground = scene.physics.add.staticGroup();\n  const streetSurface = scene.add.rectangle(0, GROUND_Y, 10000, 10, 0x000000, 0);\n  scene.physics.add.existing(streetSurface, true);\n  ground.add(streetSurface as any);\n\n  // Groups for gameplay objects (these will be spawned separately on the street)\n  const rails = scene.physics.add.staticGroup();\n  const obstacles = scene.physics.add.staticGroup();\n\n  // Update function - scrolls the seamless background\n  const update = (scrollX: number) => {\n    // Continuous horizontal tiling\n    background.tilePositionX = scrollX * 1.0;\n  };\n\n  // Street surface Y position (constant since it's built into the image)\n  function visualGroundYFor() { \n    return GROUND_Y; \n  }\n\n  return { ground, rails, obstacles, update, visualGroundYFor, background };\n}\n\n// Function to load your AI-generated image when you have it\nexport function loadSeamlessBackground(scene: Phaser.Scene, imageKey: string) {\n  // Call this after loading your AI-generated seamless background\n  // scene.load.image('seamless_city', 'path/to/your/ai-image.png');\n  \n  return scene.add.tileSprite(0, 0, 1280, 960, imageKey)\n    .setOrigin(0, 0)\n    .setScrollFactor(1)\n    .setDepth(1);\n}","size_bytes":2805},"client/src/world/spawner.ts":{"content":"type Spawn = 'pothole'|'wood'|'cone_knock'|'barricade'|'rail';\n\nexport class LevelDirector {\n  private scene: Phaser.Scene;\n  private world: any; // expects visualGroundYFor(x), rails, obstacles\n  private nextX = 220;\n  private baseSpeed = 100;\n  private maxSpeed  = 180;\n\n  constructor(scene: Phaser.Scene, world: any){ this.scene = scene; this.world = world; }\n\n  private difficulty(scrollX: number){ return Math.min(1, scrollX / 3500); }\n\n  update(scrollX: number){\n    const d = this.difficulty(scrollX);\n    while (this.nextX < scrollX + 480 + 160) {\n      this.spawnOne(this.nextX, d);\n      const gapMin = Phaser.Math.Linear(240, 120, d);\n      const gapMax = Phaser.Math.Linear(360, 180, d);\n      this.nextX += Phaser.Math.Between(gapMin|0, gapMax|0);\n    }\n  }\n  getSpeed(scrollX: number){\n    const d = this.difficulty(scrollX);\n    return Phaser.Math.Linear(this.baseSpeed, this.maxSpeed, d);\n  }\n\n  private spawnOne(x: number, d: number){\n    const bag: [Spawn, number][] = [\n      ['rail',       Phaser.Math.Linear(60, 30, d)],\n      ['pothole',    Phaser.Math.Linear(10, 35, d)],\n      ['wood',       Phaser.Math.Linear(8,  25, d)],\n      ['cone_knock', Phaser.Math.Linear(6,  22, d)],\n      ['barricade',  Phaser.Math.Linear(16, 30, d)],\n    ];\n    const type = pick(bag);\n    if (type==='rail') return this.spawnRail(x);\n    if (type==='pothole') return this.spawnPothole(x);\n    if (type==='wood') return this.spawnWood(x);\n    if (type==='cone_knock') return this.spawnCone(x);\n    return this.spawnBarricade(x);\n  }\n\n  private spawnRail(x: number){\n    const BASE = 160;\n    const rail = this.scene.add.image(x, BASE-18, 'rail32').setOrigin(0.5,1).setDepth(6);\n    this.scene.physics.add.existing(rail, true);\n    this.world.rails.add(rail as any);\n  }\n  private spawnPothole(x: number){\n    const BASE = 160;\n    this.scene.add.image(x, BASE-1, 'pothole32x12').setOrigin(0.5,1).setDepth(7);\n    const hit = this.scene.add.rectangle(x, BASE-4, 22, 6, 0x000000, 0);\n    this.scene.physics.add.existing(hit, true);\n    this.world.obstacles.add(hit as any);\n  }\n  private spawnWood(x: number){\n    const BASE = 160;\n    const wood = this.scene.add.image(x, BASE, 'woodblock32x14').setOrigin(0.5,1).setDepth(7);\n    this.scene.physics.add.existing(wood, true);\n    this.world.obstacles.add(wood as any);\n  }\n  private spawnCone(x: number){\n    const BASE = 160;\n    const cone = this.scene.add.image(x, BASE, 'cone_knock24x12').setOrigin(0.5,1).setDepth(7);\n    this.scene.physics.add.existing(cone, true);\n    this.world.obstacles.add(cone as any);\n  }\n  private spawnBarricade(x: number){\n    const BASE = 160;\n    const barricade = this.scene.add.image(x, BASE-2, 'barricade32').setOrigin(0.5,1).setDepth(7);\n    this.scene.physics.add.existing(barricade, true);\n    this.world.obstacles.add(barricade as any);\n  }\n}\n\nfunction pick(bag: [Spawn, number][]): Spawn {\n  const total = bag.reduce((s, [,w])=>s+w, 0);\n  let r = Math.random() * total;\n  for (const [k,w] of bag) { if ((r-=w) <= 0) return k; }\n  return bag[0][0];\n}","size_bytes":3043},"client/src/world/tiles32_old.ts":{"content":"import { PAL } from './palette';\n\nfunction hex(s:string){ const v=parseInt(s.slice(1),16); return [(v>>16)&255,(v>>8)&255,(v)&255]; }\nfunction dither(ctx:CanvasRenderingContext2D,x:number,y:number,w:number,h:number,a:string,b:string){\n  const A=hex(a),B=hex(b), img=ctx.createImageData(w,h);\n  for(let j=0;j<h;j++)for(let i=0;i<w;i++){\n    const idx=(j*w+i)*4, bit=((i&1)^(j&1))?1:0, C=bit?A:B;\n    img.data[idx]=C[0]; img.data[idx+1]=C[1]; img.data[idx+2]=C[2]; img.data[idx+3]=255;\n  }\n  ctx.putImageData(img,x,y);\n}\n\nexport function buildNYCAtlas32(scene: Phaser.Scene){\n  // Check if textures already exist to avoid \"already in use\" errors\n  if (scene.textures.exists('nyc32')) {\n    return;\n  }\n  const tw=32, th=32, cols=8, rows=3;\n  const atlas=document.createElement('canvas'); atlas.width=cols*tw; atlas.height=rows*th;\n  const g=atlas.getContext('2d')!; g.imageSmoothingEnabled=false;\n\n  // 0: asphalt A\n  dither(g, 0,0,tw,th, PAL.asphalt0, PAL.asphalt1);\n  g.strokeStyle=PAL.crack; g.lineWidth=1;\n  g.beginPath(); g.moveTo(5,26); g.lineTo(16,20); g.lineTo(28,23); g.stroke();\n\n  // 1: asphalt with lane paint\n  dither(g, 32,0,tw,th, PAL.asphalt0, PAL.asphalt1);\n  g.fillStyle=PAL.lane; g.fillRect(32+15,0,2,32);\n\n  // 2: crosswalk\n  dither(g, 64,0,tw,th, PAL.asphalt0, PAL.asphalt1);\n  g.fillStyle=PAL.lane; for(let x=-10;x<32;x+=7) g.fillRect(64+x,0,4,32);\n\n  // 3: manhole\n  dither(g, 96,0,tw,th, PAL.asphalt0, PAL.asphalt1);\n  g.fillStyle='#404650'; g.fillRect(96+8,8,16,16);\n  g.fillStyle='#2d323a'; for(let x=96+10;x<96+22;x+=3) g.fillRect(x,12,1,8);\n\n  // 4: debris\n  dither(g, 128,0,tw,th, PAL.asphalt0, PAL.asphalt1);\n  g.fillStyle='#cfcfd4'; g.fillRect(128+6,23,5,3); g.fillRect(128+23,14,3,2);\n  g.fillStyle=PAL.grime; g.fillRect(128+18,28,8,2);\n\n  // 5: sidewalk slab\n  dither(g, 160,0,tw,th, PAL.sidewalk0, PAL.sidewalk1);\n  g.strokeStyle = '#4c4c56'; g.strokeRect(160.5,0.5,tw-1,th-1);\n  g.beginPath(); g.moveTo(160,16); g.lineTo(192,16); g.stroke();\n\n  // 6: curb\n  dither(g, 192,0,tw,th, PAL.curbTop, PAL.sidewalk1);\n  g.fillStyle=PAL.curbFace; g.fillRect(192, 22, 32, 10);\n\n  // 7: hazard edge\n  dither(g, 224,0,tw,th, PAL.asphalt0, PAL.asphalt1);\n  g.fillStyle=PAL.hazard; for(let i=0;i<32;i+=6) g.fillRect(224+i, 24, 3, 8);\n\n  // row 2 props (rails / cones)\n  // Rails 32×8 (two stacked for 32×16 tile cell)\n  if (!scene.textures.exists('rail32')) {\n    const rail=document.createElement('canvas'); rail.width=32; rail.height=8;\n    const r=rail.getContext('2d')!; r.imageSmoothingEnabled=false;\n    r.fillStyle=PAL.steel; r.fillRect(0,3,32,2); r.fillStyle='#2c3942'; r.fillRect(0,2,32,1);\n    [6,16,26].forEach(x=>r.fillRect(x,5,2,3));\n    scene.textures.addCanvas('rail32', rail);\n  }\n\n  // Barricade 32×24\n  if (!scene.textures.exists('barricade32')) {\n    const bar=document.createElement('canvas'); bar.width=32; bar.height=24;\n    const bc=bar.getContext('2d')!; bc.imageSmoothingEnabled=false;\n    dither(bc,0,0,32,24,'#402a1f','#6b3f28'); bc.fillStyle=PAL.hazard;\n    bc.fillRect(4,7,24,4); bc.fillRect(4,15,24,4);\n    scene.textures.addCanvas('barricade32', bar);\n  }\n\n  // Cone 16×24 (two per tile)\n  if (!scene.textures.exists('cone16x24')) {\n    const cone=document.createElement('canvas'); cone.width=16; cone.height=24;\n    const cc=cone.getContext('2d')!; cc.imageSmoothingEnabled=false;\n    cc.fillStyle=PAL.cone; cc.fillRect(3,14,10,8); cc.fillRect(6,6,6,8); cc.fillStyle=PAL.hazard; cc.fillRect(6,10,6,2);\n    scene.textures.addCanvas('cone16x24', cone);\n  }\n\n  // Put sheet into textures\n  if (!scene.textures.exists('nyc32')) {\n    scene.textures.addCanvas('nyc32', atlas);\n  }\n}","size_bytes":3632},"client/src/world/tiles32_old_broken.ts":{"content":"import { PAL } from './palette';\n\nfunction hex(s:string){ const v=parseInt(s.slice(1),16); return [(v>>16)&255,(v>>8)&255,(v)&255]; }\nfunction dither(ctx:CanvasRenderingContext2D,x:number,y:number,w:number,h:number,a:string,b:string){\n  const A=hex(a),B=hex(b), img=ctx.createImageData(w,h);\n  for(let j=0;j<h;j++)for(let i=0;i<w;i++){\n    const idx=(j*w+i)*4, bit=((i&1)^(j&1))?1:0, C=bit?A:B;\n    img.data[idx]=C[0]; img.data[idx+1]=C[1]; img.data[idx+2]=C[2]; img.data[idx+3]=255;\n  }\n  ctx.putImageData(img,x,y);\n}\n\nexport function buildNYCAtlas32(scene: Phaser.Scene){\n  // Check if textures already exist to avoid duplication errors\n  if (scene.textures.exists('nyc32')) {\n    return;\n  }\n  \n  const tw=32, th=32, cols=8, rows=3;\n  const atlas=document.createElement('canvas'); atlas.width=cols*tw; atlas.height=rows*th;\n  const g=atlas.getContext('2d')!; g.imageSmoothingEnabled=false;\n\n  // 0: asphalt A\n  dither(g, 0,0,tw,th, PAL.asphalt0, PAL.asphalt1);\n  g.strokeStyle=PAL.crack; g.lineWidth=1;\n  g.beginPath(); g.moveTo(5,26); g.lineTo(16,20); g.lineTo(28,23); g.stroke();\n\n  // 1: asphalt w/ lane\n  dither(g, 32,0,tw,th, PAL.asphalt0, PAL.asphalt1);\n  g.fillStyle=PAL.lane; g.fillRect(32+15,0,2,32);\n\n  // 2: crosswalk\n  dither(g, 64,0,tw,th, PAL.asphalt0, PAL.asphalt1);\n  g.fillStyle=PAL.lane; for(let x=-10;x<32;x+=7) g.fillRect(64+x,0,4,32);\n\n  // 3: manhole\n  dither(g, 96,0,tw,th, PAL.asphalt0, PAL.asphalt1);\n  g.fillStyle='#404650'; g.fillRect(96+8,8,16,16);\n  g.fillStyle='#2d323a'; for(let x=96+10;x<96+22;x+=3) g.fillRect(x,12,1,8);\n\n  // 4: debris / grime\n  dither(g, 128,0,tw,th, PAL.asphalt0, PAL.asphalt1);\n  g.fillStyle='#cfcfd4'; g.fillRect(128+6,23,5,3); g.fillRect(128+23,14,3,2);\n  g.fillStyle=PAL.grime; g.fillRect(128+18,28,8,2);\n\n  // 5: sidewalk\n  dither(g, 160,0,tw,th, PAL.sidewalk0, PAL.sidewalk1);\n  g.strokeStyle = '#4c4c56'; g.strokeRect(160.5,0.5,tw-1,th-1);\n  g.beginPath(); g.moveTo(160,16); g.lineTo(192,16); g.stroke();\n\n  // 6: curb\n  dither(g, 192,0,tw,th, PAL.curbTop, PAL.sidewalk1);\n  g.fillStyle=PAL.curbFace; g.fillRect(192, 22, 32, 10);\n\n  // 7: hazard edge\n  dither(g, 224,0,tw,th, PAL.asphalt0, PAL.asphalt1);\n  g.fillStyle=PAL.hazard; for(let i=0;i<32;i+=6) g.fillRect(224+i,24,3,8);\n\n  scene.textures.addCanvas('nyc32', atlas);\n\n  // Rails 32×8\n  if (!scene.textures.exists('rail32')) {\n    const rail=document.createElement('canvas'); rail.width=32; rail.height=8;\n    const r=rail.getContext('2d')!; r.imageSmoothingEnabled=false;\n    r.fillStyle=PAL.steel; r.fillRect(0,3,32,2); r.fillStyle='#2c3942'; r.fillRect(0,2,32,1);\n    [6,16,26].forEach(x=>r.fillRect(x,5,2,3));\n    scene.textures.addCanvas('rail32', rail);\n  }\n\n  // Barricade 32×24\n  if (!scene.textures.exists('barricade32')) {\n    const bar=document.createElement('canvas'); bar.width=32; bar.height=24;\n    const bc=bar.getContext('2d')!; bc.imageSmoothingEnabled=false;\n    dither(bc,0,0,32,24,'#402a1f','#6b3f28'); bc.fillStyle=PAL.hazard;\n    bc.fillRect(4,7,24,4); bc.fillRect(4,15,24,4);\n    scene.textures.addCanvas('barricade32', bar);\n  }\n\n  // Cone upright 16×24\n  if (!scene.textures.exists('cone16x24')) {\n    const cone=document.createElement('canvas'); cone.width=16; cone.height=24;\n    const cc=cone.getContext('2d')!; cc.imageSmoothingEnabled=false;\n    cc.fillStyle=PAL.cone; cc.fillRect(3,14,10,8); cc.fillRect(6,6,6,8);\n    cc.fillStyle=PAL.hazard; cc.fillRect(6,10,6,2);\n    scene.textures.addCanvas('cone16x24', cone);\n  }\n\n  // Knocked-over cone 24×12\n  if (!scene.textures.exists('cone_knock24x12')) {\n    const coneK=document.createElement('canvas'); coneK.width=24; coneK.height=12;\n    const ck=coneK.getContext('2d')!; ck.imageSmoothingEnabled=false;\n    ck.fillStyle=PAL.cone; ck.fillRect(2,6,16,5); ck.fillRect(16,3,6,3);\n    ck.fillStyle=PAL.hazard; ck.fillRect(4,7,12,2);\n    scene.textures.addCanvas('cone_knock24x12', coneK);\n  }\n\n  // Pothole 32×12\n  if (!scene.textures.exists('pothole32x12')) {\n    const hole=document.createElement('canvas'); hole.width=32; hole.height=12;\n    const hc=hole.getContext('2d')!; hc.imageSmoothingEnabled=false;\n    hc.fillStyle='#15171c'; hc.beginPath(); hc.ellipse(16,6,14,5,0,0,Math.PI*2); hc.fill();\n    hc.strokeStyle='#262a32'; hc.stroke();\n    scene.textures.addCanvas('pothole32x12', hole);\n  }\n\n  // Broken wood block 32×14\n  if (!scene.textures.exists('woodblock32x14')) {\n    const wood=document.createElement('canvas'); wood.width=32; wood.height=14;\n    const wc=wood.getContext('2d')!; wc.imageSmoothingEnabled=false;\n    wc.fillStyle='#6b3f28'; wc.fillRect(0,6,32,8);\n    wc.fillStyle='#402a1f'; wc.fillRect(0,10,32,2);\n    wc.fillStyle='#814d34'; wc.fillRect(4,4,8,2); wc.fillRect(18,5,7,2);\n    scene.textures.addCanvas('woodblock32x14', wood);\n  }\n}","size_bytes":4768},"README.md":{"content":"# Zombie Skater - GBA Style Endless Runner\n\nA retro-styled 2D endless runner game featuring a skateboarding zombie character. Built with modern web technologies while maintaining authentic Game Boy Advance aesthetics.\n\n## 🎮 Game Features\n\n- **Retro GBA Aesthetic**: 640x960 resolution with pixelated graphics and authentic 16-bit style\n- **Dual Character System**: Play as Kev or Stacy, each with unique zombie sprites\n- **Infinite Runner**: Endless city street with progressive difficulty and speed increases\n- **Combat System**: Crush enemies (eyeballs and robots) by stomping on them\n- **Star Collection ($STAR)**: Collect stars to purchase customizations, new characters, game modes, and extra lives\n- **Health & Stamina System**: Manage health with sandwich pickups and stamina for double jumps\n- **Power-Ups**: Energy drinks provide temporary stamina boost and invulnerability\n- **Combo System**: Chain tricks and enemy kills for multiplied star rewards\n- **Life System**: Earn extra lives at 100, 200, and 300 stars (continuous accumulation)\n- **Obstacle Dodging**: Avoid various obstacles including trash cans, cones, and zombies\n- **Touch Controls**: Tap to jump, swipe up for aerial tricks\n- **Leaderboard System**: Database-backed high score tracking with automatic submission\n- **Dynamic Soundtrack**: Alternating background music tracks with on-screen artist credits\n\n## 🛠 Tech Stack\n\n### Frontend\n- **Framework**: React 18.3.1 with TypeScript 5.6.3\n- **Game Engine**: Phaser 3.90.0 for HTML5 canvas rendering\n- **Build Tool**: Vite 5.4.19 with hot module replacement\n- **Styling**: Tailwind CSS 3.4.14 with custom GBA styling\n- **UI Components**: Radix UI primitives with custom themes\n\n### Backend\n- **Runtime**: Node.js with Express 4.21.2\n- **Database**: PostgreSQL with Drizzle ORM 0.39.1\n- **Session Management**: Express sessions with PostgreSQL store\n- **Development**: TSX for TypeScript execution\n\n### Game Technology\n- **Physics**: Phaser Arcade Physics for collision detection\n- **Graphics**: Canvas-based rendering with nearest-neighbor scaling\n- **Audio**: Howler.js 2.2.4 for sound effects and music\n- **Input**: Unified keyboard, mouse, and touch controls\n\n### Blockchain Ready (Configured)\n- **Hedera Network**: Ready for NFT integration and decentralized features\n- **HashPack Wallet**: Wallet connection capability for future features\n\n## 📁 Project Structure\n\n```\nzombie-skater/\n├── client/                 # Frontend React application\n│   ├── src/\n│   │   ├── components/     # React components\n│   │   ├── game/          # Phaser game scenes and logic\n│   │   └── styles/        # Tailwind CSS styles\n│   └── public/\n│       └── assets/        # Game assets (sprites, sounds)\n├── server/                # Express.js backend\n├── shared/                # Shared TypeScript types\n├── attached_assets/       # Development assets and notes\n└── dist/                  # Build output directory\n```\n\n## 🔧 Development Setup\n\n### Prerequisites\n- Node.js 18+ \n- npm or yarn package manager\n- PostgreSQL database (optional, has fallback)\n\n### Installation\n\n1. **Clone the repository**\n   ```bash\n   git clone <repository-url>\n   cd zombie-skater\n   ```\n\n2. **Install dependencies**\n   ```bash\n   npm install\n   ```\n\n3. **Environment Setup**\n   ```bash\n   # Copy environment template\n   cp .env.example .env\n   \n   # Configure database connection (optional)\n   DATABASE_URL=\"postgresql://user:password@localhost:5432/zombie_skater\"\n   ```\n\n4. **Development Server**\n   ```bash\n   npm run dev\n   ```\n   Game runs at: `http://localhost:5000`\n\n### Build Commands\n\n```bash\n# Development server with hot reload\nnpm run dev\n\n# Production build\nnpm run build\n\n# Start production server  \nnpm start\n\n# Type checking\nnpm run check\n\n# Database migrations\nnpm run db:push\n```\n\n## 🎯 Game Controls\n\n### Desktop\n- **Space** or **↑ Arrow**: Jump\n- **Space/↑ Again (in air)**: Double Jump (costs stamina)\n- **Mouse Click**: Jump\n- **J Key (while airborne)**: Perform trick for combo points\n\n### Mobile\n- **Tap Screen**: Jump\n- **Tap Again (in air)**: Double Jump (costs stamina)\n- **Swipe Up (while airborne)**: Perform trick for combo points\n\n## 🎨 Game Mechanics\n\n### Core Gameplay\n- **Objective**: Dodge obstacles, crush enemies, and collect $STAR tokens\n- **Progressive Difficulty**: Game speed increases as you score more points\n- **Survival Focus**: Manage health, stamina, and lives to achieve high scores\n\n### Combat & Movement\n- **Enemy Stomping**: Jump on enemies to defeat them and score points\n- **Double Jump**: Use stamina to perform a second jump in mid-air\n- **Aerial Tricks**: J key (desktop) or swipe up (mobile) while airborne to perform tricks\n- **Combo System**: Combine tricks and enemy kills (3+ actions) for bonus stars\n\n### Resource Management\n- **Health Bar**: Take damage from obstacles and enemies, restore with sandwiches\n- **Stamina Bar**: Required for double jumps and tricks, regenerates over time\n- **Life Counter**: Start with 3 lives, earn more at star milestones\n- **Star Economy**: Collect stars to unlock features and gain extra lives\n\n### Power-Ups & Items\n- **Sandwiches**: Restore 20 health points (with warning arrow indicator)\n- **Energy Drinks**: Full stamina restore, temporary invulnerability, and speed boost\n- **Single Stars**: Worth 1 star each with collection sound effect\n- **Star Clusters**: Worth 10 stars each with special sound effect\n\n### Scoring System\n- **Base Points**: 10 points per second survived, 50 points per enemy defeated\n- **Combo Multipliers**: x3 to x10 multiplier for successful combo chains\n- **Star Bonuses**: Combos convert score points into bonus stars\n- **Leaderboard**: Automatic score submission as \"Player 1\"\n\n## 🚀 Deployment\n\n### Build Process\n```bash\n# Build frontend and backend\nnpm run build\n\n# Files are output to:\n# - dist/public/     (frontend static files)\n# - dist/index.js    (backend server bundle)\n```\n\n### Production Environment\n- **Node.js**: 18+ required\n- **Memory**: 512MB minimum recommended\n- **Storage**: ~50MB for application files\n- **Database**: PostgreSQL (optional with fallback to memory)\n\n### Environment Variables\n```bash\nNODE_ENV=production\nPORT=5000\nDATABASE_URL=postgresql://user:pass@host:5432/db  # Optional\n```\n\n## 📦 Key Dependencies\n\n### Core Framework\n- `react@18.3.1` - UI framework\n- `phaser@3.90.0` - Game engine\n- `express@4.21.2` - Web server\n- `typescript@5.6.3` - Type safety\n\n### Game Libraries  \n- `howler@2.2.4` - Audio management\n- `matter-js@0.20.0` - Physics simulation\n- `gsap@3.12.5` - Animations\n\n### Development Tools\n- `vite@5.4.19` - Build tool and dev server\n- `tailwindcss@3.4.14` - CSS framework\n- `drizzle-orm@0.39.1` - Database ORM\n\n### Blockchain Integration (Ready)\n- Hedera SDK integration points configured\n- HashPack wallet connection infrastructure\n- NFT and token integration capabilities\n\n## 🔮 Current Features & Future Roadmap\n\n### Fully Implemented\n- ✅ Dual playable characters (Kev and Stacy)\n- ✅ Complete enemy system with stomping mechanics\n- ✅ Health and stamina systems with UI\n- ✅ Power-up system (sandwiches and energy drinks)\n- ✅ Star collection and life reward system\n- ✅ Combo system with multipliers\n- ✅ Progressive difficulty scaling\n- ✅ Full sound effects and alternating music tracks\n- ✅ PostgreSQL-backed leaderboard\n- ✅ Tutorial and How to Play screens\n- ✅ Character selection screen\n- ✅ Splash screen sequence\n\n### Future Features\n- **$STAR Token Integration**: Use collected stars as currency for:\n  - New character skins and customizations\n  - Additional game modes and levels\n  - Permanent upgrades and abilities\n- **Hedera Network Integration**: NFT character ownership and trading\n- **HashPack Wallet**: Connect wallet for blockchain features\n- **Multiplayer Mode**: Compete with other players in real-time\n- **Achievement System**: Unlock rewards for gameplay milestones\n- **Expanded Enemy Types**: More enemy varieties with unique behaviors\n- **Environmental Hazards**: Additional obstacle types and patterns\n\n## 🤝 Contributing\n\n1. Fork the repository\n2. Create feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit changes (`git commit -m 'Add amazing feature'`)\n4. Push to branch (`git push origin feature/amazing-feature`)\n5. Open Pull Request\n\n## 📄 License\n\nMIT License - See LICENSE file for details\n\n---\n\nBuilt with ❤️ for the retro gaming community","size_bytes":8496},"DEVELOPMENT_GUIDE.md":{"content":"# Development Guide - Zombie Skater\n\n## 📋 Build Information for GitHub Upload\n\n### Project Overview\n- **Project Name**: Zombie Skater  \n- **Type**: GBA-style endless runner game\n- **Technology**: React + Phaser 3 + Express + TypeScript\n- **Build System**: Vite + ESBuild\n\n### Environment Requirements\n```json\n{\n  \"node\": \">=18.0.0\",\n  \"npm\": \">=8.0.0\", \n  \"typescript\": \"5.6.3\",\n  \"platform\": \"cross-platform (web-based)\"\n}\n```\n\n### Installation & Setup Commands\n```bash\n# Clone and install\nnpm install\n\n# Development server (includes both frontend + backend)\nnpm run dev\n\n# Production build\nnpm run build\n\n# Start production\nnpm start\n\n# Type checking\nnpm run check\n\n# Database setup (optional)\nnpm run db:push\n```\n\n### Build Output Structure\n```\ndist/\n├── public/           # Frontend static files (Vite build)\n│   ├── index.html\n│   ├── assets/       # Bundled JS/CSS with hashing\n│   └── assets/       # Game assets (sprites, sounds)\n└── index.js          # Backend server bundle (ESBuild)\n```\n\n### Key Configuration Files\n- `package.json` - Dependencies and scripts\n- `tsconfig.json` - TypeScript configuration\n- `vite.config.ts` - Frontend build configuration\n- `tailwind.config.ts` - CSS framework setup\n- `drizzle.config.ts` - Database ORM configuration\n\n### Architecture\n- **Frontend**: React SPA with Phaser 3 game embedded\n- **Backend**: Express.js API server\n- **Database**: PostgreSQL with Drizzle ORM (optional, has memory fallback)\n- **Build**: Separate frontend (Vite) and backend (ESBuild) builds\n- **Deployment**: Single server hosts both static files and API\n\n## 🔗 Blockchain Integration Status\n\n### Current Status: CONFIGURED BUT NOT IMPLEMENTED\n\nThe project is **ready** for Hedera and wallet integration but the actual implementation is not yet added. Here's what needs to be implemented:\n\n### Required Dependencies (Not Yet Added)\n```bash\n# Hedera SDK\nnpm install @hashgraph/sdk\n\n# Wallet Connect for HashPack\nnpm install @hashconnect/hashconnect\n\n# Additional crypto utilities\nnpm install @hashgraph/proto\n```\n\n### Integration Points Needed\n\n1. **Hedera Network Connection**\n   ```typescript\n   // client/src/services/hedera.ts\n   import { Client, AccountId, PrivateKey } from '@hashgraph/sdk';\n   \n   export const hederaClient = Client.forTestnet();\n   ```\n\n2. **HashPack Wallet Connection**\n   ```typescript\n   // client/src/services/wallet.ts\n   import { HashConnect } from '@hashconnect/hashconnect';\n   \n   export const hashConnect = new HashConnect();\n   ```\n\n3. **NFT Integration Points**\n   - Character skins as NFTs\n   - Achievement tokens\n   - High score verification\n   - In-game asset ownership\n\n### Recommended Implementation Plan\n\n1. **Phase 1**: Basic wallet connection\n   - HashPack wallet connect/disconnect\n   - Account balance display\n   - Transaction signing\n\n2. **Phase 2**: NFT character system\n   - Mint character skins as NFTs\n   - Load owned NFTs as playable characters\n   - Metadata on IPFS\n\n3. **Phase 3**: Game economy\n   - Token rewards for high scores\n   - NFT marketplace for character trades\n   - Leaderboard verification on-chain\n\n## 🗃 Complete Dependency List\n\n### Production Dependencies (103 packages)\n```json\n{\n  \"core\": {\n    \"react\": \"18.3.1\",\n    \"react-dom\": \"18.3.1\", \n    \"phaser\": \"3.90.0\",\n    \"express\": \"4.21.2\",\n    \"typescript\": \"5.6.3\"\n  },\n  \"game\": {\n    \"howler\": \"2.2.4\",\n    \"matter-js\": \"0.20.0\", \n    \"gsap\": \"3.12.5\",\n    \"three\": \"0.170.0\"\n  },\n  \"ui\": {\n    \"@radix-ui/*\": \"Multiple UI primitives\",\n    \"tailwindcss\": \"3.4.14\",\n    \"framer-motion\": \"11.13.1\",\n    \"lucide-react\": \"0.453.0\"\n  },\n  \"backend\": {\n    \"drizzle-orm\": \"0.39.1\",\n    \"@neondatabase/serverless\": \"0.10.4\",\n    \"express-session\": \"1.18.1\",\n    \"passport\": \"0.7.0\"\n  },\n  \"build\": {\n    \"vite\": \"5.4.19\",\n    \"esbuild\": \"0.25.0\",\n    \"@vitejs/plugin-react\": \"4.3.2\"\n  }\n}\n```\n\n### Development Dependencies (24 packages)\n- TypeScript types for all major libraries\n- Tailwind CSS typography plugin\n- Replit-specific development tools\n- Build and bundling tools\n\n## 🚀 Deployment Recommendations\n\n### For Your Expert Developer\n\n1. **GitHub Repository Setup**\n   - Include `.env.example` for environment variables\n   - Add `.gitignore` for `node_modules`, `dist`, `.env`\n   - Include this development guide\n   - Tag releases for version management\n\n2. **CI/CD Pipeline Suggestions**\n   ```yaml\n   # .github/workflows/build.yml\n   name: Build and Test\n   on: [push, pull_request]\n   jobs:\n     build:\n       runs-on: ubuntu-latest\n       steps:\n         - uses: actions/checkout@v3\n         - uses: actions/setup-node@v3\n           with:\n             node-version: '18'\n         - run: npm install\n         - run: npm run check\n         - run: npm run build\n   ```\n\n3. **Environment Management**\n   - Development: Local with memory fallback\n   - Staging: Full PostgreSQL + test blockchain\n   - Production: Scaled PostgreSQL + mainnet blockchain\n\n4. **Performance Considerations**\n   - Game assets are optimized for 240x160 GBA resolution\n   - Particle system is performance-tuned\n   - Bundle size optimization through tree shaking\n   - Memory management for infinite runner\n\n### Next Steps for Blockchain Integration\n\n1. Install Hedera and HashConnect dependencies\n2. Implement wallet connection service\n3. Add NFT contract interaction\n4. Create token reward system\n5. Build marketplace UI components\n\nThe codebase is well-structured and ready for your expert developer to extend with full blockchain functionality.","size_bytes":5514},"GITHUB_UPLOAD_INSTRUCTIONS.md":{"content":"# GitHub Upload Instructions for Developer\n\n## Project Structure Recreation\n\nSince GitHub's web interface doesn't handle folder uploads well, here's the complete folder structure that needs to be recreated:\n\n```\nzombie-skater/\n├── client/\n│   ├── src/\n│   │   ├── components/\n│   │   │   ├── ui/\n│   │   │   │   └── (multiple Radix UI components)\n│   │   │   └── ZombieSkaterGame.tsx\n│   │   ├── game/\n│   │   │   ├── scenes/\n│   │   │   │   ├── Game.ts (main game logic with particle effects)\n│   │   │   │   ├── Preload.ts (asset loading)\n│   │   │   │   ├── GameOver.ts\n│   │   │   │   ├── Splash1.ts\n│   │   │   │   └── Splash2.ts\n│   │   │   └── main.ts (Phaser game initialization)\n│   │   ├── hooks/\n│   │   ├── lib/\n│   │   └── styles/\n│   │       └── index.css\n│   ├── public/\n│   │   ├── assets/\n│   │   │   ├── skater_idle.png\n│   │   │   ├── skater_jump.gif\n│   │   │   ├── skater_trick.gif\n│   │   │   └── seamless_city.png\n│   │   └── index.html\n│   └── package.json (client-specific if separated)\n├── server/\n│   ├── index.ts (Express server)\n│   └── (other server files)\n├── shared/\n│   └── (shared TypeScript types)\n├── attached_assets/\n│   └── (development notes and assets)\n└── (root configuration files)\n```\n\n## Critical Files for Game Functionality\n\n### Game Engine Files (ESSENTIAL)\n1. `client/src/game/scenes/Game.ts` - Main game logic with particle effects\n2. `client/src/game/scenes/Preload.ts` - Asset loading and pixel texture creation\n3. `client/src/game/main.ts` - Phaser initialization\n4. `client/src/components/ZombieSkaterGame.tsx` - React wrapper\n\n### Game Assets (ESSENTIAL)\n1. `client/public/assets/skater_idle.png` - Zombie character idle sprite\n2. `client/public/assets/skater_jump.gif` - Jump animation\n3. `client/public/assets/skater_trick.gif` - Trick animation\n4. `client/public/assets/seamless_city.png` - Background\n\n### Configuration Files (ESSENTIAL)\n1. `package.json` - All dependencies\n2. `tsconfig.json` - TypeScript configuration\n3. `vite.config.ts` - Build configuration\n4. `tailwind.config.ts` - CSS framework\n5. `.gitignore` - Security (protects secrets)\n6. `.env.example` - Environment template\n\n### Documentation (HELPFUL)\n1. `README.md` - Complete project overview\n2. `DEVELOPMENT_GUIDE.md` - Build instructions and blockchain roadmap\n3. `replit.md` - Technical architecture\n\n## Quick Setup Commands for Developer\n\nOnce all files are uploaded in correct structure:\n\n```bash\n# Install dependencies\nnpm install\n\n# Start development server\nnpm run dev\n\n# Should see game at http://localhost:5000\n```\n\n## Missing Folders to Send Separately\n\nSince these couldn't be uploaded via GitHub web interface:\n\n1. **client/src/components/ui/** - Contains all Radix UI components\n2. **client/src/hooks/** - React hooks\n3. **client/src/lib/** - Utility functions\n4. **server/** - Express backend code\n5. **shared/** - TypeScript type definitions\n\n## Game Features Currently Working\n\n- Stable ground collision system\n- Jump and double-jump mechanics\n- Particle effects (dust, sparkles, golden trails)\n- Touch controls for mobile\n- Infinite scrolling background\n- Three-state animation system\n\n## Blockchain Integration Ready\n\n- Environment variables configured\n- Architecture documented\n- Integration points identified\n- Ready for Hedera SDK and HashPack wallet\n\nThe game is fully functional. Missing folders contain UI components and server code but core game logic is complete.","size_bytes":3763},"client/src/game/scenes/CharacterSelect.ts":{"content":"import Phaser from 'phaser';\n\nexport default class CharacterSelect extends Phaser.Scene {\n  private selectedIndex = 0;\n  private characters: { container: Phaser.GameObjects.Container; image: Phaser.GameObjects.Image; name: Phaser.GameObjects.Text }[] = [];\n  private cursors!: Phaser.Types.Input.Keyboard.CursorKeys;\n  private menuMusic: Phaser.Sound.BaseSound | null = null;\n\n  constructor() {\n    super('CharacterSelect');\n  }\n\n  init(data: { menuMusic?: Phaser.Sound.BaseSound }) {\n    // Receive menu music from MainMenu to keep it playing\n    this.menuMusic = data.menuMusic || null;\n  }\n\n  create() {\n    const cam = this.cameras.main;\n    \n    // Add graffiti background\n    const bg = this.add.image(cam.centerX, cam.centerY, 'graffiti_bg');\n    bg.setDisplaySize(cam.width, cam.height);\n    \n    // Title\n    this.add.text(cam.centerX, 100, 'SELECT CHARACTER', {\n      fontSize: '24px',\n      color: '#ffecb3',\n      fontFamily: '\"Press Start 2P\", monospace'\n    }).setOrigin(0.5);\n    \n    // Character 1: Zombie Kev with red outline\n    const zombieContainer = this.add.container(cam.centerX - 140, cam.centerY);\n    const zombieBorder = this.add.graphics();\n    zombieBorder.lineStyle(4, 0xff0000); // Red outline\n    zombieBorder.strokeRect(-100, -100, 200, 200);\n    const zombieImage = this.add.image(0, 0, 'zombie_character');\n    zombieImage.setScale(0.25);\n    zombieImage.setInteractive({ useHandCursor: true });\n    zombieContainer.add([zombieBorder, zombieImage]);\n    \n    const zombieName = this.add.text(cam.centerX - 140, cam.centerY + 150, 'KEV', {\n      fontSize: '22px',\n      color: '#ffffff',\n      fontFamily: '\"Press Start 2P\", monospace'\n    }).setOrigin(0.5);\n    \n    // Character 2: Stacy with red outline\n    const stacyContainer = this.add.container(cam.centerX + 140, cam.centerY);\n    const stacyBorder = this.add.graphics();\n    stacyBorder.lineStyle(4, 0xff0000); // Red outline\n    stacyBorder.strokeRect(-100, -100, 200, 200);\n    const stacyImage = this.add.image(0, 0, 'stacy_character');\n    stacyImage.setScale(0.25);\n    stacyImage.setInteractive({ useHandCursor: true });\n    stacyContainer.add([stacyBorder, stacyImage]);\n    \n    const stacyName = this.add.text(cam.centerX + 140, cam.centerY + 150, 'STACY', {\n      fontSize: '22px',\n      color: '#ffffff',\n      fontFamily: '\"Press Start 2P\", monospace'\n    }).setOrigin(0.5);\n    \n    // Store characters for selection\n    this.characters = [\n      { container: zombieContainer, image: zombieImage, name: zombieName },\n      { container: stacyContainer, image: stacyImage, name: stacyName }\n    ];\n    \n    // Selection indicator\n    const selectionIndicator = this.add.graphics();\n    selectionIndicator.lineStyle(4, 0xffff00);\n    \n    // Input handling\n    this.cursors = this.input.keyboard!.createCursorKeys();\n    \n    // Mouse/touch input\n    zombieImage.on('pointerdown', () => {\n      this.selectedIndex = 0;\n      this.confirmSelection();\n    });\n    \n    stacyImage.on('pointerdown', () => {\n      this.selectedIndex = 1;\n      this.confirmSelection();\n    });\n    \n    // Update initial selection\n    this.updateSelection();\n    \n    // Main Menu button\n    const mainMenuButton = this.add.text(cam.centerX, cam.height - 80, 'MAIN MENU', {\n      fontSize: '16px',\n      color: '#ffffff',\n      fontFamily: '\"Press Start 2P\", monospace',\n      backgroundColor: '#333333',\n      padding: { x: 20, y: 10 }\n    }).setOrigin(0.5);\n    \n    // Make it interactive\n    mainMenuButton.setInteractive({ useHandCursor: true });\n    \n    mainMenuButton.on('pointerover', () => {\n      mainMenuButton.setColor('#00ff00');\n      mainMenuButton.setScale(1.1);\n    });\n    \n    mainMenuButton.on('pointerout', () => {\n      mainMenuButton.setColor('#ffffff');\n      mainMenuButton.setScale(1);\n    });\n    \n    mainMenuButton.on('pointerdown', () => {\n      this.scene.start('MainMenu', { menuMusic: this.menuMusic });\n    });\n  }\n  \n  update() {\n    // Navigation\n    if (Phaser.Input.Keyboard.JustDown(this.cursors.left!)) {\n      this.selectedIndex = 0;\n      this.updateSelection();\n    } else if (Phaser.Input.Keyboard.JustDown(this.cursors.right!)) {\n      this.selectedIndex = 1;\n      this.updateSelection();\n    }\n    \n    // Confirmation\n    if (Phaser.Input.Keyboard.JustDown(this.cursors.space!) || \n        Phaser.Input.Keyboard.JustDown(this.input.keyboard!.addKey('ENTER'))) {\n      this.confirmSelection();\n    }\n    \n    // Back to main menu\n    if (Phaser.Input.Keyboard.JustDown(this.input.keyboard!.addKey('ESC'))) {\n      this.scene.start('MainMenu', { menuMusic: this.menuMusic });\n    }\n  }\n  \n  updateSelection() {\n    // Update visual selection\n    this.characters.forEach((char, index) => {\n      if (index === this.selectedIndex) {\n        char.name.setColor('#ffff00');\n        char.name.setScale(1.2);\n        \n        // Add glow effect to selected character\n        char.image.setTint(0xffffaa);\n      } else {\n        char.name.setColor('#ffffff');\n        char.name.setScale(1);\n        \n        // Clear tint from unselected character\n        char.image.clearTint();\n      }\n    });\n  }\n  \n  confirmSelection() {\n    // Stop ALL sounds including menu music when game starts\n    this.sound.stopAll();\n    this.game.sound.stopAll();\n    \n    // Stop global menu music instance on window\n    if ((window as any).menuMusicInstance) {\n      try {\n        (window as any).menuMusicInstance.stop();\n        (window as any).menuMusicInstance.destroy();\n      } catch (e) {\n        // Music might already be destroyed\n      }\n      (window as any).menuMusicInstance = undefined;\n      // CRITICAL: Reset the flag so menu music can restart when returning to menu\n      (window as any).menuMusicStarted = false;\n    }\n    \n    // Pass selected character to Game scene\n    const selectedCharacter = this.selectedIndex === 0 ? 'kev' : 'stacy';\n    this.scene.start('Game', { selectedCharacter });\n  }\n}","size_bytes":5926},"client/src/game/scenes/Splash4.ts":{"content":"export class Splash4 extends Phaser.Scene {\n  constructor() {\n    super({ key: 'Splash4' });\n  }\n\n  create() {\n    // Built by slime splash\n    this.cameras.main.setBackgroundColor('#000000');\n    \n    const centerX = this.cameras.main.width / 2;\n    const centerY = this.cameras.main.height / 2;\n    \n    const slimeImage = this.add.image(centerX, centerY, 'slime_splash');\n    slimeImage.setOrigin(0.5, 0.5);\n    slimeImage.setScale(0.5);\n\n    // Auto-advance after 2 seconds\n    this.time.delayedCall(2000, () => {\n      this.scene.start('Splash5');\n    });\n  }\n}","size_bytes":566},"client/src/game/scenes/Splash5.ts":{"content":"export class Splash5 extends Phaser.Scene {\n  constructor() {\n    super({ key: 'Splash5' });\n  }\n\n  create() {\n    // Starfall V Presents splash\n    this.cameras.main.setBackgroundColor('#000000');\n    \n    const centerX = this.cameras.main.width / 2;\n    const centerY = this.cameras.main.height / 2;\n    \n    const starfallPresents = this.add.image(centerX, centerY, 'starfall_presents');\n    starfallPresents.setOrigin(0.5, 0.5);\n    starfallPresents.setDisplaySize(640, 960);\n\n    // Auto-advance after 2 seconds\n    this.time.delayedCall(2000, () => {\n      this.scene.start('MainMenu');\n    });\n  }\n}","size_bytes":606},"client/src/game/scenes/Leaderboard.ts":{"content":"import Phaser from 'phaser';\n\ninterface LeaderboardEntry {\n  id: number;\n  playerName: string;\n  score: number;\n  createdAt: string;\n}\n\nexport default class Leaderboard extends Phaser.Scene {\n  private cursors!: Phaser.Types.Input.Keyboard.CursorKeys;\n  private menuMusic: Phaser.Sound.BaseSound | null = null;\n  private leaderboardData: LeaderboardEntry[] = [];\n  private isLoading = true;\n\n  constructor() {\n    super({ key: 'Leaderboard' });\n  }\n\n  init(data: { menuMusic?: Phaser.Sound.BaseSound }) {\n    // Receive menu music from MainMenu to keep it playing\n    this.menuMusic = data.menuMusic || null;\n  }\n\n  async create() {\n    // Add graffiti background\n    const bg = this.add.image(320, 480, 'graffiti_bg');\n    bg.setDisplaySize(640, 960);\n    \n    // Title\n    const titleText = this.add.text(320, 120, 'LEADERBOARD', {\n      fontSize: '28px',\n      color: '#ffecb3',\n      fontFamily: '\"Press Start 2P\", monospace',\n      align: 'center',\n      stroke: '#000000',\n      strokeThickness: 4\n    }).setOrigin(0.5);\n    titleText.setShadow(3, 3, '#000000', 5, true, true);\n\n    // Loading text (will be replaced)\n    const loadingText = this.add.text(320, 350, 'LOADING...', {\n      fontSize: '20px',\n      color: '#b9c0cf',\n      fontFamily: '\"Press Start 2P\", monospace',\n      align: 'center',\n      stroke: '#000000',\n      strokeThickness: 3\n    }).setOrigin(0.5);\n    loadingText.setShadow(2, 2, '#000000', 3, true, true);\n\n    // Back instruction\n    const backText = this.add.text(320, 850, 'GO BACK', {\n      fontSize: '22px',\n      color: '#e2e28e',\n      fontFamily: '\"Press Start 2P\", monospace',\n      align: 'center',\n      stroke: '#000000',\n      strokeThickness: 2\n    }).setOrigin(0.5);\n    backText.setShadow(2, 2, '#000000', 3, true, true);\n\n    // Set up input\n    this.cursors = this.input.keyboard!.createCursorKeys();\n    \n    // Touch/click to go back\n    this.input.on('pointerdown', () => {\n      this.scene.start('MainMenu', { menuMusic: this.menuMusic });\n    });\n\n    // Fetch leaderboard data\n    try {\n      const response = await fetch('/api/leaderboard?limit=10');\n      if (response.ok) {\n        this.leaderboardData = await response.json();\n        this.isLoading = false;\n        \n        // Remove loading text\n        loadingText.destroy();\n        \n        // Display leaderboard\n        this.displayLeaderboard();\n      } else {\n        throw new Error('Failed to fetch leaderboard');\n      }\n    } catch (error) {\n      console.error('Error fetching leaderboard:', error);\n      this.isLoading = false;\n      \n      // Show error message\n      loadingText.setText('FAILED TO LOAD\\nLEADERBOARD');\n      loadingText.setColor('#ff0000');\n    }\n  }\n\n  displayLeaderboard() {\n    if (this.leaderboardData.length === 0) {\n      const noScoresText = this.add.text(320, 350, 'NO SCORES YET!\\nBE THE FIRST!', {\n        fontSize: '18px',\n        color: '#b9c0cf',\n        fontFamily: '\"Press Start 2P\", monospace',\n        align: 'center',\n        stroke: '#000000',\n        strokeThickness: 3\n      }).setOrigin(0.5);\n      noScoresText.setShadow(2, 2, '#000000', 3, true, true);\n      return;\n    }\n\n    // Display top 10 scores\n    let yPosition = 200;\n    const lineHeight = 45;\n\n    this.leaderboardData.forEach((entry, index) => {\n      const rank = index + 1;\n      let rankColor = '#ffffff';\n      \n      // Special colors for top 3\n      if (rank === 1) rankColor = '#ffd700'; // Gold\n      else if (rank === 2) rankColor = '#c0c0c0'; // Silver\n      else if (rank === 3) rankColor = '#cd7f32'; // Bronze\n\n      // Rank and player name\n      const nameText = entry.playerName.length > 12 ? \n        entry.playerName.substring(0, 12) + '...' : \n        entry.playerName;\n\n      const rankText = this.add.text(80, yPosition, `${rank}.`, {\n        fontSize: '16px',\n        color: rankColor,\n        fontFamily: '\"Press Start 2P\", monospace',\n        stroke: '#000000',\n        strokeThickness: 2\n      }).setOrigin(0, 0.5);\n      rankText.setShadow(2, 2, '#000000', 2, true, true);\n\n      const nameTextEl = this.add.text(130, yPosition, nameText, {\n        fontSize: '16px',\n        color: rankColor,\n        fontFamily: '\"Press Start 2P\", monospace',\n        stroke: '#000000',\n        strokeThickness: 2\n      }).setOrigin(0, 0.5);\n      nameTextEl.setShadow(2, 2, '#000000', 2, true, true);\n\n      // Score (right aligned)\n      const scoreText = this.add.text(560, yPosition, Math.floor(entry.score).toString(), {\n        fontSize: '16px',\n        color: rankColor,\n        fontFamily: '\"Press Start 2P\", monospace',\n        stroke: '#000000',\n        strokeThickness: 2\n      }).setOrigin(1, 0.5);\n      scoreText.setShadow(2, 2, '#000000', 2, true, true);\n\n      yPosition += lineHeight;\n    });\n  }\n\n  update() {\n    // ESC to go back\n    if (Phaser.Input.Keyboard.JustDown(this.input.keyboard!.addKey('ESC'))) {\n      this.scene.start('MainMenu', { menuMusic: this.menuMusic });\n    }\n  }\n}","size_bytes":4950},"client/src/game/systems/combo.ts":{"content":"import Phaser from 'phaser';\n\nexport interface ComboState {\n  status: 'inactive' | 'pending' | 'active';\n  airEventCount: number;\n  multiplier: number;\n  startScore: number;\n  comboScorePoints: number;\n  lastEventTime: number;\n}\n\nexport interface ComboEvents {\n  comboActivated: { multiplier: number };\n  comboUpdated: { multiplier: number; scorePoints: number };\n  comboEnded: { multiplier: number; scorePoints: number; starsEarned: number };\n}\n\nexport class ComboTracker extends Phaser.Events.EventEmitter {\n  private scene: Phaser.Scene;\n  private state: ComboState = {\n    status: 'inactive',\n    airEventCount: 0,\n    multiplier: 0,\n    startScore: 0,\n    comboScorePoints: 0,\n    lastEventTime: 0\n  };\n\n  constructor(scene: Phaser.Scene) {\n    super();\n    this.scene = scene;\n    this.resetCombo();\n  }\n\n  private resetCombo() {\n    this.state = {\n      status: 'inactive',\n      airEventCount: 0,\n      multiplier: 0,\n      startScore: 0,\n      comboScorePoints: 0,\n      lastEventTime: 0\n    };\n  }\n\n  registerTrick(currentScore: number, isGrounded: boolean): void {\n    if (isGrounded) {\n      console.log('[COMBO] Trick ignored - player is grounded');\n      return;\n    }\n\n    this.registerAirEvent(currentScore);\n    console.log(`[COMBO] Trick registered - airEventCount: ${this.state.airEventCount}`);\n  }\n\n  registerEnemyKill(currentScore: number, isGrounded: boolean): void {\n    if (isGrounded) {\n      console.log('[COMBO] Enemy kill ignored - player is grounded');\n      return;\n    }\n\n    this.registerAirEvent(currentScore);\n    console.log(`[COMBO] Enemy kill registered - airEventCount: ${this.state.airEventCount}`);\n  }\n\n  private registerAirEvent(currentScore: number): void {\n    const currentTime = this.scene.time.now;\n    \n    if (this.state.status === 'inactive') {\n      // Start pending combo\n      this.state.status = 'pending';\n      this.state.startScore = currentScore;\n      this.state.airEventCount = 1;\n      this.state.lastEventTime = currentTime;\n      console.log('[COMBO] Started pending combo');\n    } else if (this.state.status === 'pending') {\n      this.state.airEventCount++;\n      this.state.lastEventTime = currentTime;\n      \n      if (this.state.airEventCount >= 3) {\n        // Activate combo - multiplier starts at 3 for the first 3 events\n        this.state.status = 'active';\n        this.state.multiplier = 3;\n        console.log('[COMBO] COMBO ACTIVATED! Multiplier: 3');\n        this.emit('comboActivated', { multiplier: this.state.multiplier });\n      }\n    } else if (this.state.status === 'active') {\n      // Increment multiplier for each additional event\n      this.state.multiplier++;\n      this.state.lastEventTime = currentTime;\n      console.log(`[COMBO] Combo updated - multiplier: ${this.state.multiplier}`);\n      \n      const scorePoints = currentScore - this.state.startScore;\n      this.emit('comboUpdated', { multiplier: this.state.multiplier, scorePoints });\n    }\n  }\n\n  updateAirState(currentScore: number, wasGrounded: boolean, isGrounded: boolean): number {\n    // Only process landing if we were in air and now on ground\n    if (!wasGrounded && isGrounded) {\n      return this.handleLanding(currentScore);\n    }\n    \n    // Update score points if combo is active\n    if (this.state.status === 'active') {\n      this.state.comboScorePoints = currentScore - this.state.startScore;\n      this.emit('comboUpdated', { \n        multiplier: this.state.multiplier, \n        scorePoints: this.state.comboScorePoints \n      });\n    }\n    \n    return 0;\n  }\n\n  private handleLanding(currentScore: number): number {\n    if (this.state.status === 'inactive') {\n      return 0;\n    }\n\n    let starsEarned = 0;\n    \n    if (this.state.status === 'active') {\n      // Calculate stars: 1% of score points earned during combo, then apply multiplier\n      this.state.comboScorePoints = currentScore - this.state.startScore;\n      const baseStars = Math.floor(this.state.comboScorePoints * 0.01); // 1% of score points\n      starsEarned = baseStars * this.state.multiplier;\n      \n      console.log(`[COMBO] COMBO COMPLETED! Score Points: ${this.state.comboScorePoints}, Base Stars (1%): ${baseStars}, Multiplier: ${this.state.multiplier}, Total Stars: ${starsEarned}`);\n      \n      this.emit('comboEnded', {\n        multiplier: this.state.multiplier,\n        scorePoints: this.state.comboScorePoints,\n        starsEarned\n      });\n    } else {\n      console.log('[COMBO] Landing ended pending combo (less than 3 events)');\n    }\n\n    this.resetCombo();\n    return starsEarned;\n  }\n\n  getComboState(): Readonly<ComboState> {\n    return { ...this.state };\n  }\n\n  isActive(): boolean {\n    return this.state.status === 'active';\n  }\n\n  isPending(): boolean {\n    return this.state.status === 'pending';\n  }\n\n  hasCombo(): boolean {\n    return this.state.status !== 'inactive';\n  }\n}\n\nexport function createComboSystem(scene: Phaser.Scene): ComboTracker {\n  return new ComboTracker(scene);\n}","size_bytes":4950},"client/src/game/scenes/HowToPlay.ts":{"content":"export class HowToPlay extends Phaser.Scene {\n  private cursors!: Phaser.Types.Input.Keyboard.CursorKeys;\n  private menuMusic: Phaser.Sound.BaseSound | null = null;\n\n  constructor() {\n    super({ key: 'HowToPlay' });\n  }\n\n  init(data: { menuMusic?: Phaser.Sound.BaseSound }) {\n    // Receive menu music from OptionsMenu to keep it playing\n    this.menuMusic = data.menuMusic || null;\n  }\n\n  create() {\n    // Add graffiti background\n    const bg = this.add.image(320, 480, 'graffiti_bg');\n    bg.setDisplaySize(640, 960);\n    \n    // Title\n    const title = this.add.text(320, 60, 'HOW TO PLAY', {\n      fontSize: '24px',\n      color: '#ffecb3',\n      fontFamily: '\"Press Start 2P\", monospace',\n      align: 'center',\n      stroke: '#000000',\n      strokeThickness: 4\n    }).setOrigin(0.5);\n    title.setShadow(3, 3, '#000000', 5, true, true);\n\n    // Game Goal\n    const goalText = this.add.text(320, 130, 'SURVIVE AS LONG AS POSSIBLE!\\nCOLLECT STARS, AVOID OBSTACLES', {\n      fontSize: '14px',\n      color: '#ffffff',\n      fontFamily: '\"Press Start 2P\", monospace',\n      align: 'center',\n      stroke: '#000000',\n      strokeThickness: 2\n    }).setOrigin(0.5);\n    goalText.setShadow(2, 2, '#000000', 4, true, true);\n\n    // Collectibles Section with much more spacing\n    let yPos = 220;\n    \n    // Star (first item, using star counter icon)\n    const star = this.add.image(100, yPos, 'star_counter_icon');\n    star.setScale(0.10);\n    const starText = this.add.text(180, yPos, 'STARS\\nCOLLECT 100 FOR EXTRA LIFE', {\n      fontSize: '16px',\n      color: '#ffffff',\n      fontFamily: '\"Press Start 2P\", monospace',\n      align: 'left',\n      stroke: '#000000',\n      strokeThickness: 2\n    }).setOrigin(0, 0.5);\n    starText.setShadow(2, 2, '#000000', 3, true, true);\n\n    yPos += 110; // Increased spacing\n    \n    // Sandwich (second item)\n    const sandwich = this.add.image(100, yPos, 'sandwich');\n    sandwich.setScale(0.13);\n    const sandwichText = this.add.text(180, yPos, 'SANDWICH\\nRESTORES HEALTH', {\n      fontSize: '16px',\n      color: '#ffffff',\n      fontFamily: '\"Press Start 2P\", monospace',\n      align: 'left',\n      stroke: '#000000',\n      strokeThickness: 2\n    }).setOrigin(0, 0.5);\n    sandwichText.setShadow(2, 2, '#000000', 3, true, true);\n\n    yPos += 120; // Slightly more spacing before energy drink\n    \n    // Energy Drink (third item - lowered more)\n    const energyDrink = this.add.image(100, yPos, 'energy_drink');\n    energyDrink.setScale(0.13);\n    const drinkText = this.add.text(180, yPos, 'ENERGY DRINK\\nSTAMINA BOOST + INVINCIBLE', {\n      fontSize: '16px',\n      color: '#ffffff',\n      fontFamily: '\"Press Start 2P\", monospace',\n      align: 'left',\n      stroke: '#000000',\n      strokeThickness: 2\n    }).setOrigin(0, 0.5);\n    drinkText.setShadow(2, 2, '#000000', 3, true, true);\n\n    // Controls Section\n    yPos += 130; // More spacing before controls\n    const controlsTitle = this.add.text(320, yPos, 'CONTROLS', {\n      fontSize: '20px',\n      color: '#ffecb3',\n      fontFamily: '\"Press Start 2P\", monospace',\n      align: 'center',\n      stroke: '#000000',\n      strokeThickness: 3\n    }).setOrigin(0.5);\n    controlsTitle.setShadow(2, 2, '#000000', 4, true, true);\n\n    yPos += 60;\n    const controlsText = this.add.text(320, yPos, 'TAP/SPACE: JUMP\\nSWIPE UP/J KEY: TRICK (IN AIR)\\nSTOMP ON ENEMIES TO DEFEAT', {\n      fontSize: '16px',\n      color: '#ffffff',\n      fontFamily: '\"Press Start 2P\", monospace',\n      align: 'center',\n      stroke: '#000000',\n      strokeThickness: 2\n    }).setOrigin(0.5);\n    controlsText.setShadow(2, 2, '#000000', 3, true, true);\n    \n    // Add combo instruction in smaller font\n    yPos += 70;\n    const comboText = this.add.text(320, yPos, 'COMBINING TRICKS AND KILLS\\nSTARTS COMBOS', {\n      fontSize: '12px',\n      color: '#ffff00',\n      fontFamily: '\"Press Start 2P\", monospace',\n      align: 'center',\n      stroke: '#000000',\n      strokeThickness: 2\n    }).setOrigin(0.5);\n    comboText.setShadow(2, 2, '#000000', 3, true, true);\n\n    // Back Button\n    const backText = this.add.text(320, 850, 'BACK TO OPTIONS', {\n      fontSize: '20px',\n      color: '#00ff00',\n      fontFamily: '\"Press Start 2P\", monospace',\n      align: 'center',\n      stroke: '#000000',\n      strokeThickness: 3\n    }).setOrigin(0.5);\n    \n    // Make back button interactive\n    backText.setInteractive({ useHandCursor: true })\n      .on('pointerdown', () => {\n        this.scene.start('OptionsMenu', { menuMusic: this.menuMusic });\n      })\n      .on('pointerover', () => {\n        backText.setColor('#ffff00');\n      })\n      .on('pointerout', () => {\n        backText.setColor('#00ff00');\n      });\n    \n    // Handle keyboard input\n    const spaceKey = this.input.keyboard?.addKey('SPACE');\n    const enterKey = this.input.keyboard?.addKey('ENTER');\n    const escKey = this.input.keyboard?.addKey('ESC');\n    \n    const goBack = () => {\n      this.scene.start('OptionsMenu', { menuMusic: this.menuMusic });\n    };\n    \n    spaceKey?.on('down', goBack);\n    enterKey?.on('down', goBack);\n    escKey?.on('down', goBack);\n\n    // Set up input\n    this.cursors = this.input.keyboard!.createCursorKeys();\n  }\n}","size_bytes":5189}},"version":1}